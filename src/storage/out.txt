yarn run v1.22.18
$ run-s lint test:unit
$ run-p lint:src lint:test
$ eslint src/ --ext .ts --fix
$ eslint test/ --ext .ts
$ mocha test/unit/*.spec.ts --require ts-node/register


  Firebase
    #initializeApp()
      ✔ should throw given invalid options object: null
      ✔ should throw given invalid options object: null
      ✔ should throw given invalid options object: 0
      ✔ should throw given invalid options object: 1
      ✔ should throw given invalid options object: true
      ✔ should throw given invalid options object: false
      ✔ should throw given invalid options object: ""
      ✔ should throw given invalid options object: "a"
      ✔ should throw given invalid options object: []
      ✔ should throw given invalid options object: undefined
      ✔ should use application default credentials when no credentials are explicitly specified
      ✔ should not modify the provided options object
      ✔ should throw given non-object credential: undefined
      ✔ should throw given non-object credential: null
      ✔ should throw given non-object credential: null
      ✔ should throw given non-object credential: 0
      ✔ should throw given non-object credential: 1
      ✔ should throw given non-object credential: ""
      ✔ should throw given non-object credential: "a"
      ✔ should throw given non-object credential: true
      ✔ should throw given non-object credential: false
      ✔ should throw given non-object credential: ""
      ✔ should throw given non-object credential: undefined
      ✔ should throw given a credential which doesn't implement the Credential interface
      ✔ should initialize SDK given a cert credential with a certificate object
      ✔ should initialize SDK given a cert credential with a valid path to a certificate key file
      ✔ should initialize SDK given an application default credential
      ✔ should initialize SDK given a refresh token credential
      ✔ should initialize App instance with extended service methods
      ✔ should add extended service methods when retrieved via namespace
    #database()
      ✔ should throw if the app has not be initialized
      ✔ should throw given no databaseURL key when initializing the app
      ✔ should return the database service
    #auth
      ✔ should throw if the app has not be initialized
      ✔ should return the auth service
    #messaging
      ✔ should throw if the app has not be initialized
      ✔ should return the messaging service
    #remoteConfig
      ✔ should throw if the app has not be initialized
      ✔ should return the remoteConfig service
    #appCheck
      ✔ should throw if the app has not been initialized
      ✔ should return the appCheck service
    #storage
      ✔ should throw if the app has not be initialized
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should return the storage service

  Credential
    ServiceAccountCredential
      ✔ should throw if called with non-string argument: null
      ✔ should throw if called with non-string argument: null
      ✔ should throw if called with non-string argument: 0
      ✔ should throw if called with non-string argument: 1
      ✔ should throw if called with non-string argument: true
      ✔ should throw if called with non-string argument: false
      ✔ should throw if called with non-string argument: undefined
      ✔ should throw if called with non-string argument: undefined
      ✔ should throw if called with the path to a non-existent file
      ✔ should throw if called with the path to an invalid file
      ✔ should throw if called with an empty string path
      ✔ should throw given an object without a "project_id" property
      ✔ should throw given an object without a "private_key" property
      ✔ should throw given an object with an empty string "private_key" property
      ✔ should throw given an object without a "client_email" property
      ✔ should throw given an object with an empty string "client_email" property
      ✔ should throw given an object with a malformed "private_key" property
      ✔ should not throw given a valid path to a key file
      ✔ should accept "clientEmail" in place of "client_email" for the certificate object
      ✔ should accept "privateKey" in place of "private_key" for the certificate object
      ✔ should return a Credential
      ✔ should return an implicit Credential
      ✔ should create access tokens
      Error Handling
        ✔ should throw an error including error details
        ✔ should throw an error including error text payload
        ✔ should throw when the success response is malformed
    RefreshTokenCredential
      ✔ should throw if called with the path to an invalid file
      ✔ should throw given an object without a "clientId" property
      ✔ should throw given an object without a "clientSecret" property
      ✔ should throw given an object without a "refreshToken" property
      ✔ should throw given an object without a "type" property
      ✔ should return a Credential
      ✔ should return an implicit Credential
      ✔ should create access tokens
    ComputeEngineCredential
      ✔ should create access tokens
      ✔ should create id tokens
      ✔ should discover project id
      ✔ should cache discovered project id
      ✔ should reject when the metadata service is not available
      ✔ should reject when the metadata service responds with an error
    getApplicationDefault()
      ✔ should return a CertCredential with GOOGLE_APPLICATION_CREDENTIALS set
      ✔ should throw if explicitly pointing to an invalid path
      ✔ should throw if explicitly pointing to an invalid cert file
      ✔ should throw error if type not specified on cert file
      ✔ should throw error if type is unknown on cert file
      ✔ should return a RefreshTokenCredential with gcloud login
      ✔ should throw if a the gcloud login cache is invalid
      ✔ should throw if the credentials file content is not an object
      ✔ should return a MetadataServiceCredential as a last resort
      ✔ should create access tokens
      ✔ should return a Credential
      ✔ should parse valid RefreshTokenCredential if GOOGLE_APPLICATION_CREDENTIALS environment variable points to default refresh token location
    isApplicationDefault()
      ✔ should return true for ServiceAccountCredential loaded from GOOGLE_APPLICATION_CREDENTIALS
      ✔ should return true for RefreshTokenCredential loaded from GOOGLE_APPLICATION_CREDENTIALS
      ✔ should return true for credential loaded from gcloud SDK
      ✔ should return true for ComputeEngineCredential
      ✔ should return false for explicitly loaded ServiceAccountCredential
      ✔ should return false for explicitly loaded RefreshTokenCredential
      ✔ should return false for custom credential
    HTTP Agent
      ✔ ServiceAccountCredential should use the provided HTTP Agent
      ✔ RefreshTokenCredential should use the provided HTTP Agent
      ✔ ComputeEngineCredential should use the provided HTTP Agent
      ✔ ApplicationDefaultCredential should use the provided HTTP Agent

  firebase-admin/app
    #initializeApp()
      ✔ should throw given invalid options object: null
      ✔ should throw given invalid options object: null
      ✔ should throw given invalid options object: 0
      ✔ should throw given invalid options object: 1
      ✔ should throw given invalid options object: true
      ✔ should throw given invalid options object: false
      ✔ should throw given invalid options object: ""
      ✔ should throw given invalid options object: "a"
      ✔ should throw given invalid options object: []
      ✔ should throw given invalid options object: undefined
      ✔ should use application default credentials when no credentials are explicitly specified
      ✔ should not modify the provided options object
      ✔ should throw given non-object credential: undefined
      ✔ should throw given non-object credential: null
      ✔ should throw given non-object credential: null
      ✔ should throw given non-object credential: 0
      ✔ should throw given non-object credential: 1
      ✔ should throw given non-object credential: ""
      ✔ should throw given non-object credential: "a"
      ✔ should throw given non-object credential: true
      ✔ should throw given non-object credential: false
      ✔ should throw given non-object credential: ""
      ✔ should throw given non-object credential: undefined
      ✔ should throw given a credential which doesn't implement the Credential interface
      ✔ should initialize App instance without extended service methods
    #getApp()
      ✔ should throw given invalid app name: null
      ✔ should throw given invalid app name: null
      ✔ should throw given invalid app name: 0
      ✔ should throw given invalid app name: 1
      ✔ should throw given invalid app name: true
      ✔ should throw given invalid app name: false
      ✔ should throw given invalid app name: ""
      ✔ should throw given invalid app name: []
      ✔ should throw given invalid app name: undefined
      ✔ should return default app when name not specified
      ✔ should return named app when available
      ✔ should throw when the default app does not exist
      ✔ should throw when the specified app does not exist
    #getApps()
      ✔ should return empty array when no apps available
      ✔ should return a non-empty array of apps
      ✔ apps array is immutable
    #deleteApp()
      ✔ should delete the specified app
      ✔ should throw if the app is already deleted
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: undefined
    SDK_VERSION
      ✔ should indicate the current version of the SDK
    #cert()
      ✔ should create a service account credential from object
      ✔ should create a service account credential from file path
    #refreshToken()
      ✔ should create a refresh token credential from object
    #applicationDefault()
      ✔ should create application default credentials from environment
      ✔ should cache application default credentials globally

  FirebaseApp
    #name
      ✔ should throw if the app has already been deleted
      ✔ should return the app's name
      ✔ should be case sensitive
      ✔ should respect leading and trailing whitespace
      ✔ should be read-only
    #options
      ✔ should throw if the app has already been deleted
      ✔ should return the app's options
      ✔ should be read-only
      ✔ should not return an object which can mutate the underlying options
      ✔ should ignore the config file when options is not null
      ✔ should throw when the environment variable points to non existing file
      ✔ should throw when the environment variable contains bad json
      ✔ should throw when the environment variable points to an empty file
      ✔ should throw when the environment variable points to bad json
      ✔ should ignore a bad config key in the config file
      ✔ should ignore a bad config key in the json string
      ✔ should not throw when the config file has a bad key and the config file is unused
      ✔ should not throw when the config json has a bad key and the config json is unused
      ✔ should use explicitly specified options when available and ignore the config file
      ✔ should not throw if some fields are missing
      ✔ should not throw when the config environment variable is not set, and some options are present
      ✔ should init with application default creds when no options provided and env variable is not set
      ✔ should init with application default creds when no options provided and env variable is an empty json
      ✔ should init when no init arguments are provided and config var points to a file
      ✔ should init when no init arguments are provided and config var is json
    #delete()
      ✔ should throw if the app has already been deleted
      ✔ should call removeApp() on the Firebase namespace internals
      ✔ should call delete() on each service's internals
    auth()
      ✔ should throw if the app has already been deleted
      ✔ should return the Auth namespace
      ✔ should return a cached version of Auth on subsequent calls
    messaging()
      ✔ should throw if the app has already been deleted
      ✔ should return the Messaging namespace
      ✔ should return a cached version of Messaging on subsequent calls
    machineLearning()
      ✔ should throw if the app has already been deleted
      ✔ should return the machineLearning client
      ✔ should return a cached version of MachineLearning on subsequent calls
    database()
      ✔ should throw if the app has already been deleted
      ✔ should return the Database
      ✔ should return the Database for different apps
      ✔ should throw when databaseURL is not set
      ✔ should return a cached version of Database on subsequent calls
      ✔ should return a Database instance for the specified URL
      ✔ should throw given invalid URL argument: null
      ✔ should throw given invalid URL argument: null
      ✔ should throw given invalid URL argument: 0
      ✔ should throw given invalid URL argument: 1
      ✔ should throw given invalid URL argument: true
      ✔ should throw given invalid URL argument: false
      ✔ should throw given invalid URL argument: ""
      ✔ should throw given invalid URL argument: []
      ✔ should throw given invalid URL argument: [1,"a"]
      ✔ should throw given invalid URL argument: {}
      ✔ should throw given invalid URL argument: {"a":1}
      ✔ should throw given invalid URL argument: undefined
      ✔ should throw given invalid URL string: 'a'
      ✔ should throw given invalid URL string: 'foo'
      ✔ should throw given invalid URL string: 'google.com'
    storage()
      ✔ should throw if the app has already been deleted
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should return the Storage namespace
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should return a cached version of Storage on subsequent calls
    firestore()
      ✔ should throw if the app has already been deleted
      ✔ should return the Firestore client
      ✔ should return a cached version of Firestore on subsequent calls
    installations()
      ✔ should throw if the app has already been deleted
      ✔ should return the InstanceId client
      ✔ should return a cached version of InstanceId on subsequent calls
    instanceId()
      ✔ should throw if the app has already been deleted
      ✔ should return the InstanceId client
      ✔ should return a cached version of InstanceId on subsequent calls
    projectManagement()
      ✔ should throw if the app has already been deleted
      ✔ should return the projectManagement client
      ✔ should return a cached version of ProjectManagement on subsequent calls
    securityRules()
      ✔ should throw if the app has already been deleted
      ✔ should return the securityRules client
      ✔ should return a cached version of SecurityRules on subsequent calls
    remoteConfig()
      ✔ should throw if the app has already been deleted
      ✔ should return the RemoteConfig client
      ✔ should return a cached version of RemoteConfig on subsequent calls
    appCheck()
      ✔ should throw if the app has already been deleted
      ✔ should return the AppCheck client
      ✔ should return a cached version of AppCheck on subsequent calls
    INTERNAL.getToken()
      ✔ throws a custom credential implementation which returns invalid access tokens
      ✔ returns a valid token given a well-formed custom credential implementation
      ✔ returns a valid token given no arguments
      ✔ returns a valid token with force refresh
      ✔ returns the cached token given no arguments
      ✔ returns a new token with force refresh
      ✔ proactively refreshes the token five minutes before it expires
      ✔ Includes the original error in exception
      ✔ Returns a detailed message when an error is due to an invalid_grant
    INTERNAL.addAuthTokenListener()
      ✔ is notified when the token changes
      ✔ can be called twice
      ✔ will be called on token refresh
      ✔ will fire with the initial token if it exists
    INTERNAL.removeTokenListener()
      ✔ removes the listener

  FirebaseNamespace
    #SDK_VERSION
      ✔ should return the SDK version
    #apps
      ✔ should return an empty array if there are no apps within this namespace
      ✔ should return an array of apps within this namespace
      ✔ should not include apps which have been deleted
      ✔ should be read-only
    #app()
      ✔ should throw given non-string app name: null
      ✔ should throw given non-string app name: null
      ✔ should throw given non-string app name: 0
      ✔ should throw given non-string app name: 1
      ✔ should throw given non-string app name: true
      ✔ should throw given non-string app name: false
      ✔ should throw given non-string app name: []
      ✔ should throw given non-string app name: ["a"]
      ✔ should throw given non-string app name: {}
      ✔ should throw given non-string app name: {"a":1}
      ✔ should throw given non-string app name: undefined
      ✔ should throw given empty string app name
      ✔ should throw given an app name which does not correspond to an existing app
      ✔ should throw given a deleted app
      ✔ should throw given no app name if the default app does not exist
      ✔ should return the app associated with the provided app name
      ✔ should return the default app if no app name is provided
      ✔ should return the default app if the default app name is provided
    #initializeApp()
      ✔ should throw given non-string app name: null
      ✔ should throw given non-string app name: null
      ✔ should throw given non-string app name: 0
      ✔ should throw given non-string app name: 1
      ✔ should throw given non-string app name: true
      ✔ should throw given non-string app name: false
      ✔ should throw given non-string app name: []
      ✔ should throw given non-string app name: ["a"]
      ✔ should throw given non-string app name: {}
      ✔ should throw given non-string app name: {"a":1}
      ✔ should throw given non-string app name: undefined
      ✔ should throw given empty string app name
      ✔ should throw given a name corresponding to an existing app
      ✔ should throw given no app name if the default app already exists
      ✔ should return a new app with the provided options and app name
      ✔ should return an app with the default app name if no app name is provided
      ✔ should allow re-use of a deleted app name
      ✔ should add the new app to the namespace's app list
    #auth()
      ✔ should throw when called before initializing an app
      ✔ should throw when default app is not initialized
      ✔ should return a valid namespace when the default app is initialized
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to Auth type
      ✔ should return a cached version of Auth on subsequent calls
    #database()
      ✔ should throw when called before initializing an app
      ✔ should throw when default app is not initialized
      ✔ should return a valid namespace when the default app is initialized
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to Database type
      ✔ should return a reference to DataSnapshot type
      ✔ should return a reference to OnDisconnect type
      ✔ should return a reference to Query type
      ✔ should return a reference to Reference type
      ✔ should return a reference to ServerValue type
      ✔ should return a reference to enableLogging function
      ✔ should return a cached version of Database on subsequent calls
    #messaging()
      ✔ should throw when called before initializing an app
      ✔ should throw when default app is not initialized
      ✔ should return a valid namespace when the default app is initialized
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to Messaging type
      ✔ should return a cached version of Messaging on subsequent calls
    #machineLearning()
      ✔ should throw when called before initializating an app
      ✔ should throw when default app is not initialized
      ✔ should return a valid namespace when the default app is initialized
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to Machine Learning type
      ✔ should return a cached version of MachineLearning on subsequent calls
    #storage()
      ✔ should throw when called before initializing an app
      ✔ should throw when default app is not initialized
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should return a valid namespace when the default app is initialized
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to Storage type
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should return a cached version of Storage on subsequent calls
    #firestore()
      ✔ should throw when called before initializing an app
      ✔ should throw when default app is not initialized
      ✔ should return a valid namespace when the default app is initialized
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to Firestore type
      ✔ should return a reference to FieldPath type
      ✔ should return a reference to FieldValue type
      ✔ should return a reference to GeoPoint type
      ✔ should return a reference to setLogFunction
      ✔ should return a reference to the v1beta1 namespace
      ✔ should return a reference to the v1 namespace
      ✔ should return a cached version of Firestore on subsequent calls
    #installations()
      ✔ should throw when called before initializing an app
      ✔ should throw when default app is not initialized
      ✔ should return a valid namespace when the default app is initialized
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to Installations type
      ✔ should return a cached version of Installations on subsequent calls
    #instanceId()
      ✔ should throw when called before initializing an app
      ✔ should throw when default app is not initialized
      ✔ should return a valid namespace when the default app is initialized
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to InstanceId type
      ✔ should return a cached version of InstanceId on subsequent calls
    #projectManagement()
      ✔ should throw when called before initializing an app
      ✔ should throw when default app is not initialized
      ✔ should return a valid namespace when the default app is initialized
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to ProjectManagement type
      ✔ should return a cached version of ProjectManagement on subsequent calls
    #securityRules()
      ✔ should throw when called before initializing an app
      ✔ should throw when default app is not initialized
      ✔ should return a valid namespace when the default app is initialized
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to SecurityRules type
      ✔ should return a cached version of SecurityRules on subsequent calls
    #remoteConfig()
      ✔ should throw when called before initializing an app
      ✔ should throw when default app is not initialized
      ✔ should return a valid namespace when the default app is initialized
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to RemoteConfig type
      ✔ should return a cached version of RemoteConfig on subsequent calls
    credentials
      ✔ should create a service account credential from object
      ✔ should create a refresh token credential from object
      ✔ should create application default credentials from environment
    #appCheck()
      ✔ should throw when called before initializing an app
      ✔ should throw when default app is not initialized
      ✔ should return a valid namespace when the default app is initialized
      ✔ should return a valid namespace when the named app is initialized
      ✔ should return a reference to AppCheck type
      ✔ should return a cached version of AppCheck on subsequent calls

  SDK_VERSION
    ✔ utils index should retrieve the SDK_VERSION from package.json

  addReadonlyGetter()
    ✔ should add a new property to the provided object
    ✔ should make the new property read-only
    ✔ should make the new property enumerable

  toWebSafeBase64()
    ✔ should convert a byte buffer to a web-safe base64 encoded string
    ✔ should convert to web safe base64 encoded with plus signs and slashes replaced

  getExplicitProjectId()
    ✔ should return the explicitly specified project ID from app options
    ✔ should return the project ID from service account
    ✔ should return the project ID set in GOOGLE_CLOUD_PROJECT environment variable
    ✔ should return the project ID set in GCLOUD_PROJECT environment variable
    ✔ should return null when project ID is not set

  findProjectId()
    ✔ should return the explicitly specified project ID from app options
    ✔ should return the project ID from service account
    ✔ should return the project ID set in GOOGLE_CLOUD_PROJECT environment variable
    ✔ should return the project ID set in GCLOUD_PROJECT environment variable
    ✔ should return the project ID discovered from the metadata service
    ✔ should reject when the metadata service is not available
    ✔ should return null when project ID is not set and discoverable

  findProjectId()
    ✔ should return the explicitly specified project ID from app options
    ✔ should return the project ID from service account
    ✔ should return the project ID set in GOOGLE_CLOUD_PROJECT environment variable
    ✔ should return the project ID set in GCLOUD_PROJECT environment variable
    ✔ should return null when project ID is not set

  formatString()
    ✔ should keep string as is if not parameters are provided
    ✔ should substitute parameters in string
    ✔ should keep string as is if braces are not matching
    ✔ should handle multiple successive braces
    ✔ should substitute multiple occurrences of the same parameter
    ✔ should keep string as is if parameters are not found

  generateUpdateMask()
    ✔ should return empty array for non object null
    ✔ should return empty array for non object null
    ✔ should return empty array for non object 0
    ✔ should return empty array for non object 1
    ✔ should return empty array for non object true
    ✔ should return empty array for non object false
    ✔ should return empty array for non object ""
    ✔ should return empty array for non object "a"
    ✔ should return empty array for non object []
    ✔ should return empty array for non object [1,"a"]
    ✔ should return empty array for non object undefined
    ✔ should return empty array for empty object
    ✔ should return expected update mask array for nested object
    ✔ should return expected update mask array with max paths for nested object

  transformMillisecondsToSecondsString()
    ✔ should transform to protobuf duration string when provided milliseconds:3000.000001
    ✔ should transform to protobuf duration string when provided milliseconds:3000.001
    ✔ should transform to protobuf duration string when provided milliseconds:3000
    ✔ should transform to protobuf duration string when provided milliseconds:3500

  parseResourceName()
    ✔ should return projectId, location, and resource when given a full resource name
    ✔ should return location and resource when given a partial resource name
    ✔ should return the resource when given only the resource name

  FirebaseError
    ✔ should initialize successfully with error info specified
    ✔ should throw if no error info is specified
    ✔ toJSON() should resolve with the expected object

  FirebaseAuthError
    ✔ should initialize successfully with no message specified
    ✔ should initialize successfully with a message specified
    fromServerError()
      without message specified
        ✔ should initialize an error from an expected server code
        ✔ should initialize an error from an unexpected server code
        ✔ should initialize an error from an expected server with server detailed message
      with message specified
        ✔ should initialize an error from an expected server code
        ✔ should initialize an error from an unexpected server code
        ✔ should initialize an error from an expected server with server detailed message
      with raw server response specified
        ✔ should not include raw server response from an expected server code
        ✔ should include raw server response from an unexpected server code

  FirebaseMessagingError
    ✔ should initialize successfully with no message specified
    ✔ should initialize successfully with a message specified
    fromServerError()
      without message specified
        ✔ should initialize an error from an expected server code
        ✔ should initialize an error from an unexpected server code
      with message specified
        ✔ should initialize an error from an expected server code
        ✔ should initialize an error from an unexpected server code
      with raw server response specified
        ✔ should not include raw server response from an expected server code
        ✔ should include raw server response from an unexpected server code

  isArray()
    ✔ should return false given no argument
    ✔ should return false given a non-array argument: null
    ✔ should return false given a non-array argument: null
    ✔ should return false given a non-array argument: 0
    ✔ should return false given a non-array argument: 1
    ✔ should return false given a non-array argument: ""
    ✔ should return false given a non-array argument: "a"
    ✔ should return false given a non-array argument: true
    ✔ should return false given a non-array argument: false
    ✔ should return false given a non-array argument: {}
    ✔ should return false given a non-array argument: {"a":1}
    ✔ should return false given a non-array argument: undefined
    ✔ should return true given an empty array
    ✔ should return true given a non-empty array
    ✔ should return true given an empty array created from Array constructor
    ✔ should return true given a non-empty array created from Array constructor

  isNonEmptyArray()
    ✔ should return false given no argument
    ✔ should return false given a non-array argument: null
    ✔ should return false given a non-array argument: null
    ✔ should return false given a non-array argument: 0
    ✔ should return false given a non-array argument: 1
    ✔ should return false given a non-array argument: ""
    ✔ should return false given a non-array argument: "a"
    ✔ should return false given a non-array argument: true
    ✔ should return false given a non-array argument: false
    ✔ should return false given a non-array argument: {}
    ✔ should return false given a non-array argument: {"a":1}
    ✔ should return false given a non-array argument: undefined
    ✔ should return false given an empty array
    ✔ should return true given a non-empty array
    ✔ should return false given an empty array created from Array constructor
    ✔ should return true given a non-empty array created from Array constructor

  isBoolean()
    ✔ should return false given no argument
    ✔ should return false given a non-boolean argument: null
    ✔ should return false given a non-boolean argument: null
    ✔ should return false given a non-boolean argument: 0
    ✔ should return false given a non-boolean argument: 1
    ✔ should return false given a non-boolean argument: ""
    ✔ should return false given a non-boolean argument: "a"
    ✔ should return false given a non-boolean argument: []
    ✔ should return false given a non-boolean argument: ["a"]
    ✔ should return false given a non-boolean argument: {}
    ✔ should return false given a non-boolean argument: {"a":1}
    ✔ should return false given a non-boolean argument: undefined
    ✔ should return true given true
    ✔ should return true given false

  isNumber()
    ✔ should return false given no argument
    ✔ should return false given a non-number argument: null
    ✔ should return false given a non-number argument: true
    ✔ should return false given a non-number argument: false
    ✔ should return false given a non-number argument: ""
    ✔ should return false given a non-number argument: "a"
    ✔ should return false given a non-number argument: []
    ✔ should return false given a non-number argument: ["a"]
    ✔ should return false given a non-number argument: {}
    ✔ should return false given a non-number argument: {"a":1}
    ✔ should return false given a non-number argument: undefined
    ✔ should return false given NaN
    ✔ should return true given 0
    ✔ should return true given a negative number
    ✔ should return true given a positive number
    ✔ should return true given Number.MAX_SAFE_INTEGER
    ✔ should return true given Number.MIN_SAFE_INTEGER
    ✔ should return true given Infinity
    ✔ should return true given -Infinity

  isString()
    ✔ should return false given no argument
    ✔ should return false given a non-string argument: null
    ✔ should return false given a non-string argument: null
    ✔ should return false given a non-string argument: 0
    ✔ should return false given a non-string argument: 1
    ✔ should return false given a non-string argument: true
    ✔ should return false given a non-string argument: false
    ✔ should return false given a non-string argument: []
    ✔ should return false given a non-string argument: ["a"]
    ✔ should return false given a non-string argument: {}
    ✔ should return false given a non-string argument: {"a":1}
    ✔ should return false given a non-string argument: undefined
    ✔ should return true given an empty string
    ✔ should return true given a string with only whitespace
    ✔ should return true given a non-empty string

  isNonEmptyString()
    ✔ should return false given no argument
    ✔ should return false given a non-string argument: null
    ✔ should return false given a non-string argument: null
    ✔ should return false given a non-string argument: 0
    ✔ should return false given a non-string argument: 1
    ✔ should return false given a non-string argument: true
    ✔ should return false given a non-string argument: false
    ✔ should return false given a non-string argument: []
    ✔ should return false given a non-string argument: ["a"]
    ✔ should return false given a non-string argument: {}
    ✔ should return false given a non-string argument: {"a":1}
    ✔ should return false given a non-string argument: undefined
    ✔ should return false given an empty string
    ✔ should return true given a string with only whitespace
    ✔ should return true given a non-empty string

  isObject()
    ✔ should return false given no argument
    ✔ should return false given a non-object argument: null
    ✔ should return false given a non-object argument: 0
    ✔ should return false given a non-object argument: 1
    ✔ should return false given a non-object argument: true
    ✔ should return false given a non-object argument: false
    ✔ should return false given a non-object argument: ""
    ✔ should return false given a non-object argument: "a"
    ✔ should return false given a non-object argument: undefined
    ✔ should return false given an empty array
    ✔ should return false given a non-empty array
    ✔ should return true given null
    ✔ should return true given an empty object
    ✔ should return true given a non-empty object

  isNonNullObject()
    ✔ should return false given no argument
    ✔ should return false given a non-object argument: null
    ✔ should return false given a non-object argument: 0
    ✔ should return false given a non-object argument: 1
    ✔ should return false given a non-object argument: true
    ✔ should return false given a non-object argument: false
    ✔ should return false given a non-object argument: ""
    ✔ should return false given a non-object argument: "a"
    ✔ should return false given a non-object argument: undefined
    ✔ should return false given null
    ✔ should return false given an empty array
    ✔ should return false given a non-empty array
    ✔ should return true given an empty object
    ✔ should return true given a non-empty object

  isUid()
    ✔ should return true with a valid uid
    ✔ should return false with a null input
    ✔ should return false with an undefined input
    ✔ should return false with an invalid type
    ✔ should return false with an empty string
    ✔ should return false with a string longer than 128 characters

  isPassword()
    ✔ should return false with a null input
    ✔ should return false with an undefined input
    ✔ should return false with a non string
    ✔ should return false with an empty string
    ✔ should return false with a string of less than 6 characters
    ✔ should return true with a string of at least 6 characters

  isEmail()
    ✔ should return false with a null input
    ✔ should return false with an undefined input
    ✔ should return false with a non string
    ✔ show return true with a valid email string
    ✔ should return false with an invalid email string

  isURL()
    ✔ should return false with a null input
    ✔ should return false with an undefined input
    ✔ should return false with a non string
    ✔ show return true with a valid web URL string
    ✔ should return false with an invalid web URL string

  isPhoneNumber()
    ✔ should return false given no argument
    ✔ should return false given a non-string argument: null
    ✔ should return false given a non-string argument: null
    ✔ should return false given a non-string argument: 0
    ✔ should return false given a non-string argument: 1
    ✔ should return false given a non-string argument: true
    ✔ should return false given a non-string argument: false
    ✔ should return false given a non-string argument: []
    ✔ should return false given a non-string argument: ["a"]
    ✔ should return false given a non-string argument: {}
    ✔ should return false given a non-string argument: {"a":1}
    ✔ should return false given a non-string argument: undefined
    ✔ should return false given an empty string
    ✔ should return false given a string with only whitespace
    ✔ should return false given a string with only a plus sign
    ✔ should return false given a string with a plus sign and no alphanumeric char
    ✔ should return true given a valid phone number
    ✔ should return true given a valid phone number that is formatted
    ✔ should return true given a valid phone number with alphabetical chars

  isBuffer()
    ✔ should return false given no argument
    ✔ should return false given a non-buffer argument: null
    ✔ should return false given a non-buffer argument: null
    ✔ should return false given a non-buffer argument: 0
    ✔ should return false given a non-buffer argument: 1
    ✔ should return false given a non-buffer argument: ""
    ✔ should return false given a non-buffer argument: "a"
    ✔ should return false given a non-buffer argument: []
    ✔ should return false given a non-buffer argument: ["a"]
    ✔ should return false given a non-buffer argument: {}
    ✔ should return false given a non-buffer argument: {"a":1}
    ✔ should return false given a non-buffer argument: undefined
    ✔ should return false given a non-buffer argument: false
    ✔ should return true given a buffer

  isUTCDateString()
    ✔ should return false given no argument
    ✔ should return false given an invalid UTC date string: null
    ✔ should return false given an invalid UTC date string: null
    ✔ should return false given an invalid UTC date string: 0
    ✔ should return false given an invalid UTC date string: 1
    ✔ should return false given an invalid UTC date string: true
    ✔ should return false given an invalid UTC date string: false
    ✔ should return false given an invalid UTC date string: []
    ✔ should return false given an invalid UTC date string: ["a"]
    ✔ should return false given an invalid UTC date string: {}
    ✔ should return false given an invalid UTC date string: {"a":1}
    ✔ should return false given an invalid UTC date string: undefined
    ✔ should return false given an invalid UTC date string: 1681249797418
    ✔ should return false given an invalid UTC date string: "1681249797418"
    ✔ should return false given an invalid UTC date string: "2023-04-11T21:49:57.418Z"
    ✔ should return false given an invalid UTC date string: "Fri, 25 Oct 2019 04:01:21"
    ✔ should return false given an invalid UTC date string: "25 Oct 2019"
    ✔ should return false given an invalid UTC date string: "Fri, 25 Oct 2019"
    ✔ should return false given an invalid UTC date string: "2019-10-25"
    ✔ should return false given an invalid UTC date string: "2019-10-25T04:07:34.036"
    ✔ should return false given an invalid UTC date string: "Tue Apr 11 2023"
    ✔ should return true given a valid UTC date string

  isISODateString()
    ✔ should return false given no argument
    ✔ should return false given an invalid ISO date string: null
    ✔ should return false given an invalid ISO date string: null
    ✔ should return false given an invalid ISO date string: 0
    ✔ should return false given an invalid ISO date string: 1
    ✔ should return false given an invalid ISO date string: true
    ✔ should return false given an invalid ISO date string: false
    ✔ should return false given an invalid ISO date string: []
    ✔ should return false given an invalid ISO date string: ["a"]
    ✔ should return false given an invalid ISO date string: {}
    ✔ should return false given an invalid ISO date string: {"a":1}
    ✔ should return false given an invalid ISO date string: undefined
    ✔ should return false given an invalid ISO date string: 1681249797419
    ✔ should return false given an invalid ISO date string: "1681249797419"
    ✔ should return false given an invalid ISO date string: "Tue, 11 Apr 2023 21:49:57 GMT"
    ✔ should return false given an invalid ISO date string: "Fri, 25 Oct 2019 04:01:21"
    ✔ should return false given an invalid ISO date string: "25 Oct 2019"
    ✔ should return false given an invalid ISO date string: "Fri, 25 Oct 2019"
    ✔ should return false given an invalid ISO date string: "2019-10-25"
    ✔ should return false given an invalid ISO date string: "2019-10-25T04:07:34.036"
    ✔ should return false given an invalid ISO date string: "Tue Apr 11 2023"
    ✔ should return true given a valid ISO date string

  HttpClient
    ✔ should throw when maxRetries is: string
    ✔ should throw when maxRetries is: null
    ✔ should throw when maxRetries is: undefined
    ✔ should throw when maxRetries is: [object Object]
    ✔ should throw when maxRetries is: 
    ✔ should throw when maxRetries is: true
    ✔ should throw when maxRetries is: false
    ✔ should throw when maxRetries is: NaN
    ✔ should throw when maxRetries is: -1
    ✔ should throw when backOffFactor is: string
    ✔ should throw when backOffFactor is: null
    ✔ should throw when backOffFactor is: [object Object]
    ✔ should throw when backOffFactor is: 
    ✔ should throw when backOffFactor is: true
    ✔ should throw when backOffFactor is: false
    ✔ should throw when backOffFactor is: NaN
    ✔ should throw when backOffFactor is: -1
    ✔ should throw when maxDelayInMillis is: string
    ✔ should throw when maxDelayInMillis is: null
    ✔ should throw when maxDelayInMillis is: undefined
    ✔ should throw when maxDelayInMillis is: [object Object]
    ✔ should throw when maxDelayInMillis is: 
    ✔ should throw when maxDelayInMillis is: true
    ✔ should throw when maxDelayInMillis is: false
    ✔ should throw when maxDelayInMillis is: NaN
    ✔ should throw when maxDelayInMillis is: -1
    ✔ should throw when ioErrorCodes is: string
    ✔ should throw when ioErrorCodes is: null
    ✔ should throw when ioErrorCodes is: [object Object]
    ✔ should throw when ioErrorCodes is: true
    ✔ should throw when ioErrorCodes is: false
    ✔ should throw when ioErrorCodes is: NaN
    ✔ should throw when ioErrorCodes is: 0
    ✔ should throw when ioErrorCodes is: 1
    ✔ should throw when statusCodes is: string
    ✔ should throw when statusCodes is: null
    ✔ should throw when statusCodes is: [object Object]
    ✔ should throw when statusCodes is: true
    ✔ should throw when statusCodes is: false
    ✔ should throw when statusCodes is: NaN
    ✔ should throw when statusCodes is: 0
    ✔ should throw when statusCodes is: 1
    ✔ should be fulfilled for a 2xx response with a json payload
    ✔ should be fulfilled for a 2xx response with a text payload
    ✔ should be fulfilled for a 2xx response with an empty multipart payload
    ✔ should be fulfilled for a 2xx response with a multipart payload
    ✔ should be fulfilled for a 2xx response with any multipart payload
    ✔ should handle as a text response when boundary not present
    ✔ should be fulfilled for a 2xx response with a compressed payload
    ✔ should use the specified HTTP agent
    ✔ should use the default RetryConfig
    ✔ should make a POST request with the provided headers and data
    ✔ should use the specified content-type header for the body
    ✔ should not mutate the arguments
    ✔ should make a GET request with the provided headers and data
    ✔ should merge query parameters in URL with data
    ✔ should urlEncode query parameters in URL
    ✔ should default to https when protocol not specified
    ✔ should fail with a GET request containing non-object data
    ✔ should make a HEAD request with the provided headers and data
    ✔ should fail with a HEAD request containing non-object data
    ✔ should fail with an HttpError for a 4xx response
    ✔ should fail with an HttpError for a 5xx response
    ✔ should fail for an error response with a multipart payload
    ✔ should fail with a FirebaseAppError for a network error
    ✔ should timeout when the response is repeatedly delayed
    ✔ should timeout when multiple socket timeouts encountered
    ✔ should be rejected, after 4 retries, on multiple network errors
    ✔ should be rejected, after 4 retries, on multiple 503 errors
    ✔ should succeed, after 1 retry, on a single network error
    ✔ should not retry when RetryConfig is explicitly null
    ✔ should not retry when maxRetries is set to 0
    ✔ should not retry when error codes are not configured
    ✔ should succeed after a retry on a configured I/O error
    ✔ should succeed after a retry on a configured HTTP error
    ✔ should not retry more than maxRetries
    ✔ should not retry when retry-after exceeds maxDelayInMillis
    ✔ should retry with exponential back off
    ✔ delay should not exceed maxDelayInMillis
    ✔ should retry without delays when backOffFactor is not set
    ✔ should wait when retry-after expressed as seconds
    ✔ should wait when retry-after expressed as a timestamp
    ✔ should not wait when retry-after timestamp is expired
    ✔ should not wait when retry-after is malformed
    ✔ should reject if the request payload is invalid
    ✔ should use the port 80 for http URLs
    ✔ should use the port specified in the URL

  AuthorizedHttpClient
    ✔ should be fulfilled for a 2xx response with a json payload
    ✔ should make a POST request with the provided headers and data
    ✔ should not mutate the arguments
    HTTP Agent
      ✔ should use the HTTP agent set in request
      ✔ should use the HTTP agent set in AppOptions

  ApiSettings
    Constructor
      ✔ should succeed with a specified endpoint and a default http method
      ✔ should succeed with a specified endpoint and http method
      ✔ should populate default http method when not specified
    Getters and Setters
      with unset properties
        ✔ should resolve successfully for endpoint and http method
        ✔ should not return null for unset requestValidator
        ✔ should not return null for unset responseValidator
      with null validators
        ✔ should not return null for requestValidator
        ✔ should not return null for responseValidator
      with set properties
        ✔ should return the correct requestValidator
        ✔ should return the correct responseValidator

  parseHttpResponse()
    ✔ should parse a successful response with json content
    ✔ should parse an error response with json content
    ✔ should parse a response with text content
    ✔ should parse given a buffer
    ✔ should remove any trailing white space in the payload
    ✔ should throw when the header is malformed

  defaultRetryConfig()
    ✔ should return a RetryConfig with default settings
    ✔ should return a new instance on each invocation

  decodeJwt
    ✔ should reject given no token
    ✔ should reject given a non-string token: null
    ✔ should reject given a non-string token: null
    ✔ should reject given a non-string token: 0
    ✔ should reject given a non-string token: 1
    ✔ should reject given a non-string token: true
    ✔ should reject given a non-string token: false
    ✔ should reject given a non-string token: []
    ✔ should reject given a non-string token: {}
    ✔ should reject given a non-string token: {"a":1}
    ✔ should reject given a non-string token: undefined
    ✔ should reject given an empty string token
    ✔ should reject given an invalid token
    ✔ should be fulfilled with decoded claims given a valid signed token
    ✔ should be fulfilled with decoded claims given a valid unsigned token

  verifyJwtSignature
    ✔ should throw given no token
    ✔ should reject given a non-string token: null
    ✔ should reject given a non-string token: null
    ✔ should reject given a non-string token: 0
    ✔ should reject given a non-string token: 1
    ✔ should reject given a non-string token: true
    ✔ should reject given a non-string token: false
    ✔ should reject given a non-string token: []
    ✔ should reject given a non-string token: {}
    ✔ should reject given a non-string token: {"a":1}
    ✔ should reject given a non-string token: undefined
    ✔ should reject given an empty string token
    ✔ should be fulfilled given a valid signed token and public key
    ✔ should be fulfilled given a valid unsigned (emulator) token and no public key
    ✔ should be fulfilled given a valid signed token and a function to provide public keys
    ✔ should be rejected when the given algorithm does not match the token
    ✔ should be rejected given an expired token
    ✔ should be rejected with correct public key fetch error.
    ✔ should be rejected with correct no matching key id found error.
    ✔ should be rejected given a public key that does not match the token.
    ✔ should be rejected given an invalid JWT.

  PublicKeySignatureVerifier
    Constructor
      ✔ should not throw when valid key fetcher is provided
      ✔ should throw given an invalid key fetcher: null
      ✔ should throw given an invalid key fetcher: null
      ✔ should throw given an invalid key fetcher: 0
      ✔ should throw given an invalid key fetcher: 1
      ✔ should throw given an invalid key fetcher: true
      ✔ should throw given an invalid key fetcher: false
      ✔ should throw given an invalid key fetcher: []
      ✔ should throw given an invalid key fetcher: ["a"]
      ✔ should throw given an invalid key fetcher: undefined
      ✔ should throw given an invalid key fetcher: ""
      ✔ should throw given an invalid key fetcher: "a"
    withCertificateUrl
      ✔ should return a PublicKeySignatureVerifier instance with a UrlKeyFetcher when a valid cert url is provided
    withJwksUrl
      ✔ should return a PublicKeySignatureVerifier instance with a JwksFetcher when a valid jwks url is provided
    verify
      ✔ should throw given no token
      ✔ should reject given a non-string token: null
      ✔ should reject given a non-string token: null
      ✔ should reject given a non-string token: 0
      ✔ should reject given a non-string token: 1
      ✔ should reject given a non-string token: true
      ✔ should reject given a non-string token: false
      ✔ should reject given a non-string token: []
      ✔ should reject given a non-string token: {}
      ✔ should reject given a non-string token: {"a":1}
      ✔ should reject given a non-string token: undefined
      ✔ should reject given an empty string token
      ✔ should be fulfilled given a valid token
      ✔ should be fulfilled given a valid token without a kid (should check against all the keys)
      ✔ should be rejected given an expired token without a kid (should check against all the keys)
      ✔ should be rejected given a token with an incorrect algorithm
      ✔ should reject when no matching kid found
      ✔ should reject when an error occurs while fetching the keys

  EmulatorSignatureVerifier
    verify
      ✔ should be fulfilled given a valid unsigned (emulator) token
      ✔ should be rejected given a valid signed (non-emulator) token

  UrlKeyFetcher
    Constructor
      ✔ should not throw when valid key parameters are provided
      ✔ should throw given a non-URL public cert: null
      ✔ should throw given a non-URL public cert: null
      ✔ should throw given a non-URL public cert: 0
      ✔ should throw given a non-URL public cert: 1
      ✔ should throw given a non-URL public cert: true
      ✔ should throw given a non-URL public cert: false
      ✔ should throw given a non-URL public cert: []
      ✔ should throw given a non-URL public cert: {}
      ✔ should throw given a non-URL public cert: {"a":1}
      ✔ should throw given a non-URL public cert: undefined
      ✔ should throw given a non-URL public cert: "file://invalid"
    fetchPublicKeys
      ✔ should use the given HTTP Agent
      ✔ should not fetch the public keys until the first time fetchPublicKeys() is called
      ✔ should not re-fetch the public keys every time fetchPublicKeys() is called
      ✔ should refresh the public keys after the "max-age" on the request expires
      ✔ should be rejected if fetching the public keys fails
      ✔ should be rejected if fetching the public keys returns a response with an error message

  JwksFetcher
    Constructor
      ✔ should not throw when valid url is provided
      ✔ should throw given a non-URL jwks endpoint: null
      ✔ should throw given a non-URL jwks endpoint: null
      ✔ should throw given a non-URL jwks endpoint: 0
      ✔ should throw given a non-URL jwks endpoint: 1
      ✔ should throw given a non-URL jwks endpoint: true
      ✔ should throw given a non-URL jwks endpoint: false
      ✔ should throw given a non-URL jwks endpoint: []
      ✔ should throw given a non-URL jwks endpoint: {}
      ✔ should throw given a non-URL jwks endpoint: {"a":1}
      ✔ should throw given a non-URL jwks endpoint: undefined
      ✔ should throw given a non-URL jwks endpoint: "file://invalid"
    fetchPublicKeys
      ✔ should not fetch the public keys until the first time fetchPublicKeys() is called
      ✔ should not re-fetch the public keys every time fetchPublicKeys() is called
      ✔ should refresh the public keys after the previous set of keys expire
      ✔ should be rejected if fetching the public keys fails
      ✔ should be rejected if fetching the public keys returns a response with an error message

  CryptoSigner
    ServiceAccountSigner
      ✔ should throw given no arguments
      ✔ should not throw given a valid certificate
      ✔ should sign using the private_key in the certificate
      ✔ should return the client_email from the certificate
    IAMSigner
      ✔ should throw given no arguments
      explicit service account ID
        ✔ should sign using the IAM service
        ✔ should fail if the IAM service responds with an error
        ✔ should return the explicitly specified service account
      auto discovered service account
        ✔ should sign using the IAM service
        ✔ should fail if the IAM service responds with an error
        ✔ should return the discovered service account
        ✔ should return the expected error when failed to contact the Metadata server

  Auth
    ✔ verifyIdToken() should reject when project ID is not specified
    ✔ verifySessionCookie() should reject when project ID is not specified
    ✔ _verifyAuthBlockingToken() should reject when project ID is not specified
    Constructor
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given no app
      ✔ should reject given no project ID
      ✔ should not throw given a valid app
    app
      ✔ returns the app from the constructor
      ✔ is read-only
    tenantManager()
      ✔ should return a TenantManager with the expected attributes
      ✔ should return the same cached instance
    createCustomToken()
      ✔ should return a jwt
      ✔ should not contain tenant_id
      ✔ should be eventually rejected if a cert credential is not specified
      ✔ should be fulfilled given an app which returns null access tokens
      ✔ should be fulfilled given an app which returns invalid access tokens
      ✔ should be fulfilled given an app which fails to generate access tokens
    verifyIdToken()
      ✔ should forward on the call to the token generator's verifyIdToken() method
      ✔ should reject when underlying idTokenVerifier.verifyJWT() rejects with expected error
      ✔ should be rejected with checkRevoked set to true and corresponding user disabled
      ✔ verifyIdToken() should reject user disabled before ID tokens revoked
      ✔ should work with a non-cert credential when the GOOGLE_CLOUD_PROJECT environment variable is present
      ✔ should work with a non-cert credential when the GCLOUD_PROJECT environment variable is present
      ✔ should be fulfilled given an app which returns null access tokens
      ✔ should be fulfilled given an app which returns invalid access tokens
      ✔ should be fulfilled given an app which fails to generate access tokens
      ✔ should be fulfilled with checkRevoked set to true using an unrevoked ID token
      ✔ should be rejected with checkRevoked set to true using a revoked ID token
      ✔ should be fulfilled with checkRevoked set to false using a revoked ID token
      ✔ should be rejected with checkRevoked set to true if underlying RPC fails
      ✔ should be fulfilled with checkRevoked set to true when no validSince available
      ✔ should be rejected with checkRevoked set to true using an invalid ID token
    verifySessionCookie()
      ✔ should forward on the call to the token verifier's verifySessionCookie() method
      ✔ should reject when underlying sessionCookieVerifier.verifyJWT() rejects with expected error
      ✔ should work with a non-cert credential when the GOOGLE_CLOUD_PROJECT environment variable is present
      ✔ should work with a non-cert credential when the GCLOUD_PROJECT environment variable is present
      ✔ should be fulfilled given an app which returns null access tokens
      ✔ should be fulfilled given an app which returns invalid access tokens
      ✔ should be fulfilled given an app which fails to generate access tokens
      ✔ should be fulfilled with checkRevoked set to true using an unrevoked session cookie
      ✔ should be rejected with checkRevoked set to true using a revoked session cookie
      ✔ should be fulfilled with checkRevoked set to false using a revoked session cookie
      ✔ should be rejected with checkRevoked set to true if underlying RPC fails
      ✔ should be rejected with checkRevoked set to true and corresponding user disabled
      ✔ verifySessionCookie() should reject user disabled before ID tokens revoked
      ✔ should be fulfilled with checkRevoked set to true when no validSince available
      ✔ should be rejected with checkRevoked set to true using an invalid session cookie
    _verifyAuthBlockingToken()
      ✔ should forward on the call to the token generator's _verifyAuthBlockingToken() method
      ✔ should reject when underlying idTokenVerifier._verifyAuthBlockingToken() rejects
      ✔ should work with a non-cert credential when the GOOGLE_CLOUD_PROJECT environment variable is present
      ✔ should work with a non-cert credential when the GCLOUD_PROJECT environment variable is present
      ✔ should be fulfilled given an app which returns null access tokens
      ✔ should be fulfilled given an app which returns invalid access tokens
      ✔ should be fulfilled given an app which fails to generate access tokens
    getUser()
      ✔ should be rejected given no uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on success
      ✔ should throw an error when the backend returns an error
    getUserByEmail()
      ✔ should be rejected given no email
      ✔ should be rejected given an invalid email
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on success
      ✔ should throw an error when the backend returns an error
    getUserByPhoneNumber()
      ✔ should be rejected given no phone number
      ✔ should be rejected given an invalid phone number
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on success
      ✔ should throw an error when the backend returns an error
    getUserByProviderUid()
      ✔ should be rejected given no provider id
      ✔ should be rejected given an invalid provider id
      ✔ should be rejected given an invalid provider uid
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on success
      ✔ should throw an error when the backend returns an error
      non-federated providers
        ✔ phone lookups should use phoneNumber field
        ✔ email lookups should use email field
    getUsers()
      ✔ should throw when given a non array parameter
      ✔ should return no results when given no identifiers
      ✔ should return no users when given identifiers that do not exist
      ✔ returns users by various identifier types in a single call
    deleteUser()
      ✔ should be rejected given no uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with void on success
      ✔ should throw an error when the backend returns an error
    deleteUsers()
      ✔ should succeed given an empty list
      ✔ should index errors correctly in result
      ✔ should resolve with void on success
    createUser()
      ✔ should be rejected given no properties
      ✔ should be rejected given invalid properties
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on createNewAccount request success
      ✔ should throw an error when createNewAccount returns an error
      ✔ should throw an error when getUser returns a User not found error
      ✔ should echo getUser error if an error occurs while retrieving the user record
    updateUser()
      ✔ should be rejected given no uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected given no properties
      ✔ should be rejected given invalid properties
      ✔ should be rejected given an UpdateRequest with an invalid providerToLink parameter
      ✔ should be rejected given an UpdateRequest with an invalid providerToLink parameter
      ✔ should be rejected given an UpdateRequest with an invalid providerToLink parameter
      ✔ should be rejected given an UpdateRequest with an invalid providerToLink parameter
      ✔ should rename providerToLink property to linkProviderUserInfo
      ✔ should be rejected given a deleteProvider list with an invalid provider ID undefined
      ✔ should be rejected given a deleteProvider list with an invalid provider ID null
      ✔ should be rejected given a deleteProvider list with an invalid provider ID null
      ✔ should be rejected given a deleteProvider list with an invalid provider ID 0
      ✔ should be rejected given a deleteProvider list with an invalid provider ID 1
      ✔ should be rejected given a deleteProvider list with an invalid provider ID true
      ✔ should be rejected given a deleteProvider list with an invalid provider ID false
      ✔ should be rejected given a deleteProvider list with an invalid provider ID ""
      ✔ should be rejected given a deleteProvider list with an invalid provider ID []
      ✔ should be rejected given a deleteProvider list with an invalid provider ID [1,"a"]
      ✔ should be rejected given a deleteProvider list with an invalid provider ID {}
      ✔ should be rejected given a deleteProvider list with an invalid provider ID {"a":1}
      ✔ should be rejected given a deleteProvider list with an invalid provider ID undefined
      ✔ should merge deletion of phone provider with the providersToUnlink list
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on updateExistingAccount request success
      ✔ should throw an error when updateExistingAccount returns an error
      ✔ should echo getUser error if an error occurs while retrieving the user record
      non-federated providers
        ✔ specifying both email and providerId=email should be rejected
        ✔ specifying both phoneNumber and providerId=phone should be rejected
        ✔ email linking should use email field
        ✔ phone linking should use phoneNumber field
        ✔ specifying both phoneNumber=null and providersToUnlink=phone should be rejected
        ✔ doesnt mutate the properties parameter
      non-federated providers
        ✔ specifying both email and providerId=email should be rejected
        ✔ specifying both phoneNumber and providerId=phone should be rejected
        ✔ email linking should use email field
        ✔ phone linking should use phoneNumber field
        ✔ specifying both phoneNumber=null and providersToUnlink=phone should be rejected
        ✔ doesnt mutate the properties parameter
    setCustomUserClaims()
      ✔ should be rejected given no uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected given no custom user claims
      ✔ should be rejected given invalid custom user claims
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve on setCustomUserClaims request success
      ✔ should throw an error when setCustomUserClaims returns an error
    listUsers()
      ✔ should be rejected given an invalid page token
      ✔ should be rejected given an invalid max result
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve on downloadAccount request success with users in response
      ✔ should resolve on downloadAccount request success with default options
      ✔ should resolve on downloadAccount request success with no users in response
      ✔ should throw an error when downloadAccount returns an error
    revokeRefreshTokens()
      ✔ should be rejected given no uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve on underlying revokeRefreshTokens request success
      ✔ should throw when underlying revokeRefreshTokens request returns an error
    importUsers()
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve on underlying uploadAccount request resolution
      ✔ should reject when underlying uploadAccount request rejects with an error
      ✔ should throw and fail quickly when underlying uploadAccount throws
    createSessionCookie()
      ✔ should be rejected given no ID token
      ✔ should be rejected given an invalid ID token
      ✔ should be rejected given no session duration
      ✔ should be rejected given an invalid session duration
      ✔ should be rejected given out of range session duration
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve on underlying createSessionCookie request success
      ✔ should throw when underlying createSessionCookie request returns an error
    generatePasswordResetLink()
      ✔ should be rejected given no email
      ✔ should be rejected given an invalid email
      ✔ should be rejected given no new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid ActionCodeSettings object
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve when called with actionCodeSettings with a generated link on success
      ✔ should resolve when called without actionCodeSettings with a generated link on success
      ✔ should throw an error when getEmailAction returns an error
    generateEmailVerificationLink()
      ✔ should be rejected given no email
      ✔ should be rejected given an invalid email
      ✔ should be rejected given no new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid ActionCodeSettings object
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve when called with actionCodeSettings with a generated link on success
      ✔ should resolve when called without actionCodeSettings with a generated link on success
      ✔ should throw an error when getEmailAction returns an error
    generateSignInWithEmailLink()
      ✔ should be rejected given no email
      ✔ should be rejected given an invalid email
      ✔ should be rejected given no new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid ActionCodeSettings object
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve when called with actionCodeSettings with a generated link on success
      ✔ should reject when called without actionCodeSettings
      ✔ should throw an error when getEmailAction returns an error
    generateVerifyAndChangeEmailLink()
      ✔ should be rejected given no email
      ✔ should be rejected given an invalid email
      ✔ should be rejected given no new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid ActionCodeSettings object
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve when called with actionCodeSettings with a generated link on success
      ✔ should resolve when called without actionCodeSettings with a generated link on success
      ✔ should throw an error when getEmailAction returns an error
    getProviderConfig()
      ✔ should be rejected given no provider ID
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "0"
      ✔ should be rejected given an invalid provider ID "1"
      ✔ should be rejected given an invalid provider ID "true"
      ✔ should be rejected given an invalid provider ID "false"
      ✔ should be rejected given an invalid provider ID """"
      ✔ should be rejected given an invalid provider ID "[]"
      ✔ should be rejected given an invalid provider ID "[1,"a"]"
      ✔ should be rejected given an invalid provider ID "{}"
      ✔ should be rejected given an invalid provider ID "{"a":1}"
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      using OIDC configurations
        ✔ should resolve with an OIDCConfig on success
        ✔ should throw an error when the backend returns an error
      using SAML configurations
        ✔ should resolve with a SAMLConfig on success
        ✔ should throw an error when the backend returns an error
    listProviderConfigs()
      ✔ should be rejected given no options
      ✔ should be rejected given an invalid AuthProviderConfigFilter type
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      using OIDC type filter
        ✔ should resolve on success with configs in response
        ✔ should resolve on success with default options
        ✔ should resolve on success with no configs in response
        ✔ should throw an error when listOAuthIdpConfigs returns an error
      using SAML type filter
        ✔ should resolve on success with configs in response
        ✔ should resolve on success with default options
        ✔ should resolve on success with no configs in response
        ✔ should throw an error when listInboundSamlConfigs returns an error
    deleteProviderConfig()
      ✔ should be rejected given no provider ID
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "0"
      ✔ should be rejected given an invalid provider ID "1"
      ✔ should be rejected given an invalid provider ID "true"
      ✔ should be rejected given an invalid provider ID "false"
      ✔ should be rejected given an invalid provider ID """"
      ✔ should be rejected given an invalid provider ID "[]"
      ✔ should be rejected given an invalid provider ID "[1,"a"]"
      ✔ should be rejected given an invalid provider ID "{}"
      ✔ should be rejected given an invalid provider ID "{"a":1}"
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      using OIDC configurations
        ✔ should resolve with void on success
        ✔ should throw an error when the backend returns an error
      using SAML configurations
        ✔ should resolve with void on success
        ✔ should throw an error when the backend returns an error
    updateProviderConfig()
      ✔ should be rejected given no provider ID
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "0"
      ✔ should be rejected given an invalid provider ID "1"
      ✔ should be rejected given an invalid provider ID "true"
      ✔ should be rejected given an invalid provider ID "false"
      ✔ should be rejected given an invalid provider ID """"
      ✔ should be rejected given an invalid provider ID "[]"
      ✔ should be rejected given an invalid provider ID "[1,"a"]"
      ✔ should be rejected given an invalid provider ID "{}"
      ✔ should be rejected given an invalid provider ID "{"a":1}"
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given no options
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      using OIDC configurations
        ✔ should resolve with an OIDCConfig on updateOAuthIdpConfig request success
        ✔ should throw an error when updateOAuthIdpConfig returns an error
      using SAML configurations
        ✔ should resolve with a SAMLConfig on updateInboundSamlConfig request success
        ✔ should throw an error when updateInboundSamlConfig returns an error
    createProviderConfig()
      ✔ should be rejected given no configuration options
      ✔ should be rejected given an invalid provider ID
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      using OIDC configurations
        ✔ should resolve with an OIDCConfig on createOAuthIdpConfig request success
        ✔ should throw an error when createOAuthIdpConfig returns an error
      using SAML configurations
        ✔ should resolve with a SAMLConfig on createInboundSamlConfig request success
        ✔ should throw an error when createInboundSamlConfig returns an error
    auth emulator support
      ✔ createCustomToken() generates an unsigned token
      ✔ verifyIdToken() should reject revoked ID tokens
      ✔ verifySessionCookie() should reject revoked session cookies
      ✔ verifyIdToken() rejects an unsigned token if auth emulator is unreachable

  TenantAwareAuth
    ✔ verifyIdToken() should reject when project ID is not specified
    ✔ verifySessionCookie() should reject when project ID is not specified
    ✔ _verifyAuthBlockingToken() should reject when project ID is not specified
    createCustomToken()
      ✔ should return a jwt
      ✔ should contain tenant_id
      ✔ should be eventually rejected if a cert credential is not specified
      ✔ should be fulfilled given an app which returns null access tokens
      ✔ should be fulfilled given an app which returns invalid access tokens
      ✔ should be fulfilled given an app which fails to generate access tokens
    verifyIdToken()
      ✔ should forward on the call to the token generator's verifyIdToken() method
      ✔ should reject when underlying idTokenVerifier.verifyJWT() rejects with expected error
      ✔ should be rejected with checkRevoked set to true and corresponding user disabled
      ✔ verifyIdToken() should reject user disabled before ID tokens revoked
      ✔ should work with a non-cert credential when the GOOGLE_CLOUD_PROJECT environment variable is present
      ✔ should work with a non-cert credential when the GCLOUD_PROJECT environment variable is present
      ✔ should be fulfilled given an app which returns null access tokens
      ✔ should be fulfilled given an app which returns invalid access tokens
      ✔ should be fulfilled given an app which fails to generate access tokens
      ✔ should be fulfilled with checkRevoked set to true using an unrevoked ID token
      ✔ should be rejected with checkRevoked set to true using a revoked ID token
      ✔ should be fulfilled with checkRevoked set to false using a revoked ID token
      ✔ should be rejected with checkRevoked set to true if underlying RPC fails
      ✔ should be fulfilled with checkRevoked set to true when no validSince available
      ✔ should be rejected with checkRevoked set to true using an invalid ID token
      ✔ should be rejected with ID token missing tenant ID
      ✔ should be rejected with ID token containing mismatching tenant ID
    verifySessionCookie()
      ✔ should forward on the call to the token verifier's verifySessionCookie() method
      ✔ should reject when underlying sessionCookieVerifier.verifyJWT() rejects with expected error
      ✔ should work with a non-cert credential when the GOOGLE_CLOUD_PROJECT environment variable is present
      ✔ should work with a non-cert credential when the GCLOUD_PROJECT environment variable is present
      ✔ should be fulfilled given an app which returns null access tokens
      ✔ should be fulfilled given an app which returns invalid access tokens
      ✔ should be fulfilled given an app which fails to generate access tokens
      ✔ should be fulfilled with checkRevoked set to true using an unrevoked session cookie
      ✔ should be rejected with checkRevoked set to true using a revoked session cookie
      ✔ should be fulfilled with checkRevoked set to false using a revoked session cookie
      ✔ should be rejected with checkRevoked set to true if underlying RPC fails
      ✔ should be rejected with checkRevoked set to true and corresponding user disabled
      ✔ verifySessionCookie() should reject user disabled before ID tokens revoked
      ✔ should be fulfilled with checkRevoked set to true when no validSince available
      ✔ should be rejected with checkRevoked set to true using an invalid session cookie
      ✔ should be rejected with session cookie missing tenant ID
      ✔ should be rejected with ID token containing mismatching tenant ID
    _verifyAuthBlockingToken()
      ✔ should forward on the call to the token generator's _verifyAuthBlockingToken() method
      ✔ should reject when underlying idTokenVerifier._verifyAuthBlockingToken() rejects
      ✔ should work with a non-cert credential when the GOOGLE_CLOUD_PROJECT environment variable is present
      ✔ should work with a non-cert credential when the GCLOUD_PROJECT environment variable is present
      ✔ should be fulfilled given an app which returns null access tokens
      ✔ should be fulfilled given an app which returns invalid access tokens
      ✔ should be fulfilled given an app which fails to generate access tokens
    getUser()
      ✔ should be rejected given no uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on success
      ✔ should throw an error when the backend returns an error
    getUserByEmail()
      ✔ should be rejected given no email
      ✔ should be rejected given an invalid email
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on success
      ✔ should throw an error when the backend returns an error
    getUserByPhoneNumber()
      ✔ should be rejected given no phone number
      ✔ should be rejected given an invalid phone number
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on success
      ✔ should throw an error when the backend returns an error
    getUserByProviderUid()
      ✔ should be rejected given no provider id
      ✔ should be rejected given an invalid provider id
      ✔ should be rejected given an invalid provider uid
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on success
      ✔ should throw an error when the backend returns an error
      non-federated providers
        ✔ phone lookups should use phoneNumber field
        ✔ email lookups should use email field
    getUsers()
      ✔ should throw when given a non array parameter
      ✔ should return no results when given no identifiers
      ✔ should return no users when given identifiers that do not exist
      ✔ returns users by various identifier types in a single call
    deleteUser()
      ✔ should be rejected given no uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with void on success
      ✔ should throw an error when the backend returns an error
    deleteUsers()
      ✔ should succeed given an empty list
      ✔ should index errors correctly in result
      ✔ should resolve with void on success
    createUser()
      ✔ should be rejected given no properties
      ✔ should be rejected given invalid properties
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on createNewAccount request success
      ✔ should throw an error when createNewAccount returns an error
      ✔ should throw an error when getUser returns a User not found error
      ✔ should echo getUser error if an error occurs while retrieving the user record
    updateUser()
      ✔ should be rejected given no uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected given no properties
      ✔ should be rejected given invalid properties
      ✔ should be rejected given an UpdateRequest with an invalid providerToLink parameter
      ✔ should be rejected given an UpdateRequest with an invalid providerToLink parameter
      ✔ should be rejected given an UpdateRequest with an invalid providerToLink parameter
      ✔ should be rejected given an UpdateRequest with an invalid providerToLink parameter
      ✔ should rename providerToLink property to linkProviderUserInfo
      ✔ should be rejected given a deleteProvider list with an invalid provider ID undefined
      ✔ should be rejected given a deleteProvider list with an invalid provider ID null
      ✔ should be rejected given a deleteProvider list with an invalid provider ID null
      ✔ should be rejected given a deleteProvider list with an invalid provider ID 0
      ✔ should be rejected given a deleteProvider list with an invalid provider ID 1
      ✔ should be rejected given a deleteProvider list with an invalid provider ID true
      ✔ should be rejected given a deleteProvider list with an invalid provider ID false
      ✔ should be rejected given a deleteProvider list with an invalid provider ID ""
      ✔ should be rejected given a deleteProvider list with an invalid provider ID []
      ✔ should be rejected given a deleteProvider list with an invalid provider ID [1,"a"]
      ✔ should be rejected given a deleteProvider list with an invalid provider ID {}
      ✔ should be rejected given a deleteProvider list with an invalid provider ID {"a":1}
      ✔ should be rejected given a deleteProvider list with an invalid provider ID undefined
      ✔ should merge deletion of phone provider with the providersToUnlink list
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a UserRecord on updateExistingAccount request success
      ✔ should throw an error when updateExistingAccount returns an error
      ✔ should echo getUser error if an error occurs while retrieving the user record
      non-federated providers
        ✔ specifying both email and providerId=email should be rejected
        ✔ specifying both phoneNumber and providerId=phone should be rejected
        ✔ email linking should use email field
        ✔ phone linking should use phoneNumber field
        ✔ specifying both phoneNumber=null and providersToUnlink=phone should be rejected
        ✔ doesnt mutate the properties parameter
      non-federated providers
        ✔ specifying both email and providerId=email should be rejected
        ✔ specifying both phoneNumber and providerId=phone should be rejected
        ✔ email linking should use email field
        ✔ phone linking should use phoneNumber field
        ✔ specifying both phoneNumber=null and providersToUnlink=phone should be rejected
        ✔ doesnt mutate the properties parameter
    setCustomUserClaims()
      ✔ should be rejected given no uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected given no custom user claims
      ✔ should be rejected given invalid custom user claims
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve on setCustomUserClaims request success
      ✔ should throw an error when setCustomUserClaims returns an error
    listUsers()
      ✔ should be rejected given an invalid page token
      ✔ should be rejected given an invalid max result
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve on downloadAccount request success with users in response
      ✔ should resolve on downloadAccount request success with default options
      ✔ should resolve on downloadAccount request success with no users in response
      ✔ should throw an error when downloadAccount returns an error
    revokeRefreshTokens()
      ✔ should be rejected given no uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve on underlying revokeRefreshTokens request success
      ✔ should throw when underlying revokeRefreshTokens request returns an error
    importUsers()
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve on underlying uploadAccount request resolution
      ✔ should reject when underlying uploadAccount request rejects with an error
      ✔ should throw and fail quickly when underlying uploadAccount throws
      ✔ should throw and fail quickly when users provided have mismatching tenant IDs
      ✔ should resolve when users provided have matching tenant IDs
    createSessionCookie()
      ✔ should be rejected given no ID token
      ✔ should be rejected given an invalid ID token
      ✔ should be rejected given no session duration
      ✔ should be rejected given an invalid session duration
      ✔ should be rejected given out of range session duration
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve on underlying createSessionCookie request success
      ✔ should throw when underlying createSessionCookie request returns an error
      ✔ should be rejected when ID token provided is invalid
    generatePasswordResetLink()
      ✔ should be rejected given no email
      ✔ should be rejected given an invalid email
      ✔ should be rejected given no new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid ActionCodeSettings object
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve when called with actionCodeSettings with a generated link on success
      ✔ should resolve when called without actionCodeSettings with a generated link on success
      ✔ should throw an error when getEmailAction returns an error
    generateEmailVerificationLink()
      ✔ should be rejected given no email
      ✔ should be rejected given an invalid email
      ✔ should be rejected given no new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid ActionCodeSettings object
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve when called with actionCodeSettings with a generated link on success
      ✔ should resolve when called without actionCodeSettings with a generated link on success
      ✔ should throw an error when getEmailAction returns an error
    generateSignInWithEmailLink()
      ✔ should be rejected given no email
      ✔ should be rejected given an invalid email
      ✔ should be rejected given no new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid ActionCodeSettings object
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve when called with actionCodeSettings with a generated link on success
      ✔ should reject when called without actionCodeSettings
      ✔ should throw an error when getEmailAction returns an error
    generateVerifyAndChangeEmailLink()
      ✔ should be rejected given no email
      ✔ should be rejected given an invalid email
      ✔ should be rejected given no new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid new email when request type is `generateVerifyAndChangeEmailLink`
      ✔ should be rejected given an invalid ActionCodeSettings object
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve when called with actionCodeSettings with a generated link on success
      ✔ should resolve when called without actionCodeSettings with a generated link on success
      ✔ should throw an error when getEmailAction returns an error
    getProviderConfig()
      ✔ should be rejected given no provider ID
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "0"
      ✔ should be rejected given an invalid provider ID "1"
      ✔ should be rejected given an invalid provider ID "true"
      ✔ should be rejected given an invalid provider ID "false"
      ✔ should be rejected given an invalid provider ID """"
      ✔ should be rejected given an invalid provider ID "[]"
      ✔ should be rejected given an invalid provider ID "[1,"a"]"
      ✔ should be rejected given an invalid provider ID "{}"
      ✔ should be rejected given an invalid provider ID "{"a":1}"
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      using OIDC configurations
        ✔ should resolve with an OIDCConfig on success
        ✔ should throw an error when the backend returns an error
      using SAML configurations
        ✔ should resolve with a SAMLConfig on success
        ✔ should throw an error when the backend returns an error
    listProviderConfigs()
      ✔ should be rejected given no options
      ✔ should be rejected given an invalid AuthProviderConfigFilter type
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      using OIDC type filter
        ✔ should resolve on success with configs in response
        ✔ should resolve on success with default options
        ✔ should resolve on success with no configs in response
        ✔ should throw an error when listOAuthIdpConfigs returns an error
      using SAML type filter
        ✔ should resolve on success with configs in response
        ✔ should resolve on success with default options
        ✔ should resolve on success with no configs in response
        ✔ should throw an error when listInboundSamlConfigs returns an error
    deleteProviderConfig()
      ✔ should be rejected given no provider ID
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "0"
      ✔ should be rejected given an invalid provider ID "1"
      ✔ should be rejected given an invalid provider ID "true"
      ✔ should be rejected given an invalid provider ID "false"
      ✔ should be rejected given an invalid provider ID """"
      ✔ should be rejected given an invalid provider ID "[]"
      ✔ should be rejected given an invalid provider ID "[1,"a"]"
      ✔ should be rejected given an invalid provider ID "{}"
      ✔ should be rejected given an invalid provider ID "{"a":1}"
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      using OIDC configurations
        ✔ should resolve with void on success
        ✔ should throw an error when the backend returns an error
      using SAML configurations
        ✔ should resolve with void on success
        ✔ should throw an error when the backend returns an error
    updateProviderConfig()
      ✔ should be rejected given no provider ID
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "null"
      ✔ should be rejected given an invalid provider ID "0"
      ✔ should be rejected given an invalid provider ID "1"
      ✔ should be rejected given an invalid provider ID "true"
      ✔ should be rejected given an invalid provider ID "false"
      ✔ should be rejected given an invalid provider ID """"
      ✔ should be rejected given an invalid provider ID "[]"
      ✔ should be rejected given an invalid provider ID "[1,"a"]"
      ✔ should be rejected given an invalid provider ID "{}"
      ✔ should be rejected given an invalid provider ID "{"a":1}"
      ✔ should be rejected given an invalid provider ID "undefined"
      ✔ should be rejected given no options
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      using OIDC configurations
        ✔ should resolve with an OIDCConfig on updateOAuthIdpConfig request success
        ✔ should throw an error when updateOAuthIdpConfig returns an error
      using SAML configurations
        ✔ should resolve with a SAMLConfig on updateInboundSamlConfig request success
        ✔ should throw an error when updateInboundSamlConfig returns an error
    createProviderConfig()
      ✔ should be rejected given no configuration options
      ✔ should be rejected given an invalid provider ID
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      using OIDC configurations
        ✔ should resolve with an OIDCConfig on createOAuthIdpConfig request success
        ✔ should throw an error when createOAuthIdpConfig returns an error
      using SAML configurations
        ✔ should resolve with a SAMLConfig on createInboundSamlConfig request success
        ✔ should throw an error when createInboundSamlConfig returns an error
    auth emulator support
      ✔ createCustomToken() generates an unsigned token
      ✔ verifyIdToken() should reject revoked ID tokens
      ✔ verifySessionCookie() should reject revoked session cookies
      ✔ verifyIdToken() rejects an unsigned token if auth emulator is unreachable

  Auth
    getAuth()
      ✔ should throw when default app is not available
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance

  PhoneMultiFactorInfo
    constructor
      ✔ should throw when an empty object is provided
      ✔ should throw when an undefined response is provided
      ✔ should succeed when mfaEnrollmentId and phoneInfo are both provided
      ✔ should throw when only mfaEnrollmentId is provided
      ✔ should throw when only phoneInfo is provided
    getters
      ✔ should set missing optional fields to null
      ✔ should return expected factorId
      ✔ should throw when modifying readonly factorId property
      ✔ should return expected displayName
      ✔ should throw when modifying readonly displayName property
      ✔ should return expected phoneNumber
      ✔ should throw when modifying readonly phoneNumber property
      ✔ should return expected uid
      ✔ should throw when modifying readonly uid property
      ✔ should return expected enrollmentTime
      ✔ should throw when modifying readonly uid property
    toJSON
      ✔ should return expected JSON object
      ✔ should return expected JSON object with missing fields set to null

  MultiFactorInfo
    initMultiFactorInfo
      ✔ should return expected PhoneMultiFactorInfo
      ✔ should return null for invalid MultiFactorInfo

  MultiFactorSettings
    constructor
      ✔ should throw when a non object is provided
      ✔ should populate an empty enrolledFactors array when given an empty object
      ✔ should populate expected enrolledFactors
    getter
      ✔ should throw when modifying readonly enrolledFactors property
      ✔ should throw when modifying readonly enrolledFactors internals
    toJSON
      ✔ should return expected JSON object when given an empty response
      ✔ should return expected JSON object when given a populated response

  UserInfo
    constructor
      ✔ should throw when an empty object is provided
      ✔ should succeed when rawId and providerId are both provided
      ✔ should throw when only rawId is provided
      ✔ should throw when only providerId is provided
    getters
      ✔ should return expected providerId
      ✔ should throw when modifying readonly providerId property
      ✔ should return expected displayName
      ✔ should throw when modifying readonly displayName property
      ✔ should return expected photoURL
      ✔ should throw when modifying readonly photoURL property
      ✔ should return expected email
      ✔ should throw when modifying readonly email property
      ✔ should return expected uid
      ✔ should throw when modifying readonly uid property
      ✔ should return expected phoneNumber
      ✔ should throw when modifying readonly phoneNumber property
    toJSON
      ✔ should return expected JSON object
      ✔ should return expected JSON object with phone number

  UserMetadata
    constructor
      ✔ should initialize as expected when a valid creationTime is provided
      ✔ should set creationTime and lastSignInTime to null when not provided
      ✔ should set creationTime to null when creationTime value is invalid
      ✔ should set lastSignInTime to null when lastLoginAt value is invalid
    getters
      ✔ should return expected lastSignInTime
      ✔ should throw when modifying readonly lastSignInTime property
      ✔ should return expected creationTime
      ✔ should throw when modifying readonly creationTime property
      ✔ should return expected lastRefreshTime
      ✔ should return null when lastRefreshTime is not available
    toJSON
      ✔ should return expected JSON object

  UserRecord
    constructor
      ✔ should throw when no localId is provided
      ✔ should succeed when only localId is provided
    getters
      ✔ should return expected uid
      ✔ show throw when modifying readonly uid property
      ✔ should return expected email
      ✔ should throw when modifying readonly email property
      ✔ should return expected emailVerified
      ✔ should throw when modifying readonly emailVerified property
      ✔ should return expected displayName
      ✔ should throw when modifying readonly displayName property
      ✔ should return expected photoURL
      ✔ should throw when modifying readonly photoURL property
      ✔ should return expected disabled
      ✔ should throw when modifying readonly disabled property
      ✔ should return expected phoneNumber
      ✔ should throw when modifying readonly phoneNumber property
      ✔ should return expected passwordHash
      ✔ should return expected undefined passwordHash
      ✔ should clear REDACTED passwordHash
      ✔ should return expected empty string passwordHash
      ✔ should throw when modifying readonly passwordHash property
      ✔ should return expected passwordSalt
      ✔ should return expected undefined passwordSalt
      ✔ should return expected empty string passwordSalt
      ✔ should throw when modifying readonly passwordSalt property
      ✔ should return expected customClaims
      ✔ should throw when modifying readonly customClaims property
      ✔ should return expected undefined customClaims
      ✔ should return expected tokensValidAfterTime
      ✔ should throw when modifying readonly tokensValidAfterTime property
      ✔ should return undefined tokensValidAfterTime when not available
      ✔ should return expected metadata
      ✔ should throw when modifying readonly metadata property
      ✔ should throw when modifying readonly metadata internals
      ✔ should return expected providerData
      ✔ should throw when modifying readonly providerData property
      ✔ should throw when modifying readonly providerData internals
      ✔ should return undefined tenantId when not available
      ✔ should return expected tenantId
      ✔ should throw when modifying readonly tenantId property
      ✔ should return expected multiFactor
      ✔ should return undefined multiFactor when not available
      ✔ should throw when modifying readonly multiFactor property
      ✔ should throw when modifying readonly multiFactor internals
    toJSON
      ✔ should return expected JSON object
      ✔ should return undefined tokensValidAfterTime when not available
      ✔ should return expected JSON object with tenant ID when available

  FirebaseTokenGenerator
    Constructor
      ✔ should throw given no arguments
      ✔ should throw given invalid signer: null
      ✔ should throw given invalid signer: null
      ✔ should throw given invalid signer: 0
      ✔ should throw given invalid signer: 1
      ✔ should throw given invalid signer: true
      ✔ should throw given invalid signer: false
      ✔ should throw given invalid signer: ""
      ✔ should throw given invalid signer: "a"
      ✔ should throw given invalid signer: []
      ✔ should throw given invalid signer: undefined
      ✔ should throw given a non-string tenantId
      ✔ should throw given a non-string tenantId
      ✔ should throw given a non-string tenantId
      ✔ should throw given a non-string tenantId
      ✔ should throw given a non-string tenantId
      ✔ should throw given a non-string tenantId
      ✔ should throw given a non-string tenantId
      ✔ should throw given a non-string tenantId
      ✔ should throw given a non-string tenantId
      ✔ should throw given a non-string tenantId
      ✔ should throw given an empty string tenantId
    Emulator
      ✔ should generate a valid unsigned token
    createCustomToken()
      ✔ should throw given no uid
      ✔ should throw given a non-string uid: null
      ✔ should throw given a non-string uid: null
      ✔ should throw given a non-string uid: 0
      ✔ should throw given a non-string uid: 1
      ✔ should throw given a non-string uid: true
      ✔ should throw given a non-string uid: false
      ✔ should throw given a non-string uid: []
      ✔ should throw given a non-string uid: {}
      ✔ should throw given a non-string uid: {"a":1}
      ✔ should throw given a non-string uid: undefined
      ✔ should throw given an empty string uid
      ✔ should throw given a uid with a length greater than 128 characters
      ✔ should throw given a non-object developer claims
      ✔ should throw given a developer claims object with a blacklisted claim: acr
      ✔ should throw given a developer claims object with a blacklisted claim: amr
      ✔ should throw given a developer claims object with a blacklisted claim: at_hash
      ✔ should throw given a developer claims object with a blacklisted claim: aud
      ✔ should throw given a developer claims object with a blacklisted claim: auth_time
      ✔ should throw given a developer claims object with a blacklisted claim: azp
      ✔ should throw given a developer claims object with a blacklisted claim: cnf
      ✔ should throw given a developer claims object with a blacklisted claim: c_hash
      ✔ should throw given a developer claims object with a blacklisted claim: exp
      ✔ should throw given a developer claims object with a blacklisted claim: iat
      ✔ should throw given a developer claims object with a blacklisted claim: iss
      ✔ should throw given a developer claims object with a blacklisted claim: jti
      ✔ should throw given a developer claims object with a blacklisted claim: nbf
      ✔ should throw given a developer claims object with a blacklisted claim: nonce
      ✔ should be fulfilled given a valid uid and no developer claims
      ✔ should be fulfilled given a valid uid and empty object developer claims
      ✔ should be fulfilled given a valid uid and valid developer claims
      ✔ should be fulfilled with a Firebase Custom JWT
      ✔ should be fulfilled with a JWT with the correct decoded payload
      ✔ should be fulfilled with a JWT with the developer claims in its decoded payload
      ✔ should be fulfilled with a JWT with the correct header
      ✔ should be fulfilled with a JWT which can be verified by the service account public key
      ✔ should be fulfilled with a JWT which cannot be verified by a random public key
      ✔ should be fulfilled with a JWT which expires after one hour
      ✔ should not mutate the passed in developer claims
    createCustomToken() (tenant-aware)
      ✔ should throw given no uid
      ✔ should throw given a non-string uid: null
      ✔ should throw given a non-string uid: null
      ✔ should throw given a non-string uid: 0
      ✔ should throw given a non-string uid: 1
      ✔ should throw given a non-string uid: true
      ✔ should throw given a non-string uid: false
      ✔ should throw given a non-string uid: []
      ✔ should throw given a non-string uid: {}
      ✔ should throw given a non-string uid: {"a":1}
      ✔ should throw given a non-string uid: undefined
      ✔ should throw given an empty string uid
      ✔ should throw given a uid with a length greater than 128 characters
      ✔ should throw given a non-object developer claims
      ✔ should throw given a developer claims object with a blacklisted claim: acr
      ✔ should throw given a developer claims object with a blacklisted claim: amr
      ✔ should throw given a developer claims object with a blacklisted claim: at_hash
      ✔ should throw given a developer claims object with a blacklisted claim: aud
      ✔ should throw given a developer claims object with a blacklisted claim: auth_time
      ✔ should throw given a developer claims object with a blacklisted claim: azp
      ✔ should throw given a developer claims object with a blacklisted claim: cnf
      ✔ should throw given a developer claims object with a blacklisted claim: c_hash
      ✔ should throw given a developer claims object with a blacklisted claim: exp
      ✔ should throw given a developer claims object with a blacklisted claim: iat
      ✔ should throw given a developer claims object with a blacklisted claim: iss
      ✔ should throw given a developer claims object with a blacklisted claim: jti
      ✔ should throw given a developer claims object with a blacklisted claim: nbf
      ✔ should throw given a developer claims object with a blacklisted claim: nonce
      ✔ should be fulfilled given a valid uid and no developer claims
      ✔ should be fulfilled given a valid uid and empty object developer claims
      ✔ should be fulfilled given a valid uid and valid developer claims
      ✔ should be fulfilled with a Firebase Custom JWT
      ✔ should be fulfilled with a JWT with the correct decoded payload
      ✔ should be fulfilled with a JWT with the developer claims in its decoded payload
      ✔ should be fulfilled with a JWT with the correct header
      ✔ should be fulfilled with a JWT which can be verified by the service account public key
      ✔ should be fulfilled with a JWT which cannot be verified by a random public key
      ✔ should be fulfilled with a JWT which expires after one hour
      ✔ should not mutate the passed in developer claims
    handleCryptoSignerError
      ✔ should convert CryptoSignerError to FirebaseAuthError
      ✔ should convert CryptoSignerError HttpError to FirebaseAuthError
      ✔ should convert CryptoSignerError HttpError with no errorcode to FirebaseAuthError

  FirebaseTokenVerifier
    Constructor
      ✔ should not throw when valid arguments are provided
      ✔ should throw given a non-URL public cert: null
      ✔ should throw given a non-URL public cert: null
      ✔ should throw given a non-URL public cert: 0
      ✔ should throw given a non-URL public cert: 1
      ✔ should throw given a non-URL public cert: true
      ✔ should throw given a non-URL public cert: false
      ✔ should throw given a non-URL public cert: []
      ✔ should throw given a non-URL public cert: {}
      ✔ should throw given a non-URL public cert: {"a":1}
      ✔ should throw given a non-URL public cert: undefined
      ✔ should throw given a non-URL public cert: "file://invalid"
      ✔ should throw given a non-URL issuer: null
      ✔ should throw given a non-URL issuer: null
      ✔ should throw given a non-URL issuer: 0
      ✔ should throw given a non-URL issuer: 1
      ✔ should throw given a non-URL issuer: true
      ✔ should throw given a non-URL issuer: false
      ✔ should throw given a non-URL issuer: []
      ✔ should throw given a non-URL issuer: {}
      ✔ should throw given a non-URL issuer: {"a":1}
      ✔ should throw given a non-URL issuer: undefined
      ✔ should throw given a non-URL issuer: "file://invalid"
      ✔ should throw given an invalid verify API name: null
      ✔ should throw given an invalid verify API name: null
      ✔ should throw given an invalid verify API name: 0
      ✔ should throw given an invalid verify API name: 1
      ✔ should throw given an invalid verify API name: true
      ✔ should throw given an invalid verify API name: false
      ✔ should throw given an invalid verify API name: []
      ✔ should throw given an invalid verify API name: {}
      ✔ should throw given an invalid verify API name: {"a":1}
      ✔ should throw given an invalid verify API name: undefined
      ✔ should throw given an invalid verify API name: ""
      ✔ should throw given an invalid JWT full name: null
      ✔ should throw given an invalid JWT full name: null
      ✔ should throw given an invalid JWT full name: 0
      ✔ should throw given an invalid JWT full name: 1
      ✔ should throw given an invalid JWT full name: true
      ✔ should throw given an invalid JWT full name: false
      ✔ should throw given an invalid JWT full name: []
      ✔ should throw given an invalid JWT full name: {}
      ✔ should throw given an invalid JWT full name: {"a":1}
      ✔ should throw given an invalid JWT full name: undefined
      ✔ should throw given an invalid JWT full name: ""
      ✔ should throw given an invalid JWT short name: null
      ✔ should throw given an invalid JWT short name: null
      ✔ should throw given an invalid JWT short name: 0
      ✔ should throw given an invalid JWT short name: 1
      ✔ should throw given an invalid JWT short name: true
      ✔ should throw given an invalid JWT short name: false
      ✔ should throw given an invalid JWT short name: []
      ✔ should throw given an invalid JWT short name: {}
      ✔ should throw given an invalid JWT short name: {"a":1}
      ✔ should throw given an invalid JWT short name: undefined
      ✔ should throw given an invalid JWT short name: ""
      ✔ should throw given an invalid expiration error code: null
      ✔ should throw given an invalid expiration error code: null
      ✔ should throw given an invalid expiration error code: 0
      ✔ should throw given an invalid expiration error code: 1
      ✔ should throw given an invalid expiration error code: true
      ✔ should throw given an invalid expiration error code: false
      ✔ should throw given an invalid expiration error code: []
      ✔ should throw given an invalid expiration error code: {}
      ✔ should throw given an invalid expiration error code: {"a":1}
      ✔ should throw given an invalid expiration error code: undefined
      ✔ should throw given an invalid expiration error code: ""
      ✔ should throw given an invalid expiration error code: "test"
    verifyJWT()
      ✔ should throw given no Firebase JWT token
      ✔ should throw given a non-string Firebase JWT token: null
      ✔ should throw given a non-string Firebase JWT token: null
      ✔ should throw given a non-string Firebase JWT token: 0
      ✔ should throw given a non-string Firebase JWT token: 1
      ✔ should throw given a non-string Firebase JWT token: true
      ✔ should throw given a non-string Firebase JWT token: false
      ✔ should throw given a non-string Firebase JWT token: []
      ✔ should throw given a non-string Firebase JWT token: {}
      ✔ should throw given a non-string Firebase JWT token: {"a":1}
      ✔ should throw given a non-string Firebase JWT token: undefined
      ✔ should throw given an empty string Firebase JWT token
      ✔ should be rejected given an invalid Firebase JWT token
      ✔ should throw if the token verifier was initialized with no "project_id"
      ✔ should be rejected given a Firebase JWT token with no kid
      ✔ should be rejected given a Firebase JWT token with an incorrect algorithm
      ✔ should be rejected given a Firebase JWT token with an incorrect audience
      ✔ should be rejected given a Firebase JWT token with an incorrect issuer
      ✔ should be rejected when the verifier throws no maching kid error
      ✔ should be rejected given a Firebase JWT token with a subject with greater than 128 characters
      ✔ should be rejected when the verifier throws for expired Firebase JWT token
      ✔ should be rejected when the verifier throws for expired Firebase session cookie
      ✔ should be rejected when the verifier throws invalid signature for a Firebase JWT token.
      ✔ should be rejected when the verifier throws key fetch error.
      ✔ should be rejected given a custom token with error using article "an" before JWT short name
      ✔ should be rejected given a custom token with error using article "a" before JWT short name
      ✔ should be rejected given a legacy custom token with error using article "an" before JWT short name
      ✔ should be rejected given a legacy custom token with error using article "a" before JWT short name
      ✔ AppOptions.httpAgent should be passed to the verifier
      ✔ should be fulfilled with decoded claims given a valid Firebase JWT token
      ✔ should decode an unsigned token if isEmulator=true
      ✔ should not decode an unsigned token when the algorithm is not overridden (emulator)
    _verifyAuthBlockingToken()
      ✔ should throw given no Auth Blocking JWT token
      ✔ should throw given a non-string Auth Blocking JWT token: null
      ✔ should throw given a non-string Auth Blocking JWT token: null
      ✔ should throw given a non-string Auth Blocking JWT token: 0
      ✔ should throw given a non-string Auth Blocking JWT token: 1
      ✔ should throw given a non-string Auth Blocking JWT token: true
      ✔ should throw given a non-string Auth Blocking JWT token: false
      ✔ should throw given a non-string Auth Blocking JWT token: []
      ✔ should throw given a non-string Auth Blocking JWT token: {}
      ✔ should throw given a non-string Auth Blocking JWT token: {"a":1}
      ✔ should throw given a non-string Auth Blocking JWT token: undefined
      ✔ should throw given an empty string Auth Blocking JWT token
      ✔ should be rejected given an invalid Auth Blocking JWT token
      ✔ should throw if the token verifier was initialized with no "project_id"
      ✔ should be rejected given a Auth Blocking JWT token with no kid
      ✔ should be rejected given a Auth Blocking JWT token with an incorrect algorithm
      ✔ should be rejected given an Auth Blocking JWT token that is not a cloud functions url
      ✔ should be rejected given a Auth Blocking JWT token with an incorrect audience
      ✔ should be rejected given a Auth Blocking JWT token with an incorrect issuer
      ✔ should be rejected when the verifier throws no maching kid error
      ✔ should be rejected given a Auth Blocking JWT token with a subject with greater than 128 characters
      ✔ should be rejected when the verifier throws for expired Auth Blocking JWT token
      ✔ should be rejected when the verifier throws invalid signature for a Auth Blocking JWT token.
      ✔ should be rejected when the verifier throws key fetch error.
      ✔ should be rejected given a custom token with error using article "an" before JWT short name
      ✔ should be rejected given a legacy custom token with error using article "an" before JWT short name
      ✔ should be fulfilled with decoded claims given a valid Auth Blocking JWT token
      ✔ should decode an unsigned token if isEmulator=true
      ✔ should not decode an unsigned token when the algorithm is not overridden (emulator)

  UserImportBuilder
    constructor
      ✔ should throw when non-object 10 UserImportOptions is provided
      ✔ should throw when non-object "invalid" UserImportOptions is provided
      ✔ should throw when non-object undefined UserImportOptions is provided
      ✔ should throw when non-object null UserImportOptions is provided
      ✔ should throw when non-object true UserImportOptions is provided
      ✔ should throw when non-object ["a"] UserImportOptions is provided
      ✔ should throw when an empty hash algorithm is provided
      ✔ should throw when an invalid hash algorithm is provided
      ✔ should not throw when no hash options are provided and no hashing is needed
      HMAC_SHA512
        ✔ should throw when non-Buffer 10 hash key is provided
        ✔ should throw when non-Buffer "invalid" hash key is provided
        ✔ should throw when non-Buffer undefined hash key is provided
        ✔ should throw when non-Buffer null hash key is provided
        ✔ should not throw with valid options and should generate expected request
      HMAC_SHA256
        ✔ should throw when non-Buffer 10 hash key is provided
        ✔ should throw when non-Buffer "invalid" hash key is provided
        ✔ should throw when non-Buffer undefined hash key is provided
        ✔ should throw when non-Buffer null hash key is provided
        ✔ should not throw with valid options and should generate expected request
      HMAC_SHA1
        ✔ should throw when non-Buffer 10 hash key is provided
        ✔ should throw when non-Buffer "invalid" hash key is provided
        ✔ should throw when non-Buffer undefined hash key is provided
        ✔ should throw when non-Buffer null hash key is provided
        ✔ should not throw with valid options and should generate expected request
      HMAC_MD5
        ✔ should throw when non-Buffer 10 hash key is provided
        ✔ should throw when non-Buffer "invalid" hash key is provided
        ✔ should throw when non-Buffer undefined hash key is provided
        ✔ should throw when non-Buffer null hash key is provided
        ✔ should not throw with valid options and should generate expected request
      MD5
        ✔ should throw when -1 rounds provided
        ✔ should throw when 8193 rounds provided
        ✔ should throw when "invalid" rounds provided
        ✔ should throw when undefined rounds provided
        ✔ should throw when null rounds provided
        ✔ should not throw with valid options and should generate expected request
      SHA1
        ✔ should throw when 0 rounds provided
        ✔ should throw when 8193 rounds provided
        ✔ should throw when "invalid" rounds provided
        ✔ should throw when undefined rounds provided
        ✔ should throw when null rounds provided
        ✔ should not throw with valid options and should generate expected request
      SHA256
        ✔ should throw when 0 rounds provided
        ✔ should throw when 8193 rounds provided
        ✔ should throw when "invalid" rounds provided
        ✔ should throw when undefined rounds provided
        ✔ should throw when null rounds provided
        ✔ should not throw with valid options and should generate expected request
      SHA512
        ✔ should throw when 0 rounds provided
        ✔ should throw when 8193 rounds provided
        ✔ should throw when "invalid" rounds provided
        ✔ should throw when undefined rounds provided
        ✔ should throw when null rounds provided
        ✔ should not throw with valid options and should generate expected request
      PBKDF_SHA1
        ✔ should throw when -1 rounds provided
        ✔ should throw when 120001 rounds provided
        ✔ should throw when "invalid" rounds provided
        ✔ should throw when undefined rounds provided
        ✔ should throw when null rounds provided
        ✔ should not throw with valid options and should generate expected request
      PBKDF2_SHA256
        ✔ should throw when -1 rounds provided
        ✔ should throw when 120001 rounds provided
        ✔ should throw when "invalid" rounds provided
        ✔ should throw when undefined rounds provided
        ✔ should throw when null rounds provided
        ✔ should not throw with valid options and should generate expected request
      SCRYPT
        ✔ should throw when 10 key provided
        ✔ should throw when "invalid" key provided
        ✔ should throw when undefined key provided
        ✔ should throw when null key provided
        ✔ should throw when 0 rounds provided
        ✔ should throw when 9 rounds provided
        ✔ should throw when "invalid" rounds provided
        ✔ should throw when undefined rounds provided
        ✔ should throw when null rounds provided
        ✔ should throw when 0 memoryCost provided
        ✔ should throw when 15 memoryCost provided
        ✔ should throw when "invalid" memoryCost provided
        ✔ should throw when undefined memoryCost provided
        ✔ should throw when null memoryCost provided
        ✔ should throw when 10 saltSeparator provided
        ✔ should throw when "invalid" saltSeparator provided
        ✔ should not throw with valid options and should generate expected request
      BCRYPT
        ✔ should not throw with valid options and should generate expected request
      STANDARD_SCRYPT
        ✔ should throw when false memoryCost provided
        ✔ should throw when {} memoryCost provided
        ✔ should throw when "invalid" memoryCost provided
        ✔ should throw when undefined memoryCost provided
        ✔ should throw when null memoryCost provided
        ✔ should throw when false parallelization provided
        ✔ should throw when {} parallelization provided
        ✔ should throw when "invalid" parallelization provided
        ✔ should throw when undefined parallelization provided
        ✔ should throw when null parallelization provided
        ✔ should throw when false blockSize provided
        ✔ should throw when {} blockSize provided
        ✔ should throw when "invalid" blockSize provided
        ✔ should throw when undefined blockSize provided
        ✔ should throw when null blockSize provided
        ✔ should throw when false dkLen provided
        ✔ should throw when {} dkLen provided
        ✔ should throw when "invalid" dkLen provided
        ✔ should throw when undefined dkLen provided
        ✔ should throw when null dkLen provided
        ✔ should not throw with valid options and should generate expected request
    buildRequest()
      ✔ should return the expected request when no client side error is detected
      ✔ should return the expected request when client side errors are detected
      ✔ should return expected request with no hash options when not required
      ✔ should return expected request with no multi-factor fields when not available
      ✔ should ignore users with invalid second factor enrollment time
      ✔ should ignore users with unsupported second factors
    buildResponse()
      ✔ should return the expected response for successful import
      ✔ should return the expected response for import with server side errors
      ✔ should return the expected response for import with client side errors
      ✔ should return the expected response for import with mixed client/server errors

  FIREBASE_AUTH_CREATE_SESSION_COOKIE
    ✔ should return the correct endpoint
    ✔ should return the correct http method
    requestValidator
      ✔ should succeed with valid parameters passed
      ✔ should succeed with duration set at minimum allowed
      ✔ should succeed with duration set at maximum allowed
      ✔ should fail when idToken not passed
      ✔ should fail when validDuration not passed
      called with invalid parameters
        ✔ should fail with invalid idToken
        ✔ should fail with invalid validDuration
        ✔ should fail with validDuration less than minimum allowed
        ✔ should fail with validDuration greater than maximum allowed
    responseValidator
      ✔ should succeed with sessionCookie returned
      ✔ should fail when no session cookie is returned

  FIREBASE_AUTH_UPLOAD_ACCOUNT
    ✔ should return the correct endpoint
    ✔ should return the correct http method
    ✔ should return empty request validator
    ✔ should return empty response validator

  FIREBASE_AUTH_DOWNLOAD_ACCOUNT
    ✔ should return the correct endpoint
    ✔ should return the correct http method
    ✔ should return empty response validator
    requestValidator
      ✔ should succeed with valid maxResults passed
      ✔ should succeed with valid maxResults and other optional parameters
      ✔ should fail when maxResults not passed
      called with invalid parameters
        ✔ should fail with invalid maxResults
        ✔ should fail with zero maxResults
        ✔ should fail with negative maxResults
        ✔ should fail with maxResults exceeding allowed limit
        ✔ should fail with invalid nextPageToken

  FIREBASE_AUTH_GET_ACCOUNT_INFO
    ✔ should return the correct endpoint
    ✔ should return the correct http method
    requestValidator
      ✔ should succeed with localId passed
      ✔ should succeed with email passed
      ✔ should succeed with phoneNumber passed
      ✔ should succeed with federatedUserId passed
      ✔ should succeed with federatedUserId passed
      ✔ should fail when neither localId, email or phoneNumber are passed
    responseValidator
      ✔ should succeed with users returned
      ✔ should fail when the response object is empty
      ✔ should fail when the response object has an empty list of users

  FIREBASE_AUTH_GET_ACCOUNTS_INFO
    ✔ should return the correct endpoint
    ✔ should return the correct http method
    requestValidator
      ✔ should succeed with localId passed
      ✔ should succeed with email passed
      ✔ should succeed with phoneNumber passed
      ✔ should succeed with federatedUserId passed
      ✔ should fail when neither localId, email or phoneNumber are passed
      ✔ should succeed when multiple identifiers passed
    responseValidator
      ✔ should succeed with users returned
      ✔ should succeed even if users are not returned

  FIREBASE_AUTH_DELETE_ACCOUNT
    ✔ should return the correct endpoint
    ✔ should return the correct http method
    ✔ should return empty response validator
    requestValidator
      ✔ should succeed with localId passed
      ✔ should fail when localId not passed

  FIREBASE_AUTH_SET_ACCOUNT_INFO
    ✔ should return the correct endpoint
    ✔ should return the correct http method
    requestValidator
      ✔ should succeed with valid localId passed
      ✔ should succeed with valid localId and other optional parameters
      ✔ should succeed with valid localId and customAttributes with 1000 char payload
      ✔ should fail when localId not passed
      called with invalid parameters
        ✔ should fail with invalid localId
        ✔ should fail with invalid displayName
        ✔ should fail with invalid email
        ✔ should fail with invalid password
        ✔ should fail with invalid emailVerified flag
        ✔ should fail with invalid photoUrl
        ✔ should fail with invalid disableUser flag
        ✔ should fail with invalid phoneNumber
        ✔ should fail with invalid JSON customAttributes
        ✔ should fail with customAttributes exceeding maximum allowed payload
        ✔ should fail with customAttributes containing blacklisted claim: acr
        ✔ should fail with customAttributes containing blacklisted claim: amr
        ✔ should fail with customAttributes containing blacklisted claim: at_hash
        ✔ should fail with customAttributes containing blacklisted claim: aud
        ✔ should fail with customAttributes containing blacklisted claim: auth_time
        ✔ should fail with customAttributes containing blacklisted claim: azp
        ✔ should fail with customAttributes containing blacklisted claim: cnf
        ✔ should fail with customAttributes containing blacklisted claim: c_hash
        ✔ should fail with customAttributes containing blacklisted claim: exp
        ✔ should fail with customAttributes containing blacklisted claim: iat
        ✔ should fail with customAttributes containing blacklisted claim: iss
        ✔ should fail with customAttributes containing blacklisted claim: jti
        ✔ should fail with customAttributes containing blacklisted claim: nbf
        ✔ should fail with customAttributes containing blacklisted claim: nonce
        ✔ should fail with customAttributes containing blacklisted claim: sub
        ✔ should fail with customAttributes containing blacklisted claim: firebase
        ✔ should fail with customAttributes containing multi-blacklisted claims
        ✔ should fail with invalid validSince
    responseValidator
      ✔ should succeed with localId returned
      ✔ should fail when localId is not returned

  FIREBASE_AUTH_SIGN_UP_NEW_USER
    ✔ should return the correct endpoint
    ✔ should return the correct http method
    requestValidator
      ✔ should succeed with valid parameters excluding uid
      ✔ should succeed with valid parameters including uid
      ✔ should succeed with no parameters
      called with invalid parameters
        ✔ should fail with invalid localId
        ✔ should fail with invalid displayName
        ✔ should fail with invalid email
        ✔ should fail with invalid password
        ✔ should fail with invalid emailVerified flag
        ✔ should fail with invalid photoUrl
        ✔ should fail with invalid disabled flag
        ✔ should fail with invalid phoneNumber
        ✔ should fail with customAttributes
        ✔ should fail with validSince
    responseValidator
      ✔ should succeed with localId returned
      ✔ should fail when localId is not returned

  FirebaseAuthRequestHandler
    Constructor
      ✔ should succeed with a FirebaseApp instance
    Emulator Support
      ✔ should call a prod URL with a real token when emulator is not running
      ✔ should call a local URL with a mock token when the emulator is running
    createSessionCookie
      ✔ should be fulfilled given a valid localId
      ✔ should be fulfilled given a duration equal to the maximum allowed
      ✔ should be fulfilled given a duration equal to the minimum allowed
      ✔ should be rejected given an invalid ID token
      ✔ should be rejected given an invalid duration
      ✔ should be rejected given a duration less than minimum allowed
      ✔ should be rejected given a duration greater than maximum allowed
      ✔ should be rejected when the backend returns an error
    getAccountInfoByEmail
      ✔ should be fulfilled given a valid email
      ✔ should be rejected given an invalid email
    getAccountInfoByUid
      ✔ should be fulfilled given a valid localId
      ✔ should be rejected given an invalid localId
      ✔ should be rejected when the backend returns an error
    getAccountInfoByPhoneNumber
      ✔ should be fulfilled given a valid phoneNumber
      ✔ should be rejected given an invalid phoneNumber
      ✔ should be rejected when the backend returns an error
    getAccountInfoByIdentifiers
      ✔ should throw when given more than 100 identifiers
      ✔ should return no results when given no identifiers
      ✔ should return no users when given identifiers that do not exist
      ✔ should throw when given an invalid uid
      ✔ should throw when given an invalid email
      ✔ should throw when given an invalid phone number
      ✔ should throw when given an invalid provider
      ✔ should throw when given a single bad identifier
      ✔ returns users by various identifier types in a single call
    uploadAccount
      ✔ should throw on invalid options without making an underlying API call
      ✔ should throw when 1001 UserImportRecords are provided
      ✔ should resolve successfully when 1000 UserImportRecords are provided
      ✔ should resolve with expected result on underlying API success
      ✔ should resolve with expected result on underlying API partial succcess
      ✔ should resolve without underlying API call when users are processed client side
      ✔ should validate underlying users and resolve with expected errors
      ✔ should be rejected when the backend returns an error
    downloadAccount
      ✔ should be fulfilled given a valid parameters
      ✔ should be fulfilled with empty user array when no users exist
      ✔ should be fulfilled given no parameters
      ✔ should be rejected given an invalid maxResults
      ✔ should be rejected given an invalid next page token
      ✔ should be rejected when the backend returns an error
    deleteAccount
      ✔ should be fulfilled given a valid localId
      ✔ should be rejected when the backend returns an error
    deleteAccounts
      ✔ should succeed given an empty list
      ✔ should be rejected when given more than 1000 identifiers
      ✔ should immediately fail given an invalid id
      ✔ should be fulfilled given valid uids
    updateExistingAccount
      ✔ should be fulfilled given a valid localId
      ✔ should be fulfilled given valid parameters
      ✔ should be fulfilled given valid profile parameters to delete
      ✔ should be fulfilled given phone number to delete
      ✔ should be fulfilled given null enrolled factors
      ✔ should be fulfilled given empty enrolled factors array
      ✔ should be rejected given invalid parameters such as email
      ✔ should be rejected given an invalid second factor uid
      ✔ should be rejected given an invalid second factor display name
      ✔ should be rejected given an invalid second factor phone number
      ✔ should be rejected given an invalid second factor enrollment time
      ✔ should be rejected given an invalid second factor type
      ✔ should be rejected given a tenant ID to modify
      ✔ should be rejected given invalid parameters such as phoneNumber
      ✔ should be rejected when the backend returns an error
    setCustomUserClaims
      ✔ should be fulfilled given a valid localId and customAttributes
      ✔ should be fulfilled given valid localId and null claims
      ✔ should be rejected given invalid parameters such as uid
      ✔ should be rejected given invalid parameters such as customClaims
      ✔ should be rejected given customClaims with blacklisted claims
      ✔ should be rejected when the backend returns an error
    revokeRefreshTokens
      ✔ should be fulfilled given a valid uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected when the backend returns an error
    createNewAccount
      with uid specified
        ✔ should be fulfilled given a valid localId
        ✔ should be fulfilled given valid parameters
        ✔ should be rejected given invalid parameters such as email
        ✔ should be fulfilled given "[]" enrolled factors
        ✔ should be fulfilled given "null" enrolled factors
        ✔ should be rejected given an unsupported second factor uid
        ✔ should be rejected given an invalid second factor display name
        ✔ should be rejected given an invalid second factor phone number
        ✔ should be rejected given an unsupported second factor enrollment time
        ✔ should be rejected given an invalid second factor type
        ✔ should be rejected given tenantId in CreateRequest
        ✔ should be rejected given invalid parameters such as phoneNumber
        ✔ should be rejected when the backend returns a user exists error
        ✔ should be rejected when the backend returns an email exists error
        ✔ should be rejected when the backend returns a generic error
      with no uid specified
        ✔ should be fulfilled given valid parameters
        ✔ should be rejected given invalid parameters such as email
        ✔ should be rejected given invalid parameters such as phone number
        ✔ should be rejected when the backend returns a generic error
    getEmailActionLink
      ✔ should be fulfilled given a valid email
      ✔ should be fulfilled given a valid requestType:PASSWORD_RESET and ActionCodeSettings
      ✔ should be fulfilled given a valid requestType:VERIFY_EMAIL and ActionCodeSettings
      ✔ should be fulfilled given a valid requestType:EMAIL_SIGNIN and ActionCodeSettings
      ✔ should be fulfilled given a valid requestType:VERIFY_AND_CHANGE_EMAIL and ActionCodeSettings
      ✔ should be fulfilled given requestType:PASSWORD_RESET and no ActionCodeSettings
      ✔ should be fulfilled given requestType:VERIFY_EMAIL and no ActionCodeSettings
      ✔ should be fulfilled given a valid requestType: VERIFY_AND_CHANGE_EMAIL and no ActionCodeSettings
      ✔ should be rejected given requestType:EMAIL_SIGNIN and no ActionCodeSettings
      ✔ should be rejected given requestType: VERIFY_AND_CHANGE and no new Email address
      ✔ should be rejected given an invalid email
      ✔ should be rejected given an invalid new email
      ✔ should be rejected given an invalid request type
      ✔ should be rejected given an invalid ActionCodeSettings object
      ✔ should be rejected when the response does not contain a link
      ✔ should be rejected when the backend returns an error
    getOAuthIdpConfig()
      ✔ should be fulfilled given a valid provider ID
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"saml.provider"
      ✔ should be rejected given an invalid provider ID:["oidc.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given a backend error
    listOAuthIdpConfigs()
      ✔ should be fulfilled given a valid parameters
      ✔ should be fulfilled with empty configuration array when no configurations exist
      ✔ should be fulfilled given no parameters
      ✔ should be rejected given an invalid maxResults
      ✔ should be rejected given an invalid next page token
      ✔ should be rejected when the backend returns an error
    deleteOAuthIdpConfig()
      ✔ should be fulfilled given a valid provider ID
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"saml.provider"
      ✔ should be rejected given an invalid provider ID:["oidc.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given a backend error
    createOAuthIdpConfig
      ✔ should be fulfilled given valid parameters
      ✔ should be fulfilled given valid parameters for OIDC code flow
      ✔ should be rejected given invalid parameters
      ✔ should be rejected when the backend returns a response missing name
      ✔ should be rejected when the backend returns an error
    updateOAuthIdpConfig()
      ✔ should be fulfilled given full parameters
      ✔ should be fulfilled given full parameters for OIDC code flow
      ✔ should be fulfilled given partial parameters
      ✔ should be fulfilled given single parameter to change
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"saml.provider"
      ✔ should be rejected given an invalid provider ID:["oidc.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given invalid parameters
      ✔ should be rejected when the backend returns a response missing name
      ✔ should be rejected when the backend returns an error
    getInboundSamlConfig()
      ✔ should be fulfilled given a valid provider ID
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"oidc.provider"
      ✔ should be rejected given an invalid provider ID:["saml.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given a backend error
    listInboundSamlConfigs()
      ✔ should be fulfilled given a valid parameters
      ✔ should be fulfilled with empty configuration array when no configurations exist
      ✔ should be fulfilled given no parameters
      ✔ should be rejected given an invalid maxResults
      ✔ should be rejected given an invalid next page token
      ✔ should be rejected when the backend returns an error
    deleteInboundSamlConfig()
      ✔ should be fulfilled given a valid provider ID
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"oidc.provider"
      ✔ should be rejected given an invalid provider ID:["saml.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given a backend error
    createInboundSamlConfig
      ✔ should be fulfilled given valid parameters
      ✔ should be rejected given invalid parameters
      ✔ should be rejected when the backend returns a response missing name
      ✔ should be rejected when the backend returns an error
    updateInboundSamlConfig()
      ✔ should be fulfilled given full parameters
      ✔ should be fulfilled given partial parameters
      ✔ should be fulfilled given single parameter to change
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"oidc.provider"
      ✔ should be rejected given an invalid provider ID:["saml.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given invalid parameters
      ✔ should be rejected when the backend returns a response missing name
      ✔ should be rejected when the backend returns an error
    getTenant
      ✔ should be fulfilled given a valid tenant ID
      ✔ should be rejected given an invalid tenant ID:null
      ✔ should be rejected given an invalid tenant ID:null
      ✔ should be rejected given an invalid tenant ID:0
      ✔ should be rejected given an invalid tenant ID:1
      ✔ should be rejected given an invalid tenant ID:true
      ✔ should be rejected given an invalid tenant ID:false
      ✔ should be rejected given an invalid tenant ID:""
      ✔ should be rejected given an invalid tenant ID:["tenant-id"]
      ✔ should be rejected given an invalid tenant ID:[]
      ✔ should be rejected given an invalid tenant ID:{}
      ✔ should be rejected given an invalid tenant ID:{"a":1}
      ✔ should be rejected given an invalid tenant ID:undefined
      ✔ should be rejected given a backend error
    listTenants
      ✔ should be fulfilled given valid parameters
      ✔ should be fulfilled with empty tenant array when no tenants exist
      ✔ should be fulfilled given no parameters
      ✔ should be rejected given an invalid maxResults
      ✔ should be rejected given an invalid next page token
      ✔ should be rejected when the backend returns an error
    deleteTenant
      ✔ should be fulfilled given a valid tenant ID
      ✔ should be rejected given an invalid tenant ID:null
      ✔ should be rejected given an invalid tenant ID:null
      ✔ should be rejected given an invalid tenant ID:0
      ✔ should be rejected given an invalid tenant ID:1
      ✔ should be rejected given an invalid tenant ID:true
      ✔ should be rejected given an invalid tenant ID:false
      ✔ should be rejected given an invalid tenant ID:""
      ✔ should be rejected given an invalid tenant ID:["tenant-id"]
      ✔ should be rejected given an invalid tenant ID:[]
      ✔ should be rejected given an invalid tenant ID:{}
      ✔ should be rejected given an invalid tenant ID:{"a":1}
      ✔ should be rejected given an invalid tenant ID:undefined
      ✔ should be rejected given a backend error
    createTenant
      ✔ should be fulfilled given valid parameters
      ✔ should be rejected given invalid parameters
      ✔ should be rejected when the backend returns a response missing name
      ✔ should be rejected when the backend returns a response missing tenant ID in response name
      ✔ should be rejected when the backend returns an error
    updateTenant
      ✔ should be fulfilled given full parameters
      ✔ should be fulfilled given partial parameters
      ✔ should be fulfilled given a single parameter to change
      ✔ should be rejected given an invalid tenant ID:null
      ✔ should be rejected given an invalid tenant ID:null
      ✔ should be rejected given an invalid tenant ID:0
      ✔ should be rejected given an invalid tenant ID:1
      ✔ should be rejected given an invalid tenant ID:true
      ✔ should be rejected given an invalid tenant ID:false
      ✔ should be rejected given an invalid tenant ID:""
      ✔ should be rejected given an invalid tenant ID:["tenant-id"]
      ✔ should be rejected given an invalid tenant ID:[]
      ✔ should be rejected given an invalid tenant ID:{}
      ✔ should be rejected given an invalid tenant ID:{"a":1}
      ✔ should be rejected given an invalid tenant ID:undefined
      ✔ should be rejected given invalid parameters
      ✔ should be rejected when the backend returns a response missing name
      ✔ should be rejected when the backend returns a response missing tenant ID in response name
      ✔ should be rejected when the backend returns an error
    non-2xx responses
      ✔ should be rejected given a simulated non-2xx response with a known error code
      ✔ should be rejected given a simulated non-2xx response with an unknown error code
      ✔ should be rejected given a simulated non-2xx response with no error code

  FirebaseTenantRequestHandler
    Constructor
      ✔ should succeed with a FirebaseApp instance
    Emulator Support
      ✔ should call a prod URL with a real token when emulator is not running
      ✔ should call a local URL with a mock token when the emulator is running
    createSessionCookie
      ✔ should be fulfilled given a valid localId
      ✔ should be fulfilled given a duration equal to the maximum allowed
      ✔ should be fulfilled given a duration equal to the minimum allowed
      ✔ should be rejected given an invalid ID token
      ✔ should be rejected given an invalid duration
      ✔ should be rejected given a duration less than minimum allowed
      ✔ should be rejected given a duration greater than maximum allowed
      ✔ should be rejected when the backend returns an error
    getAccountInfoByEmail
      ✔ should be fulfilled given a valid email
      ✔ should be rejected given an invalid email
    getAccountInfoByUid
      ✔ should be fulfilled given a valid localId
      ✔ should be rejected given an invalid localId
      ✔ should be rejected when the backend returns an error
    getAccountInfoByPhoneNumber
      ✔ should be fulfilled given a valid phoneNumber
      ✔ should be rejected given an invalid phoneNumber
      ✔ should be rejected when the backend returns an error
    getAccountInfoByIdentifiers
      ✔ should throw when given more than 100 identifiers
      ✔ should return no results when given no identifiers
      ✔ should return no users when given identifiers that do not exist
      ✔ should throw when given an invalid uid
      ✔ should throw when given an invalid email
      ✔ should throw when given an invalid phone number
      ✔ should throw when given an invalid provider
      ✔ should throw when given a single bad identifier
      ✔ returns users by various identifier types in a single call
    uploadAccount
      ✔ should throw on invalid options without making an underlying API call
      ✔ should throw when 1001 UserImportRecords are provided
      ✔ should throw when a user record with mismatching tenant ID is provided
      ✔ should resolve successfully when 1000 UserImportRecords are provided
      ✔ should resolve with expected result on underlying API success
      ✔ should resolve with expected result on underlying API partial succcess
      ✔ should resolve without underlying API call when users are processed client side
      ✔ should validate underlying users and resolve with expected errors
      ✔ should be rejected when the backend returns an error
    downloadAccount
      ✔ should be fulfilled given a valid parameters
      ✔ should be fulfilled with empty user array when no users exist
      ✔ should be fulfilled given no parameters
      ✔ should be rejected given an invalid maxResults
      ✔ should be rejected given an invalid next page token
      ✔ should be rejected when the backend returns an error
    deleteAccount
      ✔ should be fulfilled given a valid localId
      ✔ should be rejected when the backend returns an error
    deleteAccounts
      ✔ should succeed given an empty list
      ✔ should be rejected when given more than 1000 identifiers
      ✔ should immediately fail given an invalid id
      ✔ should be fulfilled given valid uids
    updateExistingAccount
      ✔ should be fulfilled given a valid localId
      ✔ should be fulfilled given valid parameters
      ✔ should be fulfilled given valid profile parameters to delete
      ✔ should be fulfilled given phone number to delete
      ✔ should be fulfilled given null enrolled factors
      ✔ should be fulfilled given empty enrolled factors array
      ✔ should be rejected given invalid parameters such as email
      ✔ should be rejected given an invalid second factor uid
      ✔ should be rejected given an invalid second factor display name
      ✔ should be rejected given an invalid second factor phone number
      ✔ should be rejected given an invalid second factor enrollment time
      ✔ should be rejected given an invalid second factor type
      ✔ should be rejected given a tenant ID to modify
      ✔ should be rejected given invalid parameters such as phoneNumber
      ✔ should be rejected when the backend returns an error
    setCustomUserClaims
      ✔ should be fulfilled given a valid localId and customAttributes
      ✔ should be fulfilled given valid localId and null claims
      ✔ should be rejected given invalid parameters such as uid
      ✔ should be rejected given invalid parameters such as customClaims
      ✔ should be rejected given customClaims with blacklisted claims
      ✔ should be rejected when the backend returns an error
    revokeRefreshTokens
      ✔ should be fulfilled given a valid uid
      ✔ should be rejected given an invalid uid
      ✔ should be rejected when the backend returns an error
    createNewAccount
      with uid specified
        ✔ should be fulfilled given a valid localId
        ✔ should be fulfilled given valid parameters
        ✔ should be rejected given invalid parameters such as email
        ✔ should be fulfilled given "[]" enrolled factors
        ✔ should be fulfilled given "null" enrolled factors
        ✔ should be rejected given an unsupported second factor uid
        ✔ should be rejected given an invalid second factor display name
        ✔ should be rejected given an invalid second factor phone number
        ✔ should be rejected given an unsupported second factor enrollment time
        ✔ should be rejected given an invalid second factor type
        ✔ should be rejected given tenantId in CreateRequest
        ✔ should be rejected given invalid parameters such as phoneNumber
        ✔ should be rejected when the backend returns a user exists error
        ✔ should be rejected when the backend returns an email exists error
        ✔ should be rejected when the backend returns a generic error
      with no uid specified
        ✔ should be fulfilled given valid parameters
        ✔ should be rejected given invalid parameters such as email
        ✔ should be rejected given invalid parameters such as phone number
        ✔ should be rejected when the backend returns a generic error
    getEmailActionLink
      ✔ should be fulfilled given a valid email
      ✔ should be fulfilled given a valid requestType:PASSWORD_RESET and ActionCodeSettings
      ✔ should be fulfilled given a valid requestType:VERIFY_EMAIL and ActionCodeSettings
      ✔ should be fulfilled given a valid requestType:EMAIL_SIGNIN and ActionCodeSettings
      ✔ should be fulfilled given a valid requestType:VERIFY_AND_CHANGE_EMAIL and ActionCodeSettings
      ✔ should be fulfilled given requestType:PASSWORD_RESET and no ActionCodeSettings
      ✔ should be fulfilled given requestType:VERIFY_EMAIL and no ActionCodeSettings
      ✔ should be fulfilled given a valid requestType: VERIFY_AND_CHANGE_EMAIL and no ActionCodeSettings
      ✔ should be rejected given requestType:EMAIL_SIGNIN and no ActionCodeSettings
      ✔ should be rejected given requestType: VERIFY_AND_CHANGE and no new Email address
      ✔ should be rejected given an invalid email
      ✔ should be rejected given an invalid new email
      ✔ should be rejected given an invalid request type
      ✔ should be rejected given an invalid ActionCodeSettings object
      ✔ should be rejected when the response does not contain a link
      ✔ should be rejected when the backend returns an error
    getOAuthIdpConfig()
      ✔ should be fulfilled given a valid provider ID
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"saml.provider"
      ✔ should be rejected given an invalid provider ID:["oidc.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given a backend error
    listOAuthIdpConfigs()
      ✔ should be fulfilled given a valid parameters
      ✔ should be fulfilled with empty configuration array when no configurations exist
      ✔ should be fulfilled given no parameters
      ✔ should be rejected given an invalid maxResults
      ✔ should be rejected given an invalid next page token
      ✔ should be rejected when the backend returns an error
    deleteOAuthIdpConfig()
      ✔ should be fulfilled given a valid provider ID
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"saml.provider"
      ✔ should be rejected given an invalid provider ID:["oidc.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given a backend error
    createOAuthIdpConfig
      ✔ should be fulfilled given valid parameters
      ✔ should be fulfilled given valid parameters for OIDC code flow
      ✔ should be rejected given invalid parameters
      ✔ should be rejected when the backend returns a response missing name
      ✔ should be rejected when the backend returns an error
    updateOAuthIdpConfig()
      ✔ should be fulfilled given full parameters
      ✔ should be fulfilled given full parameters for OIDC code flow
      ✔ should be fulfilled given partial parameters
      ✔ should be fulfilled given single parameter to change
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"saml.provider"
      ✔ should be rejected given an invalid provider ID:["oidc.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given invalid parameters
      ✔ should be rejected when the backend returns a response missing name
      ✔ should be rejected when the backend returns an error
    getInboundSamlConfig()
      ✔ should be fulfilled given a valid provider ID
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"oidc.provider"
      ✔ should be rejected given an invalid provider ID:["saml.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given a backend error
    listInboundSamlConfigs()
      ✔ should be fulfilled given a valid parameters
      ✔ should be fulfilled with empty configuration array when no configurations exist
      ✔ should be fulfilled given no parameters
      ✔ should be rejected given an invalid maxResults
      ✔ should be rejected given an invalid next page token
      ✔ should be rejected when the backend returns an error
    deleteInboundSamlConfig()
      ✔ should be fulfilled given a valid provider ID
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"oidc.provider"
      ✔ should be rejected given an invalid provider ID:["saml.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given a backend error
    createInboundSamlConfig
      ✔ should be fulfilled given valid parameters
      ✔ should be rejected given invalid parameters
      ✔ should be rejected when the backend returns a response missing name
      ✔ should be rejected when the backend returns an error
    updateInboundSamlConfig()
      ✔ should be fulfilled given full parameters
      ✔ should be fulfilled given partial parameters
      ✔ should be fulfilled given single parameter to change
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:null
      ✔ should be rejected given an invalid provider ID:0
      ✔ should be rejected given an invalid provider ID:1
      ✔ should be rejected given an invalid provider ID:true
      ✔ should be rejected given an invalid provider ID:false
      ✔ should be rejected given an invalid provider ID:""
      ✔ should be rejected given an invalid provider ID:"oidc.provider"
      ✔ should be rejected given an invalid provider ID:["saml.provider"]
      ✔ should be rejected given an invalid provider ID:[]
      ✔ should be rejected given an invalid provider ID:{}
      ✔ should be rejected given an invalid provider ID:{"a":1}
      ✔ should be rejected given an invalid provider ID:undefined
      ✔ should be rejected given invalid parameters
      ✔ should be rejected when the backend returns a response missing name
      ✔ should be rejected when the backend returns an error
    non-2xx responses
      ✔ should be rejected given a simulated non-2xx response with a known error code
      ✔ should be rejected given a simulated non-2xx response with an unknown error code
      ✔ should be rejected given a simulated non-2xx response with no error code

  ActionCodeSettingsBuilder
    constructor
      ✔ should not throw on valid parameters
      ✔ should throw on non-object ActionCodeSettings:null
      ✔ should throw on non-object ActionCodeSettings:null
      ✔ should throw on non-object ActionCodeSettings:0
      ✔ should throw on non-object ActionCodeSettings:1
      ✔ should throw on non-object ActionCodeSettings:true
      ✔ should throw on non-object ActionCodeSettings:false
      ✔ should throw on non-object ActionCodeSettings:""
      ✔ should throw on non-object ActionCodeSettings:"a"
      ✔ should throw on non-object ActionCodeSettings:[]
      ✔ should throw on non-object ActionCodeSettings:[1,"a"]
      ✔ should throw on non-object ActionCodeSettings:undefined
      ✔ should throw on missing URL
      ✔ should throw on invalid URL:null
      ✔ should throw on invalid URL:null
      ✔ should throw on invalid URL:0
      ✔ should throw on invalid URL:1
      ✔ should throw on invalid URL:true
      ✔ should throw on invalid URL:false
      ✔ should throw on invalid URL:""
      ✔ should throw on invalid URL:"a"
      ✔ should throw on invalid URL:[]
      ✔ should throw on invalid URL:[1,"a"]
      ✔ should throw on invalid URL:{}
      ✔ should throw on invalid URL:{"a":1}
      ✔ should throw on invalid URL:undefined
      ✔ should throw on invalid handleCodeInApp:null
      ✔ should throw on invalid handleCodeInApp:null
      ✔ should throw on invalid handleCodeInApp:0
      ✔ should throw on invalid handleCodeInApp:1
      ✔ should throw on invalid handleCodeInApp:""
      ✔ should throw on invalid handleCodeInApp:"a"
      ✔ should throw on invalid handleCodeInApp:[]
      ✔ should throw on invalid handleCodeInApp:[1,"a"]
      ✔ should throw on invalid handleCodeInApp:{}
      ✔ should throw on invalid handleCodeInApp:{"a":1}
      ✔ should throw on invalid handleCodeInApp:undefined
      ✔ should throw on invalid dynamicLinkDomain:null
      ✔ should throw on invalid dynamicLinkDomain:null
      ✔ should throw on invalid dynamicLinkDomain:0
      ✔ should throw on invalid dynamicLinkDomain:1
      ✔ should throw on invalid dynamicLinkDomain:true
      ✔ should throw on invalid dynamicLinkDomain:false
      ✔ should throw on invalid dynamicLinkDomain:""
      ✔ should throw on invalid dynamicLinkDomain:["custom.page.link"]
      ✔ should throw on invalid dynamicLinkDomain:[]
      ✔ should throw on invalid dynamicLinkDomain:{}
      ✔ should throw on invalid dynamicLinkDomain:{"a":1}
      ✔ should throw on invalid dynamicLinkDomain:undefined
      ✔ should throw on invalid iOS object:null
      ✔ should throw on invalid iOS object:null
      ✔ should throw on invalid iOS object:0
      ✔ should throw on invalid iOS object:1
      ✔ should throw on invalid iOS object:true
      ✔ should throw on invalid iOS object:false
      ✔ should throw on invalid iOS object:""
      ✔ should throw on invalid iOS object:"a"
      ✔ should throw on invalid iOS object:[]
      ✔ should throw on invalid iOS object:[1,"a"]
      ✔ should throw on invalid iOS object:undefined
      ✔ should throw on missing iOS bundle ID
      ✔ should throw on invalid iOS bundle ID:null
      ✔ should throw on invalid iOS bundle ID:null
      ✔ should throw on invalid iOS bundle ID:0
      ✔ should throw on invalid iOS bundle ID:1
      ✔ should throw on invalid iOS bundle ID:true
      ✔ should throw on invalid iOS bundle ID:false
      ✔ should throw on invalid iOS bundle ID:""
      ✔ should throw on invalid iOS bundle ID:["com.example.ios"]
      ✔ should throw on invalid iOS bundle ID:undefined
      ✔ should throw on invalid android object:null
      ✔ should throw on invalid android object:null
      ✔ should throw on invalid android object:0
      ✔ should throw on invalid android object:1
      ✔ should throw on invalid android object:true
      ✔ should throw on invalid android object:false
      ✔ should throw on invalid android object:""
      ✔ should throw on invalid android object:"a"
      ✔ should throw on invalid android object:[]
      ✔ should throw on invalid android object:[1,"a"]
      ✔ should throw on invalid android object:undefined
      ✔ should throw on missing android package name
      ✔ should throw on invalid android package name:null
      ✔ should throw on invalid android package name:null
      ✔ should throw on invalid android package name:0
      ✔ should throw on invalid android package name:1
      ✔ should throw on invalid android package name:true
      ✔ should throw on invalid android package name:false
      ✔ should throw on invalid android package name:""
      ✔ should throw on invalid android package name:["com.example.android"]
      ✔ should throw on invalid android package name:undefined
      ✔ should throw on invalid android minimum version:null
      ✔ should throw on invalid android minimum version:null
      ✔ should throw on invalid android minimum version:0
      ✔ should throw on invalid android minimum version:1
      ✔ should throw on invalid android minimum version:true
      ✔ should throw on invalid android minimum version:false
      ✔ should throw on invalid android minimum version:""
      ✔ should throw on invalid android minimum version:[]
      ✔ should throw on invalid android minimum version:[1,"a"]
      ✔ should throw on invalid android minimum version:undefined
      ✔ should throw on invalid android installApp field:null
      ✔ should throw on invalid android installApp field:null
      ✔ should throw on invalid android installApp field:0
      ✔ should throw on invalid android installApp field:1
      ✔ should throw on invalid android installApp field:""
      ✔ should throw on invalid android installApp field:"a"
      ✔ should throw on invalid android installApp field:[]
      ✔ should throw on invalid android installApp field:[1,"a"]
      ✔ should throw on invalid android installApp field:{}
      ✔ should throw on invalid android installApp field:{"a":1}
      ✔ should throw on invalid android installApp field:undefined
    buildRequest()
      ✔ should return EmailActionCodeRequest with expected fields
      ✔ should return EmailActionCodeRequest without null or undefined fields

  EmailSignInConfig
    constructor
      ✔ should throw on missing allowPasswordSignup
      ✔ should set readonly property "enabled" to true on allowPasswordSignup enabled
      ✔ should set readonly property "enabled" to false on allowPasswordSignup disabled
      ✔ should set readonly property "passwordRequired" to false on email link sign in enabled
      ✔ should set readonly property "passwordRequired" to true on email link sign in disabled
    toJSON()
      ✔ should return expected JSON representation
    buildServerRequest()
      ✔ should return expected server request on valid input with email link sign-in
      ✔ should return expected server request on valid input without email link sign-in
      ✔ should throw on invalid EmailSignInConfig:null
      ✔ should throw on invalid EmailSignInConfig:null
      ✔ should throw on invalid EmailSignInConfig:0
      ✔ should throw on invalid EmailSignInConfig:1
      ✔ should throw on invalid EmailSignInConfig:true
      ✔ should throw on invalid EmailSignInConfig:false
      ✔ should throw on invalid EmailSignInConfig:""
      ✔ should throw on invalid EmailSignInConfig:"a"
      ✔ should throw on invalid EmailSignInConfig:[]
      ✔ should throw on invalid EmailSignInConfig:[1,"a"]
      ✔ should throw on invalid EmailSignInConfig:undefined
      ✔ should throw on EmailSignInConfig with unsupported attribute
      ✔ should throw on invalid EmailSignInConfig.enabled:null
      ✔ should throw on invalid EmailSignInConfig.enabled:null
      ✔ should throw on invalid EmailSignInConfig.enabled:0
      ✔ should throw on invalid EmailSignInConfig.enabled:1
      ✔ should throw on invalid EmailSignInConfig.enabled:""
      ✔ should throw on invalid EmailSignInConfig.enabled:"a"
      ✔ should throw on invalid EmailSignInConfig.enabled:[]
      ✔ should throw on invalid EmailSignInConfig.enabled:[1,"a"]
      ✔ should throw on invalid EmailSignInConfig.enabled:{}
      ✔ should throw on invalid EmailSignInConfig.enabled:{"a":1}
      ✔ should throw on invalid EmailSignInConfig.enabled:undefined
      ✔ should throw on invalid EmailSignInConfig.passwordRequired:null
      ✔ should throw on invalid EmailSignInConfig.passwordRequired:null
      ✔ should throw on invalid EmailSignInConfig.passwordRequired:0
      ✔ should throw on invalid EmailSignInConfig.passwordRequired:1
      ✔ should throw on invalid EmailSignInConfig.passwordRequired:""
      ✔ should throw on invalid EmailSignInConfig.passwordRequired:"a"
      ✔ should throw on invalid EmailSignInConfig.passwordRequired:[]
      ✔ should throw on invalid EmailSignInConfig.passwordRequired:[1,"a"]
      ✔ should throw on invalid EmailSignInConfig.passwordRequired:{}
      ✔ should throw on invalid EmailSignInConfig.passwordRequired:{"a":1}
      ✔ should throw on invalid EmailSignInConfig.passwordRequired:undefined

  MultiFactorAuthConfig
    constructor
      ✔ should throw on missing state
      ✔ should set readonly property "state" to ENABLED on state enabled
      ✔ should set readonly property "state" to DISABLED on state disabled
      ✔ should set readonly property "factorIds"
      ✔ should ignore unsupported backend types if found
      ✔ should return empty factorIds array if no supported types are found
    toJSON()
      ✔ should return expected JSON representation
    buildServerRequest()
      ✔ should return expected server request on valid state and factorIds
      ✔ should return expected server request on valid state without factorIds
      ✔ should return empty enabledProviders when an empty "options.factorIds" is provided
      ✔ should throw on invalid MultiFactorAuthConfig:null
      ✔ should throw on invalid MultiFactorAuthConfig:null
      ✔ should throw on invalid MultiFactorAuthConfig:0
      ✔ should throw on invalid MultiFactorAuthConfig:1
      ✔ should throw on invalid MultiFactorAuthConfig:true
      ✔ should throw on invalid MultiFactorAuthConfig:false
      ✔ should throw on invalid MultiFactorAuthConfig:""
      ✔ should throw on invalid MultiFactorAuthConfig:"a"
      ✔ should throw on invalid MultiFactorAuthConfig:[]
      ✔ should throw on invalid MultiFactorAuthConfig:[1,"a"]
      ✔ should throw on invalid MultiFactorAuthConfig:undefined
      ✔ should throw on MultiFactorAuthConfig with unsupported attribute
      ✔ should throw on invalid MultiFactorConfig.state:null
      ✔ should throw on invalid MultiFactorConfig.state:null
      ✔ should throw on invalid MultiFactorConfig.state:0
      ✔ should throw on invalid MultiFactorConfig.state:1
      ✔ should throw on invalid MultiFactorConfig.state:""
      ✔ should throw on invalid MultiFactorConfig.state:"a"
      ✔ should throw on invalid MultiFactorConfig.state:[]
      ✔ should throw on invalid MultiFactorConfig.state:[1,"a"]
      ✔ should throw on invalid MultiFactorConfig.state:{}
      ✔ should throw on invalid MultiFactorConfig.state:{"a":1}
      ✔ should throw on invalid MultiFactorConfig.state:undefined
      ✔ should throw on invalid MultiFactorConfig.state:true
      ✔ should throw on invalid MultiFactorConfig.state:false
      ✔ should throw on non-array MultiFactorAuthConfig.factorIds
      ✔ should throw on invalid MultiFactorConfig.factorIds:null
      ✔ should throw on invalid MultiFactorConfig.factorIds:null
      ✔ should throw on invalid MultiFactorConfig.factorIds:0
      ✔ should throw on invalid MultiFactorConfig.factorIds:1
      ✔ should throw on invalid MultiFactorConfig.factorIds:""
      ✔ should throw on invalid MultiFactorConfig.factorIds:"a"
      ✔ should throw on invalid MultiFactorConfig.factorIds:[]
      ✔ should throw on invalid MultiFactorConfig.factorIds:[1,"a"]
      ✔ should throw on invalid MultiFactorConfig.factorIds:{}
      ✔ should throw on invalid MultiFactorConfig.factorIds:{"a":1}
      ✔ should throw on invalid MultiFactorConfig.factorIds:undefined
      ✔ should throw on invalid MultiFactorConfig.factorIds:true
      ✔ should throw on invalid MultiFactorConfig.factorIds:false

  validateTestPhoneNumbers
    ✔ should not throw an error on empty object
    ✔ should not throw an error on valid phone number / code pairs
    ✔ should not throw when 10 pairs are provided
    ✔ should throw when >10 pairs are provided
    ✔ should throw when non-object null is provided
    ✔ should throw when non-object 0 is provided
    ✔ should throw when non-object 1 is provided
    ✔ should throw when non-object true is provided
    ✔ should throw when non-object false is provided
    ✔ should throw when non-object "" is provided
    ✔ should throw when non-object "a" is provided
    ✔ should throw when non-object undefined is provided
    ✔ should throw when "null" is used as phone number
    ✔ should throw when "null" is used as phone number
    ✔ should throw when "0" is used as phone number
    ✔ should throw when "1" is used as phone number
    ✔ should throw when "true" is used as phone number
    ✔ should throw when "false" is used as phone number
    ✔ should throw when "[]" is used as phone number
    ✔ should throw when "["a"]" is used as phone number
    ✔ should throw when "{}" is used as phone number
    ✔ should throw when "{"a":1}" is used as phone number
    ✔ should throw when "undefined" is used as phone number
    ✔ should throw when ""+"" is used as phone number
    ✔ should throw when ""+ ()-"" is used as phone number
    ✔ should throw when an invalid code null is provided
    ✔ should throw when an invalid code 0 is provided
    ✔ should throw when an invalid code 1 is provided
    ✔ should throw when an invalid code true is provided
    ✔ should throw when an invalid code false is provided
    ✔ should throw when an invalid code "" is provided
    ✔ should throw when an invalid code "a" is provided
    ✔ should throw when an invalid code undefined is provided
    ✔ should throw when an invalid code "12345" is provided
    ✔ should throw when an invalid code "1234567" is provided
    ✔ should throw when an invalid code "123a56" is provided
    ✔ should throw when an invalid code "12 345" is provided
    ✔ should throw when an invalid code 123456 is provided

  SAMLConfig
    constructor
      ✔ should not throw on valid response
      ✔ should set readonly property providerId
      ✔ should set readonly property rpEntityId
      ✔ should set readonly property callbackURL
      ✔ should set readonly property idpEntityId
      ✔ should set readonly property ssoURL
      ✔ should set readonly property enableRequestSigning
      ✔ should set readonly property x509Certificates
      ✔ should set readonly property displayName
      ✔ should set readonly property enabled
      ✔ should throw on missing idpConfig
      ✔ should throw on missing rpConfig
      ✔ should throw on invalid provider ID
    getProviderIdFromResourceName()
      ✔ should return the expected provider ID for valid resource
      ✔ should return null for invalid resource name ""
      ✔ should return null for invalid resource name "incorrectsaml."
      ✔ should return null for invalid resource name "saml.provider"
      ✔ should return null for invalid resource name "saml"
      ✔ should return null for invalid resource name "oidc.provider"
      ✔ should return null for invalid resource name "projects/project1/prefixinboundSamlConfigs/saml.provider"
      ✔ should return null for invalid resource name "projects/project1/oauthIdpConfigs/saml.provider"
    isProviderId()
      ✔ should return true on valid SAML provider ID
      ✔ should return false on invalid SAML provider ID "null"
      ✔ should return false on invalid SAML provider ID "null"
      ✔ should return false on invalid SAML provider ID "0"
      ✔ should return false on invalid SAML provider ID "1"
      ✔ should return false on invalid SAML provider ID "true"
      ✔ should return false on invalid SAML provider ID "false"
      ✔ should return false on invalid SAML provider ID """"
      ✔ should return false on invalid SAML provider ID ""incorrectsaml.""
      ✔ should return false on invalid SAML provider ID ""saml""
      ✔ should return false on invalid SAML provider ID ""oidc.provider""
      ✔ should return false on invalid SAML provider ID ""other""
      ✔ should return false on invalid SAML provider ID "[]"
      ✔ should return false on invalid SAML provider ID "[1,"a"]"
      ✔ should return false on invalid SAML provider ID "{}"
      ✔ should return false on invalid SAML provider ID "{"a":1}"
      ✔ should return false on invalid SAML provider ID "undefined"
    toJSON()
      ✔ should return expected JSON
    buildServerRequest()
      ✔ should return expected server request on valid input
      ✔ should ignore missing fields if not required
      ✔ should throw on invalid input
      ✔ should return null when no AuthConfig is provided: null
      ✔ should return null when no AuthConfig is provided: undefined
      ✔ should return null when no AuthConfig is provided: {}
      ✔ should return null when no AuthConfig is provided: {"other":"value"}
    validate()
      ✔ should not throw on valid client request object
      ✔ should not throw when providerId is missing and not required
      ✔ should not throw when idpEntityId is missing and not required
      ✔ should not throw when ssoURL is missing and not required
      ✔ should not throw when rpEntityId is missing and not required
      ✔ should not throw when callbackURL is missing and not required
      ✔ should not throw when x509Certificates is missing and not required
      ✔ should throw on non-null SAMLAuthProviderConfig object:null
      ✔ should throw on non-null SAMLAuthProviderConfig object:null
      ✔ should throw on non-null SAMLAuthProviderConfig object:0
      ✔ should throw on non-null SAMLAuthProviderConfig object:1
      ✔ should throw on non-null SAMLAuthProviderConfig object:true
      ✔ should throw on non-null SAMLAuthProviderConfig object:false
      ✔ should throw on non-null SAMLAuthProviderConfig object:""
      ✔ should throw on non-null SAMLAuthProviderConfig object:"a"
      ✔ should throw on non-null SAMLAuthProviderConfig object:[]
      ✔ should throw on non-null SAMLAuthProviderConfig object:[1,"a"]
      ✔ should throw on non-null SAMLAuthProviderConfig object:undefined
      ✔ should throw on unsupported attribute
      ✔ should throw on invalid providerId:null
      ✔ should throw on invalid providerId:null
      ✔ should throw on invalid providerId:0
      ✔ should throw on invalid providerId:1
      ✔ should throw on invalid providerId:true
      ✔ should throw on invalid providerId:false
      ✔ should throw on invalid providerId:""
      ✔ should throw on invalid providerId:"oidc.provider"
      ✔ should throw on invalid providerId:"other"
      ✔ should throw on invalid providerId:[]
      ✔ should throw on invalid providerId:[1,"a"]
      ✔ should throw on invalid providerId:{}
      ✔ should throw on invalid providerId:{"a":1}
      ✔ should throw on invalid providerId:undefined
      ✔ should throw on invalid idpEntityId:null
      ✔ should throw on invalid idpEntityId:null
      ✔ should throw on invalid idpEntityId:0
      ✔ should throw on invalid idpEntityId:1
      ✔ should throw on invalid idpEntityId:true
      ✔ should throw on invalid idpEntityId:false
      ✔ should throw on invalid idpEntityId:""
      ✔ should throw on invalid idpEntityId:[]
      ✔ should throw on invalid idpEntityId:[1,"a"]
      ✔ should throw on invalid idpEntityId:{}
      ✔ should throw on invalid idpEntityId:{"a":1}
      ✔ should throw on invalid idpEntityId:undefined
      ✔ should throw on invalid ssoURL:null
      ✔ should throw on invalid ssoURL:null
      ✔ should throw on invalid ssoURL:0
      ✔ should throw on invalid ssoURL:1
      ✔ should throw on invalid ssoURL:true
      ✔ should throw on invalid ssoURL:false
      ✔ should throw on invalid ssoURL:""
      ✔ should throw on invalid ssoURL:"invalid"
      ✔ should throw on invalid ssoURL:[]
      ✔ should throw on invalid ssoURL:[1,"a"]
      ✔ should throw on invalid ssoURL:{}
      ✔ should throw on invalid ssoURL:{"a":1}
      ✔ should throw on invalid ssoURL:undefined
      ✔ should throw on invalid rpEntityId:null
      ✔ should throw on invalid rpEntityId:null
      ✔ should throw on invalid rpEntityId:0
      ✔ should throw on invalid rpEntityId:1
      ✔ should throw on invalid rpEntityId:true
      ✔ should throw on invalid rpEntityId:false
      ✔ should throw on invalid rpEntityId:""
      ✔ should throw on invalid rpEntityId:[]
      ✔ should throw on invalid rpEntityId:[1,"a"]
      ✔ should throw on invalid rpEntityId:{}
      ✔ should throw on invalid rpEntityId:{"a":1}
      ✔ should throw on invalid rpEntityId:undefined
      ✔ should throw on invalid callbackURL:null
      ✔ should throw on invalid callbackURL:null
      ✔ should throw on invalid callbackURL:0
      ✔ should throw on invalid callbackURL:1
      ✔ should throw on invalid callbackURL:true
      ✔ should throw on invalid callbackURL:false
      ✔ should throw on invalid callbackURL:""
      ✔ should throw on invalid callbackURL:"invalid"
      ✔ should throw on invalid callbackURL:[]
      ✔ should throw on invalid callbackURL:[1,"a"]
      ✔ should throw on invalid callbackURL:{}
      ✔ should throw on invalid callbackURL:{"a":1}
      ✔ should throw on invalid callbackURL:undefined
      ✔ should throw on invalid x509Certificates:null
      ✔ should throw on invalid x509Certificates:null
      ✔ should throw on invalid x509Certificates:0
      ✔ should throw on invalid x509Certificates:1
      ✔ should throw on invalid x509Certificates:true
      ✔ should throw on invalid x509Certificates:false
      ✔ should throw on invalid x509Certificates:""
      ✔ should throw on invalid x509Certificates:[1,"a"]
      ✔ should throw on invalid x509Certificates:[""]
      ✔ should throw on invalid x509Certificates:"CERT"
      ✔ should throw on invalid x509Certificates:{}
      ✔ should throw on invalid x509Certificates:{"a":1}
      ✔ should throw on invalid x509Certificates:undefined
      ✔ should throw on invalid enableRequestSigning:null
      ✔ should throw on invalid enableRequestSigning:null
      ✔ should throw on invalid enableRequestSigning:0
      ✔ should throw on invalid enableRequestSigning:1
      ✔ should throw on invalid enableRequestSigning:""
      ✔ should throw on invalid enableRequestSigning:"a"
      ✔ should throw on invalid enableRequestSigning:[]
      ✔ should throw on invalid enableRequestSigning:[1,"a"]
      ✔ should throw on invalid enableRequestSigning:{}
      ✔ should throw on invalid enableRequestSigning:{"a":1}
      ✔ should throw on invalid enableRequestSigning:undefined
      ✔ should throw on invalid enabled:null
      ✔ should throw on invalid enabled:null
      ✔ should throw on invalid enabled:0
      ✔ should throw on invalid enabled:1
      ✔ should throw on invalid enabled:""
      ✔ should throw on invalid enabled:"a"
      ✔ should throw on invalid enabled:[]
      ✔ should throw on invalid enabled:[1,"a"]
      ✔ should throw on invalid enabled:{}
      ✔ should throw on invalid enabled:{"a":1}
      ✔ should throw on invalid enabled:undefined
      ✔ should throw on invalid displayName:null
      ✔ should throw on invalid displayName:null
      ✔ should throw on invalid displayName:0
      ✔ should throw on invalid displayName:1
      ✔ should throw on invalid displayName:true
      ✔ should throw on invalid displayName:false
      ✔ should throw on invalid displayName:[]
      ✔ should throw on invalid displayName:[1,"a"]
      ✔ should throw on invalid displayName:{}
      ✔ should throw on invalid displayName:{"a":1}
      ✔ should throw on invalid displayName:undefined

  OIDCConfig
    constructor
      ✔ should not throw on valid response
      ✔ should set readonly property providerId
      ✔ should set readonly property clientId
      ✔ should set readonly property issuer
      ✔ should set readonly property displayName
      ✔ should set readonly property enabled
      ✔ should set readonly property clientSecret
      ✔ should set readonly property expected responseType
      ✔ should not throw on no responseType and clientSecret
      ✔ should throw on missing issuer
      ✔ should throw on missing clientId
      ✔ should throw on invalid provider ID
    getProviderIdFromResourceName()
      ✔ should return the expected provider ID for valid resource
      ✔ should return null for invalid resource name ""
      ✔ should return null for invalid resource name "incorrectsaml."
      ✔ should return null for invalid resource name "oidc.provider"
      ✔ should return null for invalid resource name "oidc"
      ✔ should return null for invalid resource name "saml.provider"
      ✔ should return null for invalid resource name "projects/project1/prefixoauthIdpConfigs/oidc.provider"
      ✔ should return null for invalid resource name "projects/project1/inboundSamlConfigs/oidc.provider"
    isProviderId()
      ✔ should return true on valid OIDC provider ID
      ✔ should return false on invalid OIDC provider ID "null"
      ✔ should return false on invalid OIDC provider ID "null"
      ✔ should return false on invalid OIDC provider ID "0"
      ✔ should return false on invalid OIDC provider ID "1"
      ✔ should return false on invalid OIDC provider ID "true"
      ✔ should return false on invalid OIDC provider ID "false"
      ✔ should return false on invalid OIDC provider ID """"
      ✔ should return false on invalid OIDC provider ID ""incorrectoidc.""
      ✔ should return false on invalid OIDC provider ID ""oidc""
      ✔ should return false on invalid OIDC provider ID ""saml.provider""
      ✔ should return false on invalid OIDC provider ID ""other""
      ✔ should return false on invalid OIDC provider ID "[]"
      ✔ should return false on invalid OIDC provider ID "[1,"a"]"
      ✔ should return false on invalid OIDC provider ID "{}"
      ✔ should return false on invalid OIDC provider ID "{"a":1}"
      ✔ should return false on invalid OIDC provider ID "undefined"
    toJSON()
      ✔ should return expected JSON
    buildServerRequest()
      ✔ should return expected server request on valid input
      ✔ should ignore missing fields if not required
      ✔ should throw on invalid input
      ✔ should return null when no AuthConfig is provided: null
      ✔ should return null when no AuthConfig is provided: undefined
      ✔ should return null when no AuthConfig is provided: {}
      ✔ should return null when no AuthConfig is provided: {"other":"value"}
    validate()
      ✔ should not throw on valid client request object
      ✔ should not throw when providerId is missing and not required
      ✔ should not throw when clientId is missing and not required
      ✔ should not throw when issuer is missing and not required
      ✔ should throw on OAuth responseType contains invalid parameters
      ✔ should not throw when exactly one OAuth responseType is true
      ✔ should not throw when only idToken responseType is set to true
      ✔ should not throw when only code responseType is set to true
      ✔ should throw on two OAuth responseTypes set to true
      ✔ should throw on no OAuth responseType set to true
      ✔ should not throw when responseType is empty
      ✔ should throw on no client secret when OAuth responseType code flow set to true
      ✔ should throw on non-null OIDCAuthProviderConfig object:null
      ✔ should throw on non-null OIDCAuthProviderConfig object:null
      ✔ should throw on non-null OIDCAuthProviderConfig object:0
      ✔ should throw on non-null OIDCAuthProviderConfig object:1
      ✔ should throw on non-null OIDCAuthProviderConfig object:true
      ✔ should throw on non-null OIDCAuthProviderConfig object:false
      ✔ should throw on non-null OIDCAuthProviderConfig object:""
      ✔ should throw on non-null OIDCAuthProviderConfig object:"a"
      ✔ should throw on non-null OIDCAuthProviderConfig object:[]
      ✔ should throw on non-null OIDCAuthProviderConfig object:[1,"a"]
      ✔ should throw on non-null OIDCAuthProviderConfig object:undefined
      ✔ should throw on unsupported attribute
      ✔ should throw on invalid providerId:null
      ✔ should throw on invalid providerId:null
      ✔ should throw on invalid providerId:0
      ✔ should throw on invalid providerId:1
      ✔ should throw on invalid providerId:true
      ✔ should throw on invalid providerId:false
      ✔ should throw on invalid providerId:""
      ✔ should throw on invalid providerId:"other"
      ✔ should throw on invalid providerId:"saml.provider"
      ✔ should throw on invalid providerId:[]
      ✔ should throw on invalid providerId:[1,"a"]
      ✔ should throw on invalid providerId:{}
      ✔ should throw on invalid providerId:{"a":1}
      ✔ should throw on invalid providerId:undefined
      ✔ should throw on invalid clientId:null
      ✔ should throw on invalid clientId:null
      ✔ should throw on invalid clientId:0
      ✔ should throw on invalid clientId:1
      ✔ should throw on invalid clientId:true
      ✔ should throw on invalid clientId:false
      ✔ should throw on invalid clientId:""
      ✔ should throw on invalid clientId:[]
      ✔ should throw on invalid clientId:[1,"a"]
      ✔ should throw on invalid clientId:{}
      ✔ should throw on invalid clientId:{"a":1}
      ✔ should throw on invalid clientId:undefined
      ✔ should throw on invalid issuer:null
      ✔ should throw on invalid issuer:null
      ✔ should throw on invalid issuer:0
      ✔ should throw on invalid issuer:1
      ✔ should throw on invalid issuer:true
      ✔ should throw on invalid issuer:false
      ✔ should throw on invalid issuer:""
      ✔ should throw on invalid issuer:"invalid"
      ✔ should throw on invalid issuer:[]
      ✔ should throw on invalid issuer:[1,"a"]
      ✔ should throw on invalid issuer:{}
      ✔ should throw on invalid issuer:{"a":1}
      ✔ should throw on invalid issuer:undefined
      ✔ should throw on invalid enabled:null
      ✔ should throw on invalid enabled:null
      ✔ should throw on invalid enabled:0
      ✔ should throw on invalid enabled:1
      ✔ should throw on invalid enabled:""
      ✔ should throw on invalid enabled:"a"
      ✔ should throw on invalid enabled:[]
      ✔ should throw on invalid enabled:[1,"a"]
      ✔ should throw on invalid enabled:{}
      ✔ should throw on invalid enabled:{"a":1}
      ✔ should throw on invalid enabled:undefined
      ✔ should throw on invalid displayName:null
      ✔ should throw on invalid displayName:null
      ✔ should throw on invalid displayName:0
      ✔ should throw on invalid displayName:1
      ✔ should throw on invalid displayName:true
      ✔ should throw on invalid displayName:false
      ✔ should throw on invalid displayName:[]
      ✔ should throw on invalid displayName:[1,"a"]
      ✔ should throw on invalid displayName:{}
      ✔ should throw on invalid displayName:{"a":1}
      ✔ should throw on invalid displayName:undefined
      ✔ should throw on invalid clientSecret:null
      ✔ should throw on invalid clientSecret:null
      ✔ should throw on invalid clientSecret:0
      ✔ should throw on invalid clientSecret:1
      ✔ should throw on invalid clientSecret:true
      ✔ should throw on invalid clientSecret:false
      ✔ should throw on invalid clientSecret:""
      ✔ should throw on invalid clientSecret:[]
      ✔ should throw on invalid clientSecret:[1,"a"]
      ✔ should throw on invalid clientSecret:{}
      ✔ should throw on invalid clientSecret:{"a":1}
      ✔ should throw on invalid clientSecret:undefined
      ✔ should throw on invalid responseType.idToken:null
      ✔ should throw on invalid responseType.idToken:null
      ✔ should throw on invalid responseType.idToken:0
      ✔ should throw on invalid responseType.idToken:1
      ✔ should throw on invalid responseType.idToken:"invalid"
      ✔ should throw on invalid responseType.idToken:""
      ✔ should throw on invalid responseType.idToken:[]
      ✔ should throw on invalid responseType.idToken:[1,"a"]
      ✔ should throw on invalid responseType.idToken:{}
      ✔ should throw on invalid responseType.idToken:{"a":1}
      ✔ should throw on invalid responseType.idToken:undefined
      ✔ should throw on invalid responseType.code:null
      ✔ should throw on invalid responseType.code:null
      ✔ should throw on invalid responseType.code:0
      ✔ should throw on invalid responseType.code:1
      ✔ should throw on invalid responseType.code:"invalid"
      ✔ should throw on invalid responseType.code:""
      ✔ should throw on invalid responseType.code:[]
      ✔ should throw on invalid responseType.code:[1,"a"]
      ✔ should throw on invalid responseType.code:{}
      ✔ should throw on invalid responseType.code:{"a":1}
      ✔ should throw on invalid responseType.code:undefined

  Tenant
    buildServerRequest()
      for an update request
        ✔ should return the expected server request without multi-factor and phone config
        ✔ should return the expected server request with multi-factor and phone config
        ✔ should throw on invalid EmailSignInConfig object
        ✔ should throw on invalid EmailSignInConfig attribute
        ✔ should throw on invalid MultiFactorConfig attribute
        ✔ should throw on invalid testPhoneNumbers attribute
        ✔ should not throw on null testPhoneNumbers attribute
        ✔ should throw on null SmsRegionConfig attribute
        ✔ should throw on invalid SmsRegionConfig attribute
        ✔ should throw on invalid allowlistOnly attribute
        ✔ should throw on invalid allowByDefault attribute
        ✔ should throw on non-array disallowedRegions attribute
        ✔ should throw on non-array allowedRegions attribute
        ✔ should throw when both allowlistOnly and allowByDefault attributes are presented
        ✔ should not throw on valid client request object
        ✔ should throw on invalid UpdateTenantRequest:null
        ✔ should throw on invalid UpdateTenantRequest:null
        ✔ should throw on invalid UpdateTenantRequest:0
        ✔ should throw on invalid UpdateTenantRequest:1
        ✔ should throw on invalid UpdateTenantRequest:true
        ✔ should throw on invalid UpdateTenantRequest:false
        ✔ should throw on invalid UpdateTenantRequest:""
        ✔ should throw on invalid UpdateTenantRequest:"a"
        ✔ should throw on invalid UpdateTenantRequest:[]
        ✔ should throw on invalid UpdateTenantRequest:[1,"a"]
        ✔ should throw on invalid UpdateTenantRequest:undefined
        ✔ should throw on unsupported attribute for update request
        ✔ should throw on invalid UpdateTenantRequest displayName:null
        ✔ should throw on invalid UpdateTenantRequest displayName:null
        ✔ should throw on invalid UpdateTenantRequest displayName:0
        ✔ should throw on invalid UpdateTenantRequest displayName:1
        ✔ should throw on invalid UpdateTenantRequest displayName:true
        ✔ should throw on invalid UpdateTenantRequest displayName:false
        ✔ should throw on invalid UpdateTenantRequest displayName:""
        ✔ should throw on invalid UpdateTenantRequest displayName:[]
        ✔ should throw on invalid UpdateTenantRequest displayName:[1,"a"]
        ✔ should throw on invalid UpdateTenantRequest displayName:{}
        ✔ should throw on invalid UpdateTenantRequest displayName:{"a":1}
        ✔ should throw on invalid UpdateTenantRequest displayName:undefined
      for a create request
        ✔ should return the expected server request without multi-factor and phone config
        ✔ should return the expected server request with multi-factor and phone config
        ✔ should throw on invalid EmailSignInConfig
        ✔ should throw on invalid MultiFactorConfig attribute
        ✔ should throw on invalid testPhoneNumbers attribute
        ✔ should throw on null testPhoneNumbers attribute
        ✔ should throw on null SmsRegionConfig attribute
        ✔ should throw on invalid SmsRegionConfig attribute
        ✔ should throw on invalid allowlistOnly attribute
        ✔ should throw on invalid allowByDefault attribute
        ✔ should throw on non-array disallowedRegions attribute
        ✔ should throw on non-array allowedRegions attribute
        ✔ should throw when both allowlistOnly and allowByDefault attributes are presented
        ✔ should throw on invalid CreateTenantRequest:null
        ✔ should throw on invalid CreateTenantRequest:null
        ✔ should throw on invalid CreateTenantRequest:0
        ✔ should throw on invalid CreateTenantRequest:1
        ✔ should throw on invalid CreateTenantRequest:true
        ✔ should throw on invalid CreateTenantRequest:false
        ✔ should throw on invalid CreateTenantRequest:""
        ✔ should throw on invalid CreateTenantRequest:"a"
        ✔ should throw on invalid CreateTenantRequest:[]
        ✔ should throw on invalid CreateTenantRequest:[1,"a"]
        ✔ should throw on invalid CreateTenantRequest:undefined
        ✔ should throw on unsupported attribute for create request
        ✔ should throw on invalid CreateTenantRequest displayName:null
        ✔ should throw on invalid CreateTenantRequest displayName:null
        ✔ should throw on invalid CreateTenantRequest displayName:0
        ✔ should throw on invalid CreateTenantRequest displayName:1
        ✔ should throw on invalid CreateTenantRequest displayName:true
        ✔ should throw on invalid CreateTenantRequest displayName:false
        ✔ should throw on invalid CreateTenantRequest displayName:""
        ✔ should throw on invalid CreateTenantRequest displayName:[]
        ✔ should throw on invalid CreateTenantRequest displayName:[1,"a"]
        ✔ should throw on invalid CreateTenantRequest displayName:{}
        ✔ should throw on invalid CreateTenantRequest displayName:{"a":1}
        ✔ should throw on invalid CreateTenantRequest displayName:undefined
    getTenantIdFromResourceName()
      ✔ should return the expected tenant ID from resource name
      ✔ should return the expected tenant ID from resource name whose project ID contains "tenants" substring
      ✔ should return null when no tenant ID is found
    constructor
      ✔ should not throw on valid initialization
      ✔ should set readonly property tenantId
      ✔ should set readonly property displayName
      ✔ should set readonly property emailSignInConfig
      ✔ should set readonly property multiFactorConfig
      ✔ should set readonly property testPhoneNumbers
      ✔ should set readonly property smsRegionConfig
      ✔ should throw when no tenant ID is provided
      ✔ should set default EmailSignInConfig when allowPasswordSignup is undefined
    toJSON()
      ✔ should return the expected object representation of a tenant
      ✔ should not populate optional fields if not available

  TenantManager
    authForTenant()
      ✔ should throw given invalid tenant ID: null
      ✔ should throw given invalid tenant ID: null
      ✔ should throw given invalid tenant ID: 0
      ✔ should throw given invalid tenant ID: 1
      ✔ should throw given invalid tenant ID: true
      ✔ should throw given invalid tenant ID: false
      ✔ should throw given invalid tenant ID: ""
      ✔ should throw given invalid tenant ID: []
      ✔ should throw given invalid tenant ID: [1,"a"]
      ✔ should throw given invalid tenant ID: {}
      ✔ should throw given invalid tenant ID: {"a":1}
      ✔ should throw given invalid tenant ID: undefined
      ✔ should return a TenantAwareAuth with the expected tenant ID
      ✔ should return a TenantAwareAuth with read-only tenant ID
      ✔ should cache the returned TenantAwareAuth
    getTenant()
      ✔ should be rejected given no tenant ID
      ✔ should be rejected given an invalid tenant ID
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a Tenant on success
      ✔ should throw an error when the backend returns an error
    listTenants()
      ✔ should be rejected given an invalid page token
      ✔ should be rejected given a maxResults greater than the allowed max
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve on listTenants request success with tenants in response
      ✔ should resolve on listTenants request success with default options
      ✔ should resolve on listTenants request success with no tenants in response
      ✔ should throw an error when listTenants returns an error
    deleteTenant()
      ✔ should be rejected given no tenant ID
      ✔ should be rejected given an invalid tenant ID:null
      ✔ should be rejected given an invalid tenant ID:null
      ✔ should be rejected given an invalid tenant ID:0
      ✔ should be rejected given an invalid tenant ID:1
      ✔ should be rejected given an invalid tenant ID:true
      ✔ should be rejected given an invalid tenant ID:false
      ✔ should be rejected given an invalid tenant ID:""
      ✔ should be rejected given an invalid tenant ID:["tenant-id"]
      ✔ should be rejected given an invalid tenant ID:[]
      ✔ should be rejected given an invalid tenant ID:{}
      ✔ should be rejected given an invalid tenant ID:{"a":1}
      ✔ should be rejected given an invalid tenant ID:undefined
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with void on success
      ✔ should throw an error when the backend returns an error
    createTenant()
      ✔ should be rejected given no properties
      ✔ should be rejected given invalid TenantOptions
      ✔ should be rejected given TenantOptions with invalid type property
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a Tenant on createTenant request success
      ✔ should throw an error when createTenant returns an error
    updateTenant()
      ✔ should be rejected given no tenant ID
      ✔ should be rejected given an invalid tenant ID
      ✔ should be rejected given no TenantOptions
      ✔ should be rejected given invalid TenantOptions
      ✔ should be rejected given TenantOptions with invalid update property
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve with a Tenant on updateTenant request success
      ✔ should throw an error when updateTenant returns an error

  Database
    Constructor
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given no app
      ✔ should not throw given a valid app
    app
      ✔ returns the app from the constructor
      ✔ is read-only
    getDatabase
      ✔ should return the default Database namespace
      ✔ should return the Database namespace
      ✔ should return a cached version of Database on subsequent calls
      ✔ should return a Database instance for the specified URL
      ✔ should throw given invalid URL argument: null
      ✔ should throw given invalid URL argument: null
      ✔ should throw given invalid URL argument: 0
      ✔ should throw given invalid URL argument: 1
      ✔ should throw given invalid URL argument: true
      ✔ should throw given invalid URL argument: false
      ✔ should throw given invalid URL argument: ""
      ✔ should throw given invalid URL argument: []
      ✔ should throw given invalid URL argument: [1,"a"]
      ✔ should throw given invalid URL argument: {}
      ✔ should throw given invalid URL argument: {"a":1}
      ✔ should throw given invalid URL argument: undefined
    Token refresh
      ✔ should refresh the token 5 minutes before expiration
      ✔ should not start multiple token refresher tasks
      ✔ should reschedule the token refresher when the underlying token changes
      ✔ should not reschedule when the token is about to expire in 5 minutes
      ✔ should gracefully handle errors during token refresh
      ✔ should stop the token refresher task at delete
    Rules
      getRules
        ✔ should return the rules fetched from the database
        ✔ should return the rules fetched from the database including comments
        ✔ should return the rules fetched from the explicitly specified database
        ✔ should return the rules fetched from the custom URL with query params
        ✔ should throw if the server responds with a well-formed error
        ✔ should throw if the server responds with an error
        ✔ should throw in the event of an I/O error
      getRulesWithJSON
        ✔ should return the rules fetched from the database
        ✔ should return the rules fetched from the explicitly specified database
        ✔ should return the rules fetched from the custom URL with query params
        ✔ should throw if the server responds with a well-formed error
        ✔ should throw if the server responds with an error
        ✔ should throw in the event of an I/O error
      setRules
        ✔ should set the rules when specified as a string
        ✔ should set the rules when specified as a Buffer
        ✔ should set the rules when specified as an object
        ✔ should set the rules with comments when specified as a string
        ✔ should set the rules in the explicitly specified database
        ✔ should set the rules using the custom URL with query params
        ✔ should throw if the source is null
        ✔ should throw if the source is ""
        ✔ should throw if the source is undefined
        ✔ should throw if the source is true
        ✔ should throw if the source is false
        ✔ should throw if the source is 1
        ✔ should throw if the server responds with a well-formed error
        ✔ should throw if the server responds with an error
        ✔ should throw in the event of an I/O error
      emulator mode
        with environment variable
          ✔ getRules should connect to the emulator
          ✔ getRulesJSON should connect to the emulator
          ✔ setRules should connect to the emulator
        with app options
          ✔ getRules should connect to the emulator
          ✔ getRulesJSON should connect to the emulator
          ✔ setRules should connect to the emulator
        with environment variable overriding app options
          ✔ getRules should connect to the emulator
          ✔ getRulesJSON should connect to the emulator
          ✔ setRules should connect to the emulator

  Database
    ✔ should expose ServerValue sentinel
    ✔ should expose enableLogging global function
    getDatabase()
      ✔ should throw when default app is not available
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance
    getDatabaseWithUrl()
      ✔ should throw when default app is not available
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance

  Messaging
    getMessaging()
      ✔ should throw when default app is not available
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance

  Messaging
    Constructor
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given no app
      ✔ should reject given app without project ID
      ✔ should not throw given a valid app
    app
      ✔ returns the app from the constructor
      ✔ is read-only
    send()
      ✔ should throw given no message
      ✔ should throw given message without target: {}
      ✔ should throw given message without target: {"token":null}
      ✔ should throw given message without target: {"token":""}
      ✔ should throw given message without target: {"topic":null}
      ✔ should throw given message without target: {"topic":""}
      ✔ should throw given message without target: {"condition":null}
      ✔ should throw given message without target: {"condition":""}
      ✔ should throw given message without target: {"token":"a","topic":"b"}
      ✔ should throw given message without target: {"token":"a","condition":"b"}
      ✔ should throw given message without target: {"condition":"a","topic":"b"}
      ✔ should throw given message without target: {"token":"a","topic":"b","condition":"c"}
      ✔ should throw given invalid dryRun parameter: null
      ✔ should throw given invalid dryRun parameter: null
      ✔ should throw given invalid dryRun parameter: 0
      ✔ should throw given invalid dryRun parameter: 1
      ✔ should throw given invalid dryRun parameter: ""
      ✔ should throw given invalid dryRun parameter: "a"
      ✔ should throw given invalid dryRun parameter: []
      ✔ should throw given invalid dryRun parameter: [1,"a"]
      ✔ should throw given invalid dryRun parameter: {}
      ✔ should throw given invalid dryRun parameter: {"a":1}
      ✔ should throw given invalid dryRun parameter: undefined
      ✔ should throw given invalid topic name: "/topics/"
      ✔ should throw given invalid topic name: "/foo/bar"
      ✔ should throw given invalid topic name: "foo bar"
      ✔ should be fulfilled with a message ID given a valid message: {"token":"mock-token"}
      ✔ should be fulfilled with a message ID given a valid message: {"topic":"mock-topic"}
      ✔ should be fulfilled with a message ID given a valid message: {"topic":"/topics/mock-topic"}
      ✔ should be fulfilled with a message ID given a valid message: {"condition":"\"foo\" in topics"}
      ✔ should be fulfilled with a message ID in dryRun mode: {"token":"mock-token"}
      ✔ should be fulfilled with a message ID in dryRun mode: {"topic":"mock-topic"}
      ✔ should be fulfilled with a message ID in dryRun mode: {"topic":"/topics/mock-topic"}
      ✔ should be fulfilled with a message ID in dryRun mode: {"condition":"\"foo\" in topics"}
      ✔ should fail when the backend server returns a detailed error
      ✔ should fail when the backend server returns a detailed error with FCM error code
      ✔ should map THIRD_PARTY_AUTH_ERROR to third party auth error
      ✔ should map APNS_AUTH_ERROR to third party auth error
      ✔ should map server error code to client-side error
      ✔ should fail when the backend server returns an unknown error
      ✔ should fail when the backend server returns a non-json error
    sendAll()
      ✔ should throw given no messages
      ✔ should throw when called with more than 500 messages
      ✔ should reject when a message is invalid
      ✔ should throw given invalid dryRun parameter: null
      ✔ should throw given invalid dryRun parameter: null
      ✔ should throw given invalid dryRun parameter: 0
      ✔ should throw given invalid dryRun parameter: 1
      ✔ should throw given invalid dryRun parameter: ""
      ✔ should throw given invalid dryRun parameter: "a"
      ✔ should throw given invalid dryRun parameter: []
      ✔ should throw given invalid dryRun parameter: [1,"a"]
      ✔ should throw given invalid dryRun parameter: {}
      ✔ should throw given invalid dryRun parameter: {"a":1}
      ✔ should throw given invalid dryRun parameter: undefined
      ✔ should be fulfilled with a BatchResponse given valid messages
      ✔ should be fulfilled with a BatchResponse given array-like (issue #566)
      ✔ should be fulfilled with a BatchResponse given valid messages in dryRun mode
      ✔ should be fulfilled with a BatchResponse when the response contains some errors
      ✔ should expose the FCM error code via BatchResponse
      ✔ should fail when the backend server returns a detailed error
      ✔ should fail when the backend server returns a detailed error with FCM error code
      ✔ should map server error code to client-side error
      ✔ should fail when the backend server returns an unknown error
      ✔ should fail when the backend server returns a non-json error
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be fulfilled when called with different message types
    sendMulticast()
      ✔ should throw given no messages
      ✔ should throw when called with more than 500 messages
      ✔ should throw given invalid dryRun parameter: null
      ✔ should throw given invalid dryRun parameter: null
      ✔ should throw given invalid dryRun parameter: 0
      ✔ should throw given invalid dryRun parameter: 1
      ✔ should throw given invalid dryRun parameter: ""
      ✔ should throw given invalid dryRun parameter: "a"
      ✔ should throw given invalid dryRun parameter: []
      ✔ should throw given invalid dryRun parameter: [1,"a"]
      ✔ should throw given invalid dryRun parameter: {}
      ✔ should throw given invalid dryRun parameter: {"a":1}
      ✔ should throw given invalid dryRun parameter: undefined
      ✔ should create multiple messages using the empty multicast payload
      ✔ should create multiple messages using the multicast payload
      ✔ should pass dryRun argument through
      ✔ should be fulfilled with a BatchResponse given valid message
      ✔ should be fulfilled with a BatchResponse given valid message in dryRun mode
      ✔ should be fulfilled with a BatchResponse when the response contains some errors
      ✔ should expose the FCM error code via BatchResponse
      ✔ should fail when the backend server returns a detailed error
      ✔ should fail when the backend server returns a detailed error with FCM error code
      ✔ should map server error code to client-side error
      ✔ should fail when the backend server returns an unknown error
      ✔ should fail when the backend server returns a non-json error
      ✔ should be rejected given an app which returns null access tokens
    sendToDevice()
      ✔ should throw given invalid type for registration token(s) argument: null
      ✔ should throw given invalid type for registration token(s) argument: null
      ✔ should throw given invalid type for registration token(s) argument: 0
      ✔ should throw given invalid type for registration token(s) argument: 1
      ✔ should throw given invalid type for registration token(s) argument: true
      ✔ should throw given invalid type for registration token(s) argument: false
      ✔ should throw given invalid type for registration token(s) argument: {}
      ✔ should throw given invalid type for registration token(s) argument: {"a":1}
      ✔ should throw given invalid type for registration token(s) argument: undefined
      ✔ should throw given no registration token(s) argument
      ✔ should throw given empty string for registration token(s) argument
      ✔ should throw given empty array for registration token(s) argument
      ✔ should be rejected given empty string within array for registration token(s) argument
      ✔ should be rejected given non-string value within array for registration token(s) argument
      ✔ should be rejected given an array containing more than 1,000 registration tokens
      ✔ should be rejected given a 200 JSON server response with a known error
      ✔ should be rejected given a 200 JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response
      ✔ should be rejected given a non-2xx JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response without an error
      ✔ should be rejected given a 200 text server response
      ✔ should be rejected given a 400 text server response
      ✔ should be rejected given a 401 text server response
      ✔ should be rejected given a 403 text server response
      ✔ should be rejected given a 404 text server response
      ✔ should be rejected given a 500 text server response
      ✔ should be rejected given a 503 text server response
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should be fulfilled given a valid registration token and payload
      ✔ should be fulfilled given a valid registration token, payload, and options
      ✔ should be fulfilled given a valid array of registration tokens and payload
      ✔ should be fulfilled given a valid array of registration tokens, payload, and options
      ✔ should be fulfilled with the server response given a single registration token
      ✔ should be fulfilled with the server response given an array of registration tokens
      ✔ should set the appropriate request data given a single registration token
      ✔ should set the appropriate request data given an array of registration tokens
      ✔ should be fulfilled given a notification key which actually causes a device group response
      ✔ should not mutate the payload argument
      ✔ should not mutate the options argument
    sendToDeviceGroup()
      ✔ should throw given invalid type for notification key argument: null
      ✔ should throw given invalid type for notification key argument: null
      ✔ should throw given invalid type for notification key argument: 0
      ✔ should throw given invalid type for notification key argument: 1
      ✔ should throw given invalid type for notification key argument: true
      ✔ should throw given invalid type for notification key argument: false
      ✔ should throw given invalid type for notification key argument: []
      ✔ should throw given invalid type for notification key argument: ["a",1]
      ✔ should throw given invalid type for notification key argument: {}
      ✔ should throw given invalid type for notification key argument: {"a":1}
      ✔ should throw given invalid type for notification key argument: undefined
      ✔ should throw given no notification key argument
      ✔ should throw given empty string for notification key argument
      ✔ should throw given a registration token which has a colon
      ✔ should be rejected given a 200 JSON server response with a known error
      ✔ should be rejected given a 200 JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response
      ✔ should be rejected given a non-2xx JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response without an error
      ✔ should be rejected given a 200 text server response
      ✔ should be rejected given a 400 text server response
      ✔ should be rejected given a 401 text server response
      ✔ should be rejected given a 403 text server response
      ✔ should be rejected given a 404 text server response
      ✔ should be rejected given a 500 text server response
      ✔ should be rejected given a 503 text server response
      ✔ should be rejected given a devices response which has a success count of 0
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should be fulfilled given a valid notification key and payload
      ✔ should be fulfilled given a valid notification key, payload, and options
      ✔ should be fulfilled with the server response (no failed registration tokens)
      ✔ should be fulfilled with the server response (some failed registration token)
      ✔ should be fulfilled with the server response (all failed registration token)
      ✔ should set the appropriate request data
      ✔ should be fulfilled given a registration token which actually causes a devices response
      ✔ should not mutate the payload argument
      ✔ should not mutate the options argument
    sendToTopic()
      ✔ should throw given invalid type for topic argument: null
      ✔ should throw given invalid type for topic argument: null
      ✔ should throw given invalid type for topic argument: 0
      ✔ should throw given invalid type for topic argument: 1
      ✔ should throw given invalid type for topic argument: true
      ✔ should throw given invalid type for topic argument: false
      ✔ should throw given invalid type for topic argument: []
      ✔ should throw given invalid type for topic argument: ["a",1]
      ✔ should throw given invalid type for topic argument: {}
      ✔ should throw given invalid type for topic argument: {"a":1}
      ✔ should throw given invalid type for topic argument: undefined
      ✔ should throw given no topic argument
      ✔ should throw given empty string for topic argument
      ✔ should be rejected given topic argument which has invalid characters: f*o*o
      ✔ should be rejected given topic argument which has invalid characters: /topics/f+o+o
      ✔ should be rejected given topic argument which has invalid characters: foo/topics/foo
      ✔ should be rejected given topic argument which has invalid characters: $foo
      ✔ should be rejected given topic argument which has invalid characters: /topics/foo&
      ✔ should be rejected given a 200 JSON server response with a known error
      ✔ should be rejected given a 200 JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response
      ✔ should be rejected given a non-2xx JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response without an error
      ✔ should be rejected given a 200 text server response
      ✔ should be rejected given a 400 text server response
      ✔ should be rejected given a 401 text server response
      ✔ should be rejected given a 403 text server response
      ✔ should be rejected given a 404 text server response
      ✔ should be rejected given a 500 text server response
      ✔ should be rejected given a 503 text server response
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should be fulfilled given a valid topic and payload (topic name not prefixed with "/topics/")
      ✔ should be fulfilled given a valid topic and payload (topic name prefixed with "/topics/")
      ✔ should be fulfilled given a valid topic and payload (topic name prefixed with "/topics/private/")
      ✔ should be fulfilled given a valid topic, payload, and options
      ✔ should be fulfilled with the server response
      ✔ should set the appropriate request data (topic name not prefixed with "/topics/")
      ✔ should set the appropriate request data (topic name prefixed with "/topics/")
      ✔ should not mutate the payload argument
      ✔ should not mutate the options argument
    sendToCondition()
      ✔ should throw given invalid type for condition argument: null
      ✔ should throw given invalid type for condition argument: null
      ✔ should throw given invalid type for condition argument: 0
      ✔ should throw given invalid type for condition argument: 1
      ✔ should throw given invalid type for condition argument: true
      ✔ should throw given invalid type for condition argument: false
      ✔ should throw given invalid type for condition argument: []
      ✔ should throw given invalid type for condition argument: ["a",1]
      ✔ should throw given invalid type for condition argument: {}
      ✔ should throw given invalid type for condition argument: {"a":1}
      ✔ should throw given invalid type for condition argument: undefined
      ✔ should throw given no condition argument
      ✔ should throw given empty string for condition argument
      ✔ should be rejected given a 200 JSON server response with a known error
      ✔ should be rejected given a 200 JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response
      ✔ should be rejected given a non-2xx JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response without an error
      ✔ should be rejected given a 200 text server response
      ✔ should be rejected given a 400 text server response
      ✔ should be rejected given a 401 text server response
      ✔ should be rejected given a 403 text server response
      ✔ should be rejected given a 404 text server response
      ✔ should be rejected given a 500 text server response
      ✔ should be rejected given a 503 text server response
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should be fulfilled given a valid condition and payload
      ✔ should be fulfilled given a valid condition, payload, and options
      ✔ should be fulfilled with the server response
      ✔ should set the appropriate request data
      ✔ should not mutate the payload argument
      ✔ should not mutate the options argument
    Payload validation
      ✔ should throw given invalid type for payload argument: null
      ✔ should throw given invalid type for payload argument: null
      ✔ should throw given invalid type for payload argument: 0
      ✔ should throw given invalid type for payload argument: 1
      ✔ should throw given invalid type for payload argument: true
      ✔ should throw given invalid type for payload argument: false
      ✔ should throw given invalid type for payload argument: ""
      ✔ should throw given invalid type for payload argument: "a"
      ✔ should throw given invalid type for payload argument: []
      ✔ should throw given invalid type for payload argument: ["a",1]
      ✔ should throw given invalid type for payload argument: undefined
      ✔ should be rejected given an empty payload
      ✔ should be rejected given a non-empty payload with neither the "data" nor the "notification" property
      ✔ should be rejected given an otherwise valid payload with an additional invalid property
      ✔ should be rejected given a non-object value for the "data" property
      ✔ should be rejected given a non-object value for the "notification" property
      ✔ should be rejected given a non-string value for a property within the "data" property
      ✔ should be rejected given a non-string value for a property within the "notification" property
      ✔ should be rejected given a valid "data" property but invalid "notification" property
      ✔ should be rejected given a valid "notification" property but invalid "data" property
      ✔ should be rejected given blacklisted "data.from" property
      ✔ should be rejected given blacklisted "data.google." property
      ✔ should be rejected given blacklisted "data.google.foo" property
      ✔ should be fulfilled given non-blacklisted "data.google" property
      ✔ should be fulfilled given non-blacklisted "data..google" property
      ✔ should be fulfilled given non-blacklisted "data.goo.gle" property
      ✔ should be fulfilled given non-blacklisted "data.googlefoo" property
      ✔ should be fulfilled given non-blacklisted "data.googlef.oo" property
      ✔ should be fulfilled given a valid payload containing only the "data" property
      ✔ should be fulfillled given a valid payload containing only the "notification" property
      ✔ should be fulfillled given a valid payload containing both "data" and "notification" properties
      ✔ should add "data" and "notification" as top-level properties of the request data
      ✔ should convert whitelisted camelCased properties to underscore_cased properties
      ✔ should give whitelisted camelCased properties higher precedence than underscore_cased properties
      ✔ should not mutate the provided payload object
      ✔ should throw given an invalid imageUrl: 
      ✔ should throw given an invalid imageUrl: a
      ✔ should throw given an invalid imageUrl: foo
      ✔ should throw given an invalid imageUrl: image.jpg
      ✔ should throw given an invalid ttl: 
      ✔ should throw given an invalid ttl: abc
      ✔ should throw given an invalid ttl: 123
      ✔ should throw given an invalid ttl: -123s
      ✔ should throw given an invalid ttl: 1.2.3s
      ✔ should throw given an invalid ttl: As
      ✔ should throw given an invalid ttl: s
      ✔ should throw given an invalid ttl: 1s
      ✔ should throw given an invalid ttl: -1
      ✔ should throw given an invalid color: 
      ✔ should throw given an invalid color: foo
      ✔ should throw given an invalid color: 123
      ✔ should throw given an invalid color: #AABBCX
      ✔ should throw given an invalid color: 112233
      ✔ should throw given an invalid color: #11223
      ✔ should throw given an invalid imageUrl: 
      ✔ should throw given an invalid imageUrl: a
      ✔ should throw given an invalid imageUrl: foo
      ✔ should throw given an invalid imageUrl: image.jpg
      ✔ should throw given android titleLocArgs without titleLocKey
      ✔ should throw given android bodyLocArgs without bodyLocKey
      ✔ should throw given an null or negative vibrateTimingsMillis: ,500
      ✔ should throw given an null or negative vibrateTimingsMillis: -100
      ✔ should throw given an empty vibrateTimingsMillis array
      ✔ should throw given an invalid color: 
      ✔ should throw given an invalid color: foo
      ✔ should throw given an invalid color: 123
      ✔ should throw given an invalid color: #AABBCX
      ✔ should throw given an invalid color: 112233
      ✔ should throw given an invalid color: #11223
      ✔ should throw given a negative light on duration
      ✔ should throw given a negative light off duration
      ✔ should throw given invalid apns sound volume: -0.1
      ✔ should throw given invalid apns sound volume: 1.1
      ✔ should throw given apns titleLocArgs without titleLocKey
      ✔ should throw given apns subtitleLocArgs without subtitleLocKey
      ✔ should throw given apns locArgs without locKey
      ✔ should throw given invalid android config: null
      ✔ should throw given invalid android notification: null
      ✔ should throw given invalid apns config: null
      ✔ should throw given invalid webpush config: null
      ✔ should throw given invalid data: null
      ✔ should throw given invalid fcmOptions: null
      ✔ should throw given invalid AndroidFcmOptions: null
      ✔ should throw given invalid ApnsFcmOptions: null
      ✔ should throw given invalid android config: null
      ✔ should throw given invalid android notification: null
      ✔ should throw given invalid apns config: null
      ✔ should throw given invalid webpush config: null
      ✔ should throw given invalid data: null
      ✔ should throw given invalid fcmOptions: null
      ✔ should throw given invalid AndroidFcmOptions: null
      ✔ should throw given invalid ApnsFcmOptions: null
      ✔ should throw given invalid android config: 0
      ✔ should throw given invalid android notification: 0
      ✔ should throw given invalid apns config: 0
      ✔ should throw given invalid webpush config: 0
      ✔ should throw given invalid data: 0
      ✔ should throw given invalid fcmOptions: 0
      ✔ should throw given invalid AndroidFcmOptions: 0
      ✔ should throw given invalid ApnsFcmOptions: 0
      ✔ should throw given invalid android config: 1
      ✔ should throw given invalid android notification: 1
      ✔ should throw given invalid apns config: 1
      ✔ should throw given invalid webpush config: 1
      ✔ should throw given invalid data: 1
      ✔ should throw given invalid fcmOptions: 1
      ✔ should throw given invalid AndroidFcmOptions: 1
      ✔ should throw given invalid ApnsFcmOptions: 1
      ✔ should throw given invalid android config: true
      ✔ should throw given invalid android notification: true
      ✔ should throw given invalid apns config: true
      ✔ should throw given invalid webpush config: true
      ✔ should throw given invalid data: true
      ✔ should throw given invalid fcmOptions: true
      ✔ should throw given invalid AndroidFcmOptions: true
      ✔ should throw given invalid ApnsFcmOptions: true
      ✔ should throw given invalid android config: false
      ✔ should throw given invalid android notification: false
      ✔ should throw given invalid apns config: false
      ✔ should throw given invalid webpush config: false
      ✔ should throw given invalid data: false
      ✔ should throw given invalid fcmOptions: false
      ✔ should throw given invalid AndroidFcmOptions: false
      ✔ should throw given invalid ApnsFcmOptions: false
      ✔ should throw given invalid android config: ""
      ✔ should throw given invalid android notification: ""
      ✔ should throw given invalid apns config: ""
      ✔ should throw given invalid webpush config: ""
      ✔ should throw given invalid data: ""
      ✔ should throw given invalid fcmOptions: ""
      ✔ should throw given invalid AndroidFcmOptions: ""
      ✔ should throw given invalid ApnsFcmOptions: ""
      ✔ should throw given invalid android config: "string"
      ✔ should throw given invalid android notification: "string"
      ✔ should throw given invalid apns config: "string"
      ✔ should throw given invalid webpush config: "string"
      ✔ should throw given invalid data: "string"
      ✔ should throw given invalid fcmOptions: "string"
      ✔ should throw given invalid AndroidFcmOptions: "string"
      ✔ should throw given invalid ApnsFcmOptions: "string"
      ✔ should throw given invalid URL string for imageUrl
      ✔ should throw given invalid URL string for imageUrl
      ✔ should throw given invalid URL string for imageUrl
      ✔ should throw given invalid URL string for imageUrl
      ✔ should throw given data with non-string value: data
      ✔ should throw given data with non-string value: android.data
      ✔ should throw given data with non-string value: webpush.data
      ✔ should throw given data with non-string value: webpush.headers
      ✔ should throw given data with non-string value: apns.headers
      ✔ should throw given APNS payload with invalid object: null
      ✔ should throw given APNS payload with invalid object: ""
      ✔ should throw given APNS payload with invalid object: "payload"
      ✔ should throw given APNS payload with invalid object: true
      ✔ should throw given APNS payload with invalid object: 1.23
      ✔ should throw given APNS payload with invalid aps object: null
      ✔ should throw given APNS payload with invalid aps object: ""
      ✔ should throw given APNS payload with invalid aps object: "payload"
      ✔ should throw given APNS payload with invalid aps object: true
      ✔ should throw given APNS payload with invalid aps object: 1.23
      ✔ should throw given APNS payload with duplicate fields
      ✔ should throw given APNS payload with invalid aps alert: null
      ✔ should throw given APNS payload with invalid aps alert: []
      ✔ should throw given APNS payload with invalid aps alert: true
      ✔ should throw given APNS payload with invalid aps alert: 1.23
      ✔ should throw given APNS payload with invalid aps sound: ""
      ✔ should throw given APNS payload with invalid aps sound: null
      ✔ should throw given APNS payload with invalid aps sound: []
      ✔ should throw given APNS payload with invalid aps sound: true
      ✔ should throw given APNS payload with invalid aps sound: 1.23
      ✔ should throw given invalid APNS critical sound name: 
      ✔ should throw given invalid APNS critical sound name: null
      ✔ should throw given invalid APNS critical sound name: 
      ✔ should throw given invalid APNS critical sound name: true
      ✔ should throw given invalid APNS critical sound name: 1.23
    Options validation
      ✔ should throw given invalid type for options argument: null
      ✔ should throw given invalid type for options argument: null
      ✔ should throw given invalid type for options argument: 0
      ✔ should throw given invalid type for options argument: 1
      ✔ should throw given invalid type for options argument: true
      ✔ should throw given invalid type for options argument: false
      ✔ should throw given invalid type for options argument: ""
      ✔ should throw given invalid type for options argument: "a"
      ✔ should throw given invalid type for options argument: []
      ✔ should throw given invalid type for options argument: ["a",1]
      ✔ should throw given invalid type for options argument: undefined
      ✔ should be rejected given blacklisted "condition" property
      ✔ should be rejected given blacklisted "data" property
      ✔ should be rejected given blacklisted "notification" property
      ✔ should be rejected given blacklisted "registrationIds" property
      ✔ should be rejected given blacklisted "registration_ids" property
      ✔ should be rejected given blacklisted "to" property
      ✔ should be rejected given non-boolean value for the "dryRun" property
      ✔ should be fulfilled given boolean value for the "dryRun" property
      ✔ should be rejected given non-boolean value for the "dry_run" property
      ✔ should be fulfilled given boolean value for the "dry_run" property
      ✔ should be rejected given non-string value for the "priority" property
      ✔ should be rejected given empty string value for the "priority" property
      ✔ should be fulfilled given string value for the "priority" property
      ✔ should be rejected given non-number value for the "timeToLive" property
      ✔ should be rejected given NaN value for the "timeToLive" property
      ✔ should be fulfilled given number value for the "timeToLive" property
      ✔ should be rejected given non-number value for the "time_to_live" property
      ✔ should be rejected given NaN value for the "time_to_live" property
      ✔ should be fulfilled given number value for the "time_to_live" property
      ✔ should be rejected given non-string value for the "collapseKey" property
      ✔ should be rejected given empty string value for the "collapseKey" property
      ✔ should be fulfilled given string value for the "collapseKey" property
      ✔ should be rejected given non-string value for the "collapse_key" property
      ✔ should be rejected given empty string value for the "collapse_key" property
      ✔ should be fulfilled given string value for the "collapse_key" property
      ✔ should be rejected given non-boolean value for the "mutableContent" property
      ✔ should be fulfilled given boolean value for the "mutableContent" property
      ✔ should be rejected given non-boolean value for the "mutable_content" property
      ✔ should be fulfilled given boolean value for the "mutable_content" property
      ✔ should be rejected given non-boolean value for the "contentAvailable" property
      ✔ should be fulfilled given boolean value for the "contentAvailable" property
      ✔ should be rejected given non-boolean value for the "content_available" property
      ✔ should be fulfilled given boolean value for the "content_available" property
      ✔ should be rejected given non-string value for the "restrictedPackageName" property
      ✔ should be rejected given empty string value for the "restrictedPackageName" property
      ✔ should be fulfilled given string value for the "restrictedPackageName" property
      ✔ should be rejected given non-string value for the "restricted_package_name" property
      ✔ should be rejected given empty string value for the "restricted_package_name" property
      ✔ should be fulfilled given string value for the "restricted_package_name" property
      ✔ should be fulfilled given an empty options object
      ✔ should be fulfilled given an options object containing only whitelisted properties
      ✔ should be fulfilled given an options object containing non-whitelisted properties
      ✔ should add provided options as top-level properties of the request data
      ✔ should serialize well-formed Message: Generic data message
      ✔ should serialize well-formed Message: Generic notification message
      ✔ should serialize well-formed Message: Generic fcmOptions message
      ✔ should serialize well-formed Message: Android data message
      ✔ should serialize well-formed Message: Android notification message
      ✔ should serialize well-formed Message: Android camel cased properties
      ✔ should serialize well-formed Message: Android TTL
      ✔ should serialize well-formed Message: All Android properties
      ✔ should serialize well-formed Message: Webpush data message
      ✔ should serialize well-formed Message: Webpush notification message
      ✔ should serialize well-formed Message: All Webpush properties
      ✔ should serialize well-formed Message: APNS headers only
      ✔ should serialize well-formed Message: APNS string alert
      ✔ should serialize well-formed Message: All APNS properties
      ✔ should serialize well-formed Message: APNS critical sound
      ✔ should serialize well-formed Message: APNS critical sound name only
      ✔ should serialize well-formed Message: APNS critical sound explicitly false
      ✔ should serialize well-formed Message: APNS contentAvailable explicitly false
      ✔ should serialize well-formed Message: APNS content-available set explicitly
      ✔ should serialize well-formed Message: APNS mutableContent explicitly false
      ✔ should serialize well-formed Message: APNS custom fields
      ✔ should not throw when the message is addressed to the prefixed topic name
      ✔ should convert whitelisted camelCased properties to underscore_cased properties
      ✔ should give whitelisted camelCased properties higher precedence than underscore_cased properties
      ✔ should not mutate the provided options object
    subscribeToTopic()
      ✔ should throw given invalid type for registration token(s) argument: null
      ✔ should throw given invalid type for registration token(s) argument: null
      ✔ should throw given invalid type for registration token(s) argument: 0
      ✔ should throw given invalid type for registration token(s) argument: 1
      ✔ should throw given invalid type for registration token(s) argument: true
      ✔ should throw given invalid type for registration token(s) argument: false
      ✔ should throw given invalid type for registration token(s) argument: {}
      ✔ should throw given invalid type for registration token(s) argument: {"a":1}
      ✔ should throw given invalid type for registration token(s) argument: undefined
      ✔ should throw given no registration token(s) argument
      ✔ should throw given empty string for registration token(s) argument
      ✔ should throw given empty array for registration token(s) argument
      ✔ should be rejected given empty string within array for registration token(s) argument
      ✔ should be rejected given non-string value within array for registration token(s) argument
      ✔ should be rejected given an array containing more than 1,000 registration tokens
      ✔ should throw given invalid type for topic argument: null
      ✔ should throw given invalid type for topic argument: null
      ✔ should throw given invalid type for topic argument: 0
      ✔ should throw given invalid type for topic argument: 1
      ✔ should throw given invalid type for topic argument: true
      ✔ should throw given invalid type for topic argument: false
      ✔ should throw given invalid type for topic argument: []
      ✔ should throw given invalid type for topic argument: ["a",1]
      ✔ should throw given invalid type for topic argument: {}
      ✔ should throw given invalid type for topic argument: {"a":1}
      ✔ should throw given invalid type for topic argument: undefined
      ✔ should throw given no topic argument
      ✔ should throw given empty string for topic argument
      ✔ should be rejected given topic argument which has invalid characters: f*o*o
      ✔ should be rejected given topic argument which has invalid characters: /topics/f+o+o
      ✔ should be rejected given topic argument which has invalid characters: foo/topics/foo
      ✔ should be rejected given topic argument which has invalid characters: $foo
      ✔ should be rejected given topic argument which has invalid characters: /topics/foo&
      ✔ should be rejected given a 200 JSON server response with a known error
      ✔ should be rejected given a 200 JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response
      ✔ should be rejected given a non-2xx JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response without an error
      ✔ should be rejected given a 200 text server response
      ✔ should be rejected given a 400 text server response
      ✔ should be rejected given a 401 text server response
      ✔ should be rejected given a 403 text server response
      ✔ should be rejected given a 404 text server response
      ✔ should be rejected given a 500 text server response
      ✔ should be rejected given a 503 text server response
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should be fulfilled given a valid registration token and topic (topic name not prefixed with "/topics/")
      ✔ should be fulfilled given a valid registration token and topic (topic name prefixed with "/topics/")
      ✔ should be fulfilled given a valid array of registration tokens and topic (topic name not prefixed with "/topics/")
      ✔ should be fulfilled given a valid array of registration tokens and topic (topic name prefixed with "/topics/")
      ✔ should be fulfilled with the server response given a single registration token and topic (topic name not prefixed with "/topics/")
      ✔ should be fulfilled with the server response given a single registration token and topic (topic name prefixed with "/topics/")
      ✔ should be fulfilled with the server response given an array of registration tokens and topic (topic name not prefixed with "/topics/")
      ✔ should be fulfilled with the server response given an array of registration tokens and topic (topic name prefixed with "/topics/")
      ✔ should set the appropriate request data given a single registration token and topic (topic name not prefixed with "/topics/")
      ✔ should set the appropriate request data given a single registration token and topic (topic name prefixed with "/topics/")
      ✔ should set the appropriate request data given an array of registration tokens and topic (topic name not prefixed with "/topics/")
      ✔ should set the appropriate request data given an array of registration tokens and topic (topic name prefixed with "/topics/")
    unsubscribeFromTopic()
      ✔ should throw given invalid type for registration token(s) argument: null
      ✔ should throw given invalid type for registration token(s) argument: null
      ✔ should throw given invalid type for registration token(s) argument: 0
      ✔ should throw given invalid type for registration token(s) argument: 1
      ✔ should throw given invalid type for registration token(s) argument: true
      ✔ should throw given invalid type for registration token(s) argument: false
      ✔ should throw given invalid type for registration token(s) argument: {}
      ✔ should throw given invalid type for registration token(s) argument: {"a":1}
      ✔ should throw given invalid type for registration token(s) argument: undefined
      ✔ should throw given no registration token(s) argument
      ✔ should throw given empty string for registration token(s) argument
      ✔ should throw given empty array for registration token(s) argument
      ✔ should be rejected given empty string within array for registration token(s) argument
      ✔ should be rejected given non-string value within array for registration token(s) argument
      ✔ should be rejected given an array containing more than 1,000 registration tokens
      ✔ should throw given invalid type for topic argument: null
      ✔ should throw given invalid type for topic argument: null
      ✔ should throw given invalid type for topic argument: 0
      ✔ should throw given invalid type for topic argument: 1
      ✔ should throw given invalid type for topic argument: true
      ✔ should throw given invalid type for topic argument: false
      ✔ should throw given invalid type for topic argument: []
      ✔ should throw given invalid type for topic argument: ["a",1]
      ✔ should throw given invalid type for topic argument: {}
      ✔ should throw given invalid type for topic argument: {"a":1}
      ✔ should throw given invalid type for topic argument: undefined
      ✔ should throw given no topic argument
      ✔ should throw given empty string for topic argument
      ✔ should be rejected given topic argument which has invalid characters: f*o*o
      ✔ should be rejected given topic argument which has invalid characters: /topics/f+o+o
      ✔ should be rejected given topic argument which has invalid characters: foo/topics/foo
      ✔ should be rejected given topic argument which has invalid characters: $foo
      ✔ should be rejected given topic argument which has invalid characters: /topics/foo&
      ✔ should be rejected given a 200 JSON server response with a known error
      ✔ should be rejected given a 200 JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response
      ✔ should be rejected given a non-2xx JSON server response with an unknown error
      ✔ should be rejected given a non-2xx JSON server response without an error
      ✔ should be rejected given a 200 text server response
      ✔ should be rejected given a 400 text server response
      ✔ should be rejected given a 401 text server response
      ✔ should be rejected given a 403 text server response
      ✔ should be rejected given a 404 text server response
      ✔ should be rejected given a 500 text server response
      ✔ should be rejected given a 503 text server response
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should be fulfilled given a valid registration token and topic (topic name not prefixed with "/topics/")
      ✔ should be fulfilled given a valid registration token and topic (topic name prefixed with "/topics/")
      ✔ should be fulfilled given a valid array of registration tokens and topic (topic name not prefixed with "/topics/")
      ✔ should be fulfilled given a valid array of registration tokens and topic (topic name prefixed with "/topics/")
      ✔ should be fulfilled with the server response given a single registration token and topic (topic name not prefixed with "/topics/")
      ✔ should be fulfilled with the server response given a single registration token and topic (topic name prefixed with "/topics/")
      ✔ should be fulfilled with the server response given an array of registration tokens and topic (topic name not prefixed with "/topics/")
      ✔ should be fulfilled with the server response given an array of registration tokens and topic (topic name prefixed with "/topics/")
      ✔ should set the appropriate request data given a single registration token and topic (topic name not prefixed with "/topics/")
      ✔ should set the appropriate request data given a single registration token and topic (topic name prefixed with "/topics/")
      ✔ should set the appropriate request data given an array of registration tokens and topic (topic name not prefixed with "/topics/")
      ✔ should set the appropriate request data given an array of registration tokens and topic (topic name prefixed with "/topics/")

  BatchRequestClient
    ✔ should serialize a batch with a single request
    ✔ should serialize a batch with multiple requests
    ✔ should handle both success and failure HTTP responses in a batch
    ✔ should reject on top-level HTTP error responses
    ✔ should add common headers to the parent and sub requests in a batch
    ✔ should add sub request headers to the payload
    ✔ sub request headers should get precedence

  MachineLearning
    getMachineLearning()
      ✔ should throw when default app is not available
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance

  MachineLearning
    Constructor
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given no app
STORAGE OPTIONS {
  credential: MockCredential {},
  databaseURL: 'https://databaseName.firebaseio.com'
}
      ✔ should throw given invalid credential
      ✔ should not throw given a valid app
    app
      ✔ returns the app from the constructor
    Model
      ✔ should successfully construct a model
      ✔ should accept unknown fields gracefully
      ✔ should successfully serialize a model to JSON
      ✔ should return locked when active operations are present
      ✔ should return locked as false when no active operations are present
      ✔ should successfully update a model from a Response
    getModel
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain a name
      ✔ should reject when API response does not contain a createTime
      ✔ should reject when API response does not contain a updateTime
      ✔ should reject when API response does not contain a displayName
      ✔ should reject when API response does not contain an etag
      ✔ should resolve with Model on success
    listModels
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should resolve with Models on success
    deleteModel
      ✔ should propagate API errors
      ✔ should resolve on success
    createModel
      ✔ should propagate API errors
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain a name
      ✔ should reject when API response does not contain a createTime
      ✔ should reject when API response does not contain a updateTime
      ✔ should reject when API response does not contain a displayName
      ✔ should reject when API response does not contain an etag
      ✔ should resolve with Model on success
      ✔ should resolve with Error on operation error
    updateModel
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain a name
      ✔ should reject when API response does not contain a createTime
      ✔ should reject when API response does not contain a updateTime
      ✔ should reject when API response does not contain a displayName
      ✔ should reject when API response does not contain an etag
      ✔ should resolve with Model on success
      ✔ should resolve with Error on operation error
    publishModel
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain a name
      ✔ should reject when API response does not contain a createTime
      ✔ should reject when API response does not contain a updateTime
      ✔ should reject when API response does not contain a displayName
      ✔ should reject when API response does not contain an etag
      ✔ should resolve with Model on success
      ✔ should resolve with Error on operation error
    unpublishModel
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain a name
      ✔ should reject when API response does not contain a createTime
      ✔ should reject when API response does not contain a updateTime
      ✔ should reject when API response does not contain a displayName
      ✔ should reject when API response does not contain an etag
      ✔ should resolve with Model on success
      ✔ should resolve with Error on operation error

  MachineLearningApiClient
    Constructor
      ✔ should throw when the app is null
    createModel
      ✔ should reject when called with: null
      ✔ should reject when called with: undefined
      ✔ should reject when called with: {}
      ✔ should reject when called with: {"tags":[]}
      ✔ should reject when project id is not available
      ✔ should throw when an error response is received
      ✔ should resolve with the created resource on success
      ✔ should accept TFLite GCS options
      ✔ should accept AutoML options
      ✔ should resolve with error when the operation fails
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject with when failed with a FirebaseAppError
    updateModel
      ✔ should reject when called with: null
      ✔ should reject when called with: undefined
      ✔ should reject when called with empty mask
      ✔ should reject when project id is not available
      ✔ should throw when an error response is received
      ✔ should resolve with the updated resource on success
      ✔ should resolve with the updated GCS resource on success
      ✔ should resolve with the updated AutoML resource on success
      ✔ should resolve with error when the operation fails
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject with when failed with a FirebaseAppError
    getModel
      ✔ should reject when called with: null
      ✔ should reject when called with: undefined
      ✔ should reject when called with: ""
      ✔ should reject when called with: 1
      ✔ should reject when called with: true
      ✔ should reject when called with: {}
      ✔ should reject when called with: []
      ✔ should reject when called with prefixed name
      ✔ should reject when project id is not available
      ✔ should resolve with the requested model on success
      ✔ should reject when a full platform error response is received
      ✔ should reject unknown-error when error code is not present
      ✔ should reject unknown-error for non-json response
      ✔ should reject when failed with a FirebaseAppError
    getOperation
      ✔ should resolve with the requested operation on success
      ✔ should reject when a full platform error response is received
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject when failed with a FirebaseAppError
    handleOperation
      ✔ handles a done operation with result
      ✔ handles a done operation with error
      ✔ handles a running operation with no wait
      ✔ handles a running operation with wait
      ✔ handles a running operation with wait ending in error
      ✔ handles a running operation with wait ending in timeout (1001ms)
    listModels
      ✔ should reject when called with invalid pageToken: null
      ✔ should reject when called with invalid pageToken: 0
      ✔ should reject when called with invalid pageToken: ""
      ✔ should reject when called with invalid pageToken: true
      ✔ should reject when called with invalid pageToken: {}
      ✔ should reject when called with invalid pageToken: []
      ✔ should reject when called with invalid page size: null
      ✔ should reject when called with invalid page size: ""
      ✔ should reject when called with invalid page size: "10"
      ✔ should reject when called with invalid page size: true
      ✔ should reject when called with invalid page size: {}
      ✔ should reject when called with invalid page size: []
      ✔ should reject when called with invalid page size: -1
      ✔ should reject when called with invalid page size: 0
      ✔ should reject when called with invalid page size: 101
      ✔ should reject when called with invalid pageToken: null
      ✔ should reject when called with invalid pageToken: 0
      ✔ should reject when called with invalid pageToken: ""
      ✔ should reject when called with invalid pageToken: true
      ✔ should reject when called with invalid pageToken: {}
      ✔ should reject when called with invalid pageToken: []
      ✔ should resolve on success when called without any arguments
      ✔ should resolve on success when called with options: {"pageSize":5}
      ✔ should resolve on success when called with options: {"pageToken":"next"}
      ✔ should resolve on success when called with options: {"filter":"displayName=name1"}
      ✔ should resolve on success when called with options: {"filter":"displayName=name1","pageSize":5,"pageToken":"next"}
      ✔ should throw when a full platform error response is received
      ✔ should throw unknown-error when error code is not present
      ✔ should throw unknown-error for non-json response
      ✔ should throw when rejected with a FirebaseAppError
    deleteModel
      ✔ should reject when called with: null
      ✔ should reject when called with: undefined
      ✔ should reject when called with: ""
      ✔ should reject when called with: 1
      ✔ should reject when called with: true
      ✔ should reject when called with: {}
      ✔ should reject when called with: []
      ✔ should reject when called with prefixed name
      ✔ should reject when project id is not available
      ✔ should resolve on success
      ✔ should reject when a full platform error response is received
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject when failed with a FirebaseAppError

  Storage
    Constructor
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      1) should throw given invalid app: null
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: null
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: 0
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: 1
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: true
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: false
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: ""
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: "a"
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: []
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: [1,"a"]
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: {}
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: {"a":1}
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS undefined
      ✔ should throw given invalid app: undefined
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      2) should throw given no app
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS {
  credential: MockCredential {},
  databaseURL: 'https://databaseName.firebaseio.com'
}
      ✔ should throw given invalid credential
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should not throw given a valid app
    app
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ returns the app from the constructor
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ is read-only
    bucket(invalid)
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: null
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: null
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: 0
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: 1
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: true
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: false
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: ""
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: []
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: [1,"a"]
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: {}
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: {"a":1}
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should throw given invalid bucket name: undefined
    bucket()
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should return a bucket object
    bucket(valid)
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should return a bucket object
    Emulator mode
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ sets STORAGE_EMULATOR_HOST if FIREBASE_STORAGE_EMULATOR_HOST is set
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ throws if FIREBASE_STORAGE_EMULATOR_HOST has a protocol

  Storage
    getStorage()
      ✔ should throw when default app is not available
STORAGE OPTIONS {
  credential: MockCredential {},
  databaseURL: 'https://databaseName.firebaseio.com'
}
      ✔ should reject given an invalid credential without project ID
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should not throw given a valid app
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
      ✔ should return the same instance for a given app instance
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
GaxiosError: invalid_grant: Invalid grant: account not found
    at Gaxios._request (/Users/mtewani/source/firebase-admin-node/node_modules/gaxios/src/gaxios.ts:158:15)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async GoogleToken.requestToken (/Users/mtewani/source/firebase-admin-node/node_modules/gtoken/build/src/index.js:238:23)
    at async GoogleToken.getTokenAsync (/Users/mtewani/source/firebase-admin-node/node_modules/gtoken/build/src/index.js:145:20)
    at async JWT.refreshTokenNoCache (/Users/mtewani/source/firebase-admin-node/node_modules/google-auth-library/build/src/auth/jwtclient.js:172:23)
    at async JWT.getRequestMetadataAsync (/Users/mtewani/source/firebase-admin-node/node_modules/google-auth-library/build/src/auth/oauth2client.js:298:17)
    at async JWT.getRequestHeaders (/Users/mtewani/source/firebase-admin-node/node_modules/google-auth-library/build/src/auth/oauth2client.js:261:26)
    at async GoogleAuth.authorizeRequest (/Users/mtewani/source/firebase-admin-node/node_modules/google-auth-library/build/src/auth/googleauth.js:677:25)
    at async Promise.all (index 1)
    at async prepareRequest (/Users/mtewani/source/firebase-admin-node/node_modules/@google-cloud/storage/build/src/nodejs-common/util.js:447:61) {
  response: {
    config: {
      method: 'POST',
      url: 'https://www.googleapis.com/oauth2/v4/token',
      data: [Object],
      headers: [Object],
      responseType: 'json',
      paramsSerializer: [Function: paramsSerializer],
      body: 'grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJmb29AcHJvamVjdF9pZC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsInNjb3BlIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9pYW0gaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybSBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RldnN0b3JhZ2UuZnVsbF9jb250cm9sIiwiYXVkIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuIiwiZXhwIjoxNjgxMjUzNDAzLCJpYXQiOjE2ODEyNDk4MDN9.ULYHUsRs1vztvTOR7hlNzCfjx2drOJ8lVvjFXmkUYF2HZBzawtKxuIFtgQpkUaFUPs-KH8wmCtLTrmtSbGGUAlGaGKxcJgmHxF98PJF_duqS6ER0W0X0THsWkrBLuQJ3na2Trx-6_QIWF0uU_cKyAcaWG66vQ8Vvppj5NnzltbUN4_QL0sU06qCOjcqMYdKnet1tQA70APmGK9PigoytI51aHqTxnGAc8SVt_KwBB6UExtHTikX99MTPAzld_UGmKQvg_FqacsKpVDtZu51e755ja-eTtmQ_DLX0GceG2fDotE5hGK3Yd_3ZMFT4iEn58ymKxr8haKMLdzTwncGfmA',
      validateStatus: [Function: validateStatus]
    },
    data: {
      error: 'invalid_grant',
      error_description: 'Invalid grant: account not found'
    },
    headers: {
      'alt-svc': 'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000',
      'cache-control': 'private',
      connection: 'close',
      'content-encoding': 'gzip',
      'content-type': 'application/json; charset=UTF-8',
      date: 'Tue, 11 Apr 2023 21:50:03 GMT',
      server: 'scaffolding on HTTPServer2',
      'transfer-encoding': 'chunked',
      vary: 'Origin, X-Origin, Referer',
      'x-content-type-options': 'nosniff',
      'x-frame-options': 'SAMEORIGIN',
      'x-google-backends': '[::1]:14001,/bns/dz/borg/dz/bns/identity-oauth2-proxy/prod.identity-oauth2-proxy/20,/bns/ncsfoa/borg/ncsfoa/bns/gfe-prod/blue-layer1-gfe.sfo03s24/117',
      'x-google-dos-service-trace': 'main:google-identity-oauth2-oauth2proxyservice-prod',
      'x-google-esf-cloud-client-params': 'backend_service_name: "oauth2.googleapis.com" backend_fully_qualified_method: "google.identity.oauth2.OAuth2Service.GetToken"',
      'x-google-gfe-handshake-trace': 'GFE: /bns/ncsfoa/borg/ncsfoa/bns/gfe-prod/blue-layer1-gfe.sfo03s24/117,Mentat oracle: [2002:a05:7300:b815::]:9828',
      'x-google-gfe-request-trace': 'acsfoe5:443,/bns/dz/borg/dz/bns/identity-oauth2-proxy/prod.identity-oauth2-proxy/20,acsfoe5:443',
      'x-google-gfe-response-body-transformations': 'chunked',
      'x-google-gfe-response-code-details-trace': 'response_code_set_by_backend',
      'x-google-gfe-service-trace': 'google-identity-oauth2-oauth2proxyservice-prod',
      'x-google-gfe-version': '2.819.1',
      'x-google-netmon-label': '/bns/dz/borg/dz/bns/identity-oauth2-proxy/prod.identity-oauth2-proxy/20',
      'x-google-security-signals': 'FRAMEWORK=HTTPSERVER2,BUILD=GOOGLE3,BUILD_DEBUG=cl:517092348',
      'x-google-service': 'google-identity-oauth2-oauth2proxyservice-prod',
      'x-google-session-info': 'GgQYECgLIAE6FxIVb2F1dGgyLmdvb2dsZWFwaXMuY29t',
      'x-google-shellfish-status': 'CA0gBEBG',
      'x-xss-protection': '0'
    },
    status: 400,
    statusText: 'Bad Request',
    request: { responseURL: 'https://www.googleapis.com/oauth2/v4/token' }
  },
  config: {
    method: 'POST',
    url: 'https://www.googleapis.com/oauth2/v4/token',
    data: {
      grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
      assertion: 'eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJmb29AcHJvamVjdF9pZC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsInNjb3BlIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9pYW0gaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybSBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RldnN0b3JhZ2UuZnVsbF9jb250cm9sIiwiYXVkIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuIiwiZXhwIjoxNjgxMjUzNDAzLCJpYXQiOjE2ODEyNDk4MDN9.ULYHUsRs1vztvTOR7hlNzCfjx2drOJ8lVvjFXmkUYF2HZBzawtKxuIFtgQpkUaFUPs-KH8wmCtLTrmtSbGGUAlGaGKxcJgmHxF98PJF_duqS6ER0W0X0THsWkrBLuQJ3na2Trx-6_QIWF0uU_cKyAcaWG66vQ8Vvppj5NnzltbUN4_QL0sU06qCOjcqMYdKnet1tQA70APmGK9PigoytI51aHqTxnGAc8SVt_KwBB6UExtHTikX99MTPAzld_UGmKQvg_FqacsKpVDtZu51e755ja-eTtmQ_DLX0GceG2fDotE5hGK3Yd_3ZMFT4iEn58ymKxr8haKMLdzTwncGfmA'
    },
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'User-Agent': 'google-api-nodejs-client/8.5.2',
      'x-goog-api-client': 'gl-node/16.14.0 auth/8.5.2',
      Accept: 'application/json'
    },
    responseType: 'json',
    paramsSerializer: [Function: paramsSerializer],
    body: 'grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJmb29AcHJvamVjdF9pZC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsInNjb3BlIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9pYW0gaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybSBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RldnN0b3JhZ2UuZnVsbF9jb250cm9sIiwiYXVkIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuIiwiZXhwIjoxNjgxMjUzNDAzLCJpYXQiOjE2ODEyNDk4MDN9.ULYHUsRs1vztvTOR7hlNzCfjx2drOJ8lVvjFXmkUYF2HZBzawtKxuIFtgQpkUaFUPs-KH8wmCtLTrmtSbGGUAlGaGKxcJgmHxF98PJF_duqS6ER0W0X0THsWkrBLuQJ3na2Trx-6_QIWF0uU_cKyAcaWG66vQ8Vvppj5NnzltbUN4_QL0sU06qCOjcqMYdKnet1tQA70APmGK9PigoytI51aHqTxnGAc8SVt_KwBB6UExtHTikX99MTPAzld_UGmKQvg_FqacsKpVDtZu51e755ja-eTtmQ_DLX0GceG2fDotE5hGK3Yd_3ZMFT4iEn58ymKxr8haKMLdzTwncGfmA',
    validateStatus: [Function: validateStatus]
  },
  code: '400'
}
tokens true
      3) should return an error when no metadata
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
GaxiosError: invalid_grant: Invalid grant: account not found
    at Gaxios._request (/Users/mtewani/source/firebase-admin-node/node_modules/gaxios/src/gaxios.ts:158:15)
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)
    at async GoogleToken.requestToken (/Users/mtewani/source/firebase-admin-node/node_modules/gtoken/build/src/index.js:238:23)
    at async GoogleToken.getTokenAsync (/Users/mtewani/source/firebase-admin-node/node_modules/gtoken/build/src/index.js:145:20)
    at async JWT.refreshTokenNoCache (/Users/mtewani/source/firebase-admin-node/node_modules/google-auth-library/build/src/auth/jwtclient.js:172:23)
    at async JWT.getRequestMetadataAsync (/Users/mtewani/source/firebase-admin-node/node_modules/google-auth-library/build/src/auth/oauth2client.js:298:17)
    at async JWT.getRequestHeaders (/Users/mtewani/source/firebase-admin-node/node_modules/google-auth-library/build/src/auth/oauth2client.js:261:26)
    at async GoogleAuth.authorizeRequest (/Users/mtewani/source/firebase-admin-node/node_modules/google-auth-library/build/src/auth/googleauth.js:677:25)
    at async Promise.all (index 1)
    at async prepareRequest (/Users/mtewani/source/firebase-admin-node/node_modules/@google-cloud/storage/build/src/nodejs-common/util.js:447:61) {
  response: {
    config: {
      method: 'POST',
      url: 'https://www.googleapis.com/oauth2/v4/token',
      data: [Object],
      headers: [Object],
      responseType: 'json',
      paramsSerializer: [Function: paramsSerializer],
      body: 'grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJmb29AcHJvamVjdF9pZC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsInNjb3BlIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9pYW0gaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybSBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RldnN0b3JhZ2UuZnVsbF9jb250cm9sIiwiYXVkIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuIiwiZXhwIjoxNjgxMjUzNDAzLCJpYXQiOjE2ODEyNDk4MDN9.ULYHUsRs1vztvTOR7hlNzCfjx2drOJ8lVvjFXmkUYF2HZBzawtKxuIFtgQpkUaFUPs-KH8wmCtLTrmtSbGGUAlGaGKxcJgmHxF98PJF_duqS6ER0W0X0THsWkrBLuQJ3na2Trx-6_QIWF0uU_cKyAcaWG66vQ8Vvppj5NnzltbUN4_QL0sU06qCOjcqMYdKnet1tQA70APmGK9PigoytI51aHqTxnGAc8SVt_KwBB6UExtHTikX99MTPAzld_UGmKQvg_FqacsKpVDtZu51e755ja-eTtmQ_DLX0GceG2fDotE5hGK3Yd_3ZMFT4iEn58ymKxr8haKMLdzTwncGfmA',
      validateStatus: [Function: validateStatus]
    },
    data: {
      error: 'invalid_grant',
      error_description: 'Invalid grant: account not found'
    },
    headers: {
      'alt-svc': 'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000',
      'cache-control': 'private',
      connection: 'close',
      'content-encoding': 'gzip',
      'content-type': 'application/json; charset=UTF-8',
      date: 'Tue, 11 Apr 2023 21:50:03 GMT',
      server: 'scaffolding on HTTPServer2',
      'transfer-encoding': 'chunked',
      vary: 'Origin, X-Origin, Referer',
      'x-content-type-options': 'nosniff',
      'x-frame-options': 'SAMEORIGIN',
      'x-google-backends': '[::1]:14001,/bns/dz/borg/dz/bns/identity-oauth2-proxy/prod.identity-oauth2-proxy/20,/bns/ncsfoa/borg/ncsfoa/bns/gfe-prod/blue-layer1-gfe.sfo03s24/19',
      'x-google-dos-service-trace': 'main:google-identity-oauth2-oauth2proxyservice-prod',
      'x-google-esf-cloud-client-params': 'backend_service_name: "oauth2.googleapis.com" backend_fully_qualified_method: "google.identity.oauth2.OAuth2Service.GetToken"',
      'x-google-gfe-handshake-trace': 'GFE: /bns/ncsfoa/borg/ncsfoa/bns/gfe-prod/blue-layer1-gfe.sfo03s24/19',
      'x-google-gfe-request-trace': 'acsfoe4:443,/bns/dz/borg/dz/bns/identity-oauth2-proxy/prod.identity-oauth2-proxy/20,acsfoe4:443',
      'x-google-gfe-response-body-transformations': 'chunked',
      'x-google-gfe-response-code-details-trace': 'response_code_set_by_backend',
      'x-google-gfe-service-trace': 'google-identity-oauth2-oauth2proxyservice-prod',
      'x-google-gfe-version': '2.819.1',
      'x-google-netmon-label': '/bns/dz/borg/dz/bns/identity-oauth2-proxy/prod.identity-oauth2-proxy/20',
      'x-google-security-signals': 'FRAMEWORK=HTTPSERVER2,BUILD=GOOGLE3,BUILD_DEBUG=cl:517092348',
      'x-google-service': 'google-identity-oauth2-oauth2proxyservice-prod',
      'x-google-session-info': 'GgQYECgLIAE6FxIVb2F1dGgyLmdvb2dsZWFwaXMuY29t',
      'x-google-shellfish-status': 'CA0gBEBG',
      'x-xss-protection': '0'
    },
    status: 400,
    statusText: 'Bad Request',
    request: { responseURL: 'https://www.googleapis.com/oauth2/v4/token' }
  },
  config: {
    method: 'POST',
    url: 'https://www.googleapis.com/oauth2/v4/token',
    data: {
      grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
      assertion: 'eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJmb29AcHJvamVjdF9pZC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsInNjb3BlIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9pYW0gaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybSBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RldnN0b3JhZ2UuZnVsbF9jb250cm9sIiwiYXVkIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuIiwiZXhwIjoxNjgxMjUzNDAzLCJpYXQiOjE2ODEyNDk4MDN9.ULYHUsRs1vztvTOR7hlNzCfjx2drOJ8lVvjFXmkUYF2HZBzawtKxuIFtgQpkUaFUPs-KH8wmCtLTrmtSbGGUAlGaGKxcJgmHxF98PJF_duqS6ER0W0X0THsWkrBLuQJ3na2Trx-6_QIWF0uU_cKyAcaWG66vQ8Vvppj5NnzltbUN4_QL0sU06qCOjcqMYdKnet1tQA70APmGK9PigoytI51aHqTxnGAc8SVt_KwBB6UExtHTikX99MTPAzld_UGmKQvg_FqacsKpVDtZu51e755ja-eTtmQ_DLX0GceG2fDotE5hGK3Yd_3ZMFT4iEn58ymKxr8haKMLdzTwncGfmA'
    },
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'User-Agent': 'google-api-nodejs-client/8.5.2',
      'x-goog-api-client': 'gl-node/16.14.0 auth/8.5.2',
      Accept: 'application/json'
    },
    responseType: 'json',
    paramsSerializer: [Function: paramsSerializer],
    body: 'grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJmb29AcHJvamVjdF9pZC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsInNjb3BlIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9pYW0gaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybSBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RldnN0b3JhZ2UuZnVsbF9jb250cm9sIiwiYXVkIjoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuIiwiZXhwIjoxNjgxMjUzNDAzLCJpYXQiOjE2ODEyNDk4MDN9.ULYHUsRs1vztvTOR7hlNzCfjx2drOJ8lVvjFXmkUYF2HZBzawtKxuIFtgQpkUaFUPs-KH8wmCtLTrmtSbGGUAlGaGKxcJgmHxF98PJF_duqS6ER0W0X0THsWkrBLuQJ3na2Trx-6_QIWF0uU_cKyAcaWG66vQ8Vvppj5NnzltbUN4_QL0sU06qCOjcqMYdKnet1tQA70APmGK9PigoytI51aHqTxnGAc8SVt_KwBB6UExtHTikX99MTPAzld_UGmKQvg_FqacsKpVDtZu51e755ja-eTtmQ_DLX0GceG2fDotE5hGK3Yd_3ZMFT4iEn58ymKxr8haKMLdzTwncGfmA',
    validateStatus: [Function: validateStatus]
  },
  code: '400'
}
tokens true
      4) should return the proper download url when metadata is available
STORAGE OPTIONS {
  credential: ServiceAccountCredential {
    httpAgent: undefined,
    implicit: false,
    projectId: 'project_id',
    privateKey: '-----BEGIN RSA PRIVATE KEY-----\n' +
      'MIIEpAIBAAKCAQEAwJENcRev+eXZKvhhWLiV3Lz2MvO+naQRHo59g3vaNQnbgyduN/L4krlr\n' +
      'J5c6FiikXdtJNb/QrsAHSyJWCu8j3T9CruiwbidGAk2W0RuViTVspjHUTsIHExx9euWM0Uom\n' +
      'GvYkoqXahdhPL/zViVSJt+Rt8bHLsMvpb8RquTIb9iKY3SMV2tCofNmyCSgVbghq/y7lKORt\n' +
      'V/IRguWs6R22fbkb0r2MCYoNAbZ9dqnbRIFNZBC7itYtUoTEresRWcyFMh0zfAIJycWOJlVL\n' +
      'DLqkY2SmIx8u7fuysCg1wcoSZoStuDq02nZEMw1dx8HGzE0hynpHlloRLByuIuOAfMCCYwID\n' +
      'AQABAoIBADFtihu7TspAO0wSUTpqttzgC/nsIsNn95T2UjVLtyjiDNxPZLUrwq42tdCFur0x\n' +
      'VW9Z+CK5x6DzXWvltlw8IeKKeF1ZEOBVaFzy+YFXKTz835SROcO1fgdjyrme7lRSShGlmKW/\n' +
      'GKY+baUNquoDLw5qreXaE0SgMp0jt5ktyYuVxvhLDeV4omw2u6waoGkifsGm8lYivg5l3VR7\n' +
      'w2IVOvYZTt4BuSYVwOM+qjwaS1vtL7gv0SUjrj85Ja6zERRdFiITDhZw6nsvacr9/+/aut9E\n' +
      'aL/koSSb62g5fntQMEwoT4hRnjPnAedmorM9Rhddh2TB3ZKTBbMN1tUk3fJxOuECgYEA+z6l\n' +
      'eSaAcZ3qvwpntcXSpwwJ0SSmzLTH2RJNf+Ld3eBHiSvLTG53dWB7lJtF4R1KcIwf+KGcOFJv\n' +
      'snepzcZBylRvT8RrAAkV0s9OiVm1lXZyaepbLg4GGFJBPi8A6VIAj7zYknToRApdW0s1x/XX\n' +
      'ChewfJDckqsevTMovdbg8YkCgYEAxDYX+3mfvv/opo6HNNY3SfVunM+4vVJL+n8gWZ2w9kz3\n' +
      'Q9Ub9YbRmI7iQaiVkO5xNuoG1n9bM+3Mnm84aQ1YeNT01YqeyQsipP5Wi+um0PzYTaBw9RO+\n' +
      '8Gh6992OwlJiRtFk5WjalNWOxY4MU0ImnJwIfKQlUODvLmcixm68NYsCgYEAuAqI3jkk55Vd\n' +
      'KvotREsX5wP7gPePM+7NYiZ1HNQL4Ab1f/bTojZdTV8Sx6YCR0fUiqMqnE+OBvfkGGBtw22S\n' +
      'Lesx6sWf99Ov58+x4Q0U5dpxL0Lb7d2Z+2Dtp+Z4jXFjNeeI4ae/qG/LOR/b0pE0J5F415ap\n' +
      '7Mpq5v89vepUtrkCgYAjMXytu4v+q1Ikhc4UmRPDrUUQ1WVSd+9u19yKlnFGTFnRjej86hiw\n' +
      'H3jPxBhHra0a53EgiilmsBGSnWpl1WH4EmJz5vBCKUAmjgQiBrueIqv9iHiaTNdjsanUyaWw\n' +
      'jyxXfXl2eI80QPXh02+8g1H/pzESgjK7Rg1AqnkfVH9nrwKBgQDJVxKBPTw9pigYMVt9iHrR\n' +
      'iCl9zQVjRMbWiPOc0J56+/5FZYm/AOGl9rfhQ9vGxXZYZiOP5FsNkwt05Y1UoAAH4B4VQwbL\n' +
      'qod71qOcI0ywgZiIR87CYw40gzRfjWnN+YEEW1qfyoNLilEwJB8iB/T+ZePHGmJ4MmQ/cTn9\n' +
      'xpdLXA==\n' +
      '-----END RSA PRIVATE KEY-----\n',
    clientEmail: 'foo@project_id.iam.gserviceaccount.com',
    httpClient: HttpClient { retry: [Object] }
  },
  databaseURL: 'https://databaseName.firebaseio.com',
  storageBucket: 'bucketName.appspot.com'
}
ApiError: A required service account is missing necessary permissions. Please resolve by visiting the Storage page of the Firebase Console and re-linking your Firebase bucket or see this FAQ for more info: https://firebase.google.com/support/faq#storage-accounts. If you recently made changes to your service account, please wait a few minutes for the changes to propagate through our systems and try again.
    at new ApiError (/Users/mtewani/source/firebase-admin-node/node_modules/@google-cloud/storage/build/src/nodejs-common/util.js:79:15)
    at Util.parseHttpRespBody (/Users/mtewani/source/firebase-admin-node/node_modules/@google-cloud/storage/build/src/nodejs-common/util.js:214:38)
    at Util.handleResp (/Users/mtewani/source/firebase-admin-node/node_modules/@google-cloud/storage/build/src/nodejs-common/util.js:155:117)
    at /Users/mtewani/source/firebase-admin-node/node_modules/@google-cloud/storage/build/src/nodejs-common/util.js:536:22
    at onResponse (/Users/mtewani/source/firebase-admin-node/node_modules/retry-request/index.js:240:7)
    at /Users/mtewani/source/firebase-admin-node/node_modules/teeny-request/src/index.ts:333:11
    at runMicrotasks (<anonymous>)
    at processTicksAndRejections (node:internal/process/task_queues:96:5) {
  code: 412,
  errors: undefined,
  response: PassThrough {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      constructed: true,
      sync: false,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      destroyed: true,
      errored: null,
      closed: true,
      closeEmitted: true,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      prefinish: [Function: prefinish],
      error: [Array],
      data: [Function (anonymous)],
      end: [Function (anonymous)]
    },
    _eventsCount: 4,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: true,
      needDrain: false,
      ending: true,
      ended: true,
      finished: true,
      destroyed: true,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: true,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: true,
      closeEmitted: true,
      [Symbol(kOnFinished)]: []
    },
    allowHalfOpen: true,
    statusCode: 412,
    statusMessage: 'Precondition Failed',
    request: {
      agent: [Agent],
      headers: {},
      href: 'https://firebasestorage.googleapis.com/v0/b/mock/o/abc?create_token=true'
    },
    body: '{\n' +
      '  "error": {\n' +
      '    "code": 412,\n' +
      '    "message": "A required service account is missing necessary permissions. Please resolve by visiting the Storage page of the Firebase Console and re-linking your Firebase bucket or see this FAQ for more info: https://firebase.google.com/support/faq#storage-accounts. If you recently made changes to your service account, please wait a few minutes for the changes to propagate through our systems and try again."\n' +
      '  }\n' +
      '}',
    headers: {
      'access-control-allow-origin': '*',
      'access-control-expose-headers': 'Content-Range, X-Firebase-Storage-XSRF',
      'alt-svc': 'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000',
      'content-length': '452',
      'content-type': 'application/json; charset=UTF-8',
      date: 'Tue, 11 Apr 2023 21:50:03 GMT',
      server: 'UploadServer',
      'x-content-type-options': 'nosniff',
      'x-google-backends': '/bns/dl/borg/dl/bns/blobstore2/bitpusher/56.scotty,/bns/ncsfoa/borg/ncsfoa/bns/gfe-prod/blue-layer1-gfe.nuq04s42/104',
      'x-google-dos-service-trace': 'main:blobstore-http-firebase-storage-unified',
      'x-google-gfe-backend-request-info': 'eid=C9Y1ZNu9I52poMAPp7W5oAc',
      'x-google-gfe-handshake-trace': 'GFE: /bns/ncsfoa/borg/ncsfoa/bns/gfe-prod/blue-layer1-gfe.nuq04s42/104,Mentat oracle: [2002:a05:7308:7587::]:9805',
      'x-google-gfe-request-trace': 'acsfoj11:443,/bns/dl/borg/dl/bns/blobstore2/bitpusher/56.scotty,acsfoj11:443',
      'x-google-gfe-response-code-details-trace': 'response_code_set_by_backend',
      'x-google-gfe-service-trace': 'blobstore-http-firebase-storage',
      'x-google-gfe-version': '2.819.1',
      'x-google-netmon-label': '/bns/dl/borg/dl/bns/blobstore2/bitpusher/56:caf3',
      'x-google-security-signals': 'FRAMEWORK=HTTPSERVER2,BUILD=GOOGLE3,BUILD_DEBUG=cl:519567904',
      'x-google-service': 'blobstore-http-firebase-storage',
      'x-google-shellfish-status': 'CA0gBEBG',
      'x-guploader-customer': 'firebase-storage',
      'x-guploader-request-class': 'LATENCY_SENSITIVE',
      'x-guploader-request-result': 'agent_rejected',
      'x-guploader-upload-result': 'agent_rejected',
      'x-guploader-uploadid': 'ADPycdvlPtYSFOfoY8sWIC45xoUQpp_W5o0Ql3fqhm79gZjWsSqUbqCQyMlnuRMeqgNm2JWgU4iAfmGzBtKWB8wLm31lSglSw2xF'
    },
    toJSON: [Function: toJSON],
    [Symbol(kCapture)]: false,
    [Symbol(kCallback)]: null
  }
}
tokens true
      5) should use the emulator host name when process.env is set

  Firestore
    Initializer
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given no app
      ✔ should throw given an invalid credential with project ID
      ✔ should throw given an invalid credential without project ID
      ✔ should not throw given a valid app
      ✔ should not throw given default ComputeEngineCredentials without project ID
      ✔ should not throw given default RefreshTokenCredentials without project ID
    app
      ✔ returns the app from the constructor
      ✔ is read-only
    options.projectId
      ✔ should return a string when project ID is present in credential
      ✔ should return a string when project ID is present in app options
      ✔ should return a string when GOOGLE_CLOUD_PROJECT is set with ComputeEngineCredentials
      ✔ should return a string when GCLOUD_PROJECT is set with ComputeEngineCredentials
      ✔ should return a string when GOOGLE_CLOUD_PROJECT is set with RefreshTokenCredentials
      ✔ should return a string when GCLOUD_PROJECT is set with RefreshTokenCredentials
    options.firebaseVersion
      ✔ should return firebaseVersion when using credential with service account certificate
      ✔ should return firebaseVersion when using default ComputeEngineCredentials
      ✔ should return firebaseVersion when using default RefreshTokenCredentials
    options.preferRest
      ✔ should not enable preferRest by default
      ✔ should enable preferRest if provided

  Firestore
    getFirestore()
      ✔ should throw when default app is not available
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance
      ✔ should return the same instance for a given app instance and databaseId
      ✔ should return the different instance for given same app instance, but different databaseId
    initializeFirestore()
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance
      ✔ should return the same instance for a given app instance and databaseId
      ✔ should return the different instance for given same app instance, but different databaseId
      ✔ getFirestore should return the same instance as initializeFirestore returned earlier
      ✔ initializeFirestore should not allow create an instance with different settings

  Installations
    Constructor
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given no app
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
    app
      ✔ returns the app from the constructor
      ✔ is read-only
    deleteInstallation()
      ✔ should be rejected given no installation ID
      ✔ should be rejected given an invalid installation ID
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve without errors on success
      ✔ should throw an error when the backend returns an error

  FirebaseInstallationsRequestHandler
    Constructor
      ✔ should succeed with a FirebaseApp instance
    deleteInstallation
      ✔ should be fulfilled given a valid installation ID
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 409 errors
      ✔ should throw for unexpected HTTP errors

  InstanceId
    getInstanceId()
      ✔ should throw when default app is not available
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance

  InstanceId
    Constructor
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given no app
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
    app
      ✔ returns the app from the constructor
      ✔ is read-only
    deleteInstanceId()
      ✔ should be rejected given no instance ID
      ✔ should be rejected given an invalid instance ID
      ✔ should be rejected given an app which returns null access tokens
      ✔ should be rejected given an app which returns invalid access tokens
      ✔ should be rejected given an app which fails to generate access tokens
      ✔ should resolve without errors on success
      ✔ should throw a FirebaseInstanceIdError error when the backend returns an error

  ProjectManagement
    getProjectManagement()
      ✔ should throw when default app is not available
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance

  ProjectManagement
    Constructor
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given no app
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
    app
      ✔ returns the app from the constructor
    listAndroidApps
      ✔ should propagate API errors
      ✔ should throw with null API response
      ✔ should return empty array when API response missing "apps" field
      ✔ should throw when API response has non-array "apps" field
      ✔ should throw with API response missing "apps[].appId" field
      ✔ should resolve with list of Android apps on success
    listIosApps
      ✔ should propagate API errors
      ✔ should throw with null API response
      ✔ should return empty array when API response missing "apps" field
      ✔ should throw when API response has non-array "apps" field
      ✔ should throw with API response missing "apps[].appId" field
      ✔ should resolve with list of Ios apps on success
    androidApp
      ✔ should successfully return an AndroidApp
    iosApp
      ✔ should successfully return an IosApp
    shaCertificate
      ✔ should successfully return a ShaCertificate
    createAndroidApp
      ✔ should propagate intial API response errors
      ✔ should throw when initial API response is null
      ✔ should throw when initial API response.appId is undefined
      ✔ should resolve with AndroidApp on success
    createIosApp
      ✔ should propagate intial API response errors
      ✔ should throw when initial API response is null
      ✔ should throw when initial API response.appId is undefined
      ✔ should resolve with IosApp on success
    listAppMetadata
      ✔ should propagate API errors
      ✔ should throw with null API response
      ✔ should return empty array when API response missing "apps" field
      ✔ should throw when API response has non-array "apps" field
      ✔ should throw with API response missing "apps[].appId" field
      ✔ should throw with API response missing "apps[].platform" field
      ✔ should resolve with list of apps metadata on success
      ✔ should resolve with "apps[].platform" to be "PLATFORM_UNKNOWN" for web app
    setDisplayName
      ✔ should propagate API errors
      ✔ should resolve on success

  ProjectManagementRequestHandler
    Constructor
      ✔ should succeed with a FirebaseApp instance
    listAndroidApps
      ✔ should throw for HTTP 400 errors
      ✔ should throw for HTTP 401 errors
      ✔ should throw for HTTP 403 errors
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 500 errors
      ✔ should throw for HTTP 503 errors
      ✔ should throw for HTTP unknown errors
      ✔ should succeed
    listIosApps
      ✔ should throw for HTTP 400 errors
      ✔ should throw for HTTP 401 errors
      ✔ should throw for HTTP 403 errors
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 500 errors
      ✔ should throw for HTTP 503 errors
      ✔ should throw for HTTP unknown errors
      ✔ should succeed
    listAppMetadata
      ✔ should throw for HTTP 400 errors
      ✔ should throw for HTTP 401 errors
      ✔ should throw for HTTP 403 errors
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 500 errors
      ✔ should throw for HTTP 503 errors
      ✔ should throw for HTTP unknown errors
      ✔ should succeed
    createAndroidApp
      ✔ should throw for HTTP 400 errors
      ✔ should throw for HTTP 401 errors
      ✔ should throw for HTTP 403 errors
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 500 errors
      ✔ should throw for HTTP 503 errors
      ✔ should throw for HTTP unknown errors
      ✔ should throw when initial API responseData.name is null
      ✔ should propagate polling API response returned errors
      ✔ should propagate polling API response thrown errors
      ✔ should succeed after multiple polls (1005ms)
    createIosApp
      ✔ should throw for HTTP 400 errors
      ✔ should throw for HTTP 401 errors
      ✔ should throw for HTTP 403 errors
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 500 errors
      ✔ should throw for HTTP 503 errors
      ✔ should throw for HTTP unknown errors
      ✔ should throw when initial API responseData.name is null
      ✔ should propagate polling API response returned errors
      ✔ should propagate polling API response thrown errors
      ✔ should succeed after multiple polls (1002ms)
    setDisplayName
      ✔ should throw for HTTP 400 errors
      ✔ should throw for HTTP 401 errors
      ✔ should throw for HTTP 403 errors
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 500 errors
      ✔ should throw for HTTP 503 errors
      ✔ should throw for HTTP unknown errors
      ✔ should succeed
    getAndroidShaCertificates
      ✔ should throw for HTTP 400 errors
      ✔ should throw for HTTP 401 errors
      ✔ should throw for HTTP 403 errors
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 500 errors
      ✔ should throw for HTTP 503 errors
      ✔ should throw for HTTP unknown errors
      ✔ should succeed
    addAndroidShaCertificate
      ✔ should throw for HTTP 400 errors
      ✔ should throw for HTTP 401 errors
      ✔ should throw for HTTP 403 errors
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 500 errors
      ✔ should throw for HTTP 503 errors
      ✔ should throw for HTTP unknown errors
      ✔ should succeed
    getConfig
      ✔ should throw for HTTP 400 errors
      ✔ should throw for HTTP 401 errors
      ✔ should throw for HTTP 403 errors
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 500 errors
      ✔ should throw for HTTP 503 errors
      ✔ should throw for HTTP unknown errors
      ✔ should succeed
    getResource
      ✔ should throw for HTTP 400 errors
      ✔ should throw for HTTP 401 errors
      ✔ should throw for HTTP 403 errors
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 500 errors
      ✔ should throw for HTTP 503 errors
      ✔ should throw for HTTP unknown errors
      ✔ should succeed
    deleteResource
      ✔ should throw for HTTP 400 errors
      ✔ should throw for HTTP 401 errors
      ✔ should throw for HTTP 403 errors
      ✔ should throw for HTTP 404 errors
      ✔ should throw for HTTP 500 errors
      ✔ should throw for HTTP 503 errors
      ✔ should throw for HTTP unknown errors
      ✔ should succeed

  AndroidApp
    Constructor
      ✔ should throw given invalid app ID: null
      ✔ should throw given invalid app ID: null
      ✔ should throw given invalid app ID: 0
      ✔ should throw given invalid app ID: 1
      ✔ should throw given invalid app ID: true
      ✔ should throw given invalid app ID: false
      ✔ should throw given invalid app ID: ""
      ✔ should throw given invalid app ID: []
      ✔ should throw given invalid app ID: [1,"a"]
      ✔ should throw given invalid app ID: {}
      ✔ should throw given invalid app ID: {"a":1}
      ✔ should throw given invalid app ID: undefined
      ✔ should throw given no appId
      ✔ should not throw given a valid app ID
    getMetadata
      ✔ should propagate API errors
      ✔ should throw with null API response
      ✔ should throw with API response missing name
      ✔ should throw with API response missing appId
      ✔ should throw with API response missing projectId
      ✔ should throw with API response missing packageName
      ✔ should resolve with metadata on success
    setDisplayName
      ✔ should propagate API errors
      ✔ should resolve on success
    getShaCertificates
      ✔ should propagate API errors
      ✔ should throw with null API response
      ✔ should return empty array when API response missing "certificates" field
      ✔ should throw when API response has non-array "certificates" field
      ✔ should throw with API response missing "certificates[].name" field
      ✔ should throw with API response missing "certificates[].shaHash" field
      ✔ should resolve with metadata on success
    addShaCertificate
      ✔ should propagate API errors
      ✔ should resolve on success
    deleteShaCertificate
      ✔ should propagate API errors
      ✔ should fail on certificate without resourceName
      ✔ should resolve on success
    getConfig
      ✔ should propagate API errors
      ✔ should throw with null API response
      ✔ should throw with non-base64 response.configFileContents
      ✔ should resolve with metadata on success

  ShaCertificate
    Constructor
      ✔ should throw given invalid SHA hash: null
      ✔ should throw given invalid SHA hash: undefined
      ✔ should throw given invalid SHA hash: "0123456789"
      ✔ should throw given invalid SHA hash: 123456789
      ✔ should throw given invalid SHA hash: "0123456789abcdefABCDEF01234567890123456"
      ✔ should throw given invalid SHA hash: "0123456789abcdefABCDEF0123456789012345670123456789012345678"
      ✔ should throw given no SHA hash
      ✔ should not throw given a valid SHA1 hash
      ✔ should not throw given a valid SHA256 hash

  IosApp
    Constructor
      ✔ should throw given invalid app ID: null
      ✔ should throw given invalid app ID: null
      ✔ should throw given invalid app ID: 0
      ✔ should throw given invalid app ID: 1
      ✔ should throw given invalid app ID: true
      ✔ should throw given invalid app ID: false
      ✔ should throw given invalid app ID: ""
      ✔ should throw given invalid app ID: []
      ✔ should throw given invalid app ID: [1,"a"]
      ✔ should throw given invalid app ID: {}
      ✔ should throw given invalid app ID: {"a":1}
      ✔ should throw given invalid app ID: undefined
      ✔ should throw given no appId
      ✔ should not throw given a valid app ID
    getMetadata
      ✔ should propagate API errors
      ✔ should throw with null API response
      ✔ should throw with API response missing name
      ✔ should throw with API response missing appId
      ✔ should throw with API response missing projectId
      ✔ should throw with API response missing bundleId
      ✔ should resolve with metadata on success
    setDisplayName
      ✔ should propagate API errors
      ✔ should resolve on success
    getConfig
      ✔ should propagate API errors
      ✔ should throw with null API response
      ✔ should throw with non-base64 response.configFileContents
      ✔ should resolve with metadata on success

  SecurityRules
    getSecurityRules()
      ✔ should throw when default app is not available
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance

  SecurityRules
    Constructor
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given no app
      ✔ should reject when initialized without project ID
      ✔ should not throw given a valid app
    app
      ✔ returns the app from the constructor
    getRuleset
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain a name
      ✔ should reject when API response does not contain a createTime
      ✔ should reject when API response does not contain a source
      ✔ should resolve with Ruleset on success
    getFirestoreRuleset
      ✔ should propagate API errors
      ✔ should reject when getRelease response is invalid
      ✔ should resolve with Ruleset on success
    getStorageRuleset
      ✔ should reject when called with: null
      ✔ should reject when called with: ""
      ✔ should reject when called with: true
      ✔ should reject when called with: false
      ✔ should reject when called with: 1
      ✔ should reject when called with: 0
      ✔ should reject when called with: {}
      ✔ should reject when called with: []
      ✔ should propagate API errors
      ✔ should reject when getRelease response is invalid
      ✔ should resolve with Ruleset for the default bucket on success
      ✔ should resolve with Ruleset for the specified bucket on success
    releaseFirestoreRuleset
      ✔ should reject when called with: null
      ✔ should reject when called with: undefined
      ✔ should reject when called with: ""
      ✔ should reject when called with: 1
      ✔ should reject when called with: true
      ✔ should reject when called with: {}
      ✔ should reject when called with: []
      ✔ should reject when called with: {"name":""}
      ✔ should propagate API errors
      ✔ should resolve on success when the ruleset specified by name
      ✔ should resolve on success when the ruleset specified as an object
    releaseFirestoreRulesetFromSource
      ✔ should reject when called with: null
      ✔ should reject when called with: undefined
      ✔ should reject when called with: ""
      ✔ should reject when called with: 1
      ✔ should reject when called with: true
      ✔ should reject when called with: {}
      ✔ should reject when called with: []
      ✔ should propagate API errors
      ✔ should resolve on success when source specified as a string
      ✔ should resolve on success when source specified as a buffer
    releaseStorageRuleset
      ✔ should reject when called with: null
      ✔ should reject when called with: undefined
      ✔ should reject when called with: ""
      ✔ should reject when called with: 1
      ✔ should reject when called with: true
      ✔ should reject when called with: {}
      ✔ should reject when called with: []
      ✔ should reject when called with: {"name":""}
      ✔ should reject when called with: null
      ✔ should reject when called with: ""
      ✔ should reject when called with: true
      ✔ should reject when called with: false
      ✔ should reject when called with: 1
      ✔ should reject when called with: 0
      ✔ should reject when called with: {}
      ✔ should reject when called with: []
      ✔ should propagate API errors
      ✔ should resolve on success when the ruleset specified by name
      ✔ should resolve on success when a custom bucket name is specified
      ✔ should resolve on success when the ruleset specified as an object
    releaseStorageRulesetFromSource
      ✔ should reject when called with source: null
      ✔ should reject when called with source: undefined
      ✔ should reject when called with source: ""
      ✔ should reject when called with source: 1
      ✔ should reject when called with source: true
      ✔ should reject when called with source: {}
      ✔ should reject when called with source: []
      ✔ should reject when called with bucket: null
      ✔ should reject when called with bucket: ""
      ✔ should reject when called with bucket: true
      ✔ should reject when called with bucket: false
      ✔ should reject when called with bucket: 1
      ✔ should reject when called with bucket: 0
      ✔ should reject when called with bucket: {}
      ✔ should reject when called with bucket: []
      ✔ should propagate API errors
      ✔ should resolve on success when source specified as a string for default bucket
      ✔ should resolve on success when source specified as a buffer for default bucket
      ✔ should resolve on success when source specified as a string for a custom bucket
      ✔ should resolve on success when source specified as a buffer for a custom bucket
    createRulesFileFromSource
      ✔ should throw if the name is null
      ✔ should throw if the name is undefined
      ✔ should throw if the name is ""
      ✔ should throw if the name is 1
      ✔ should throw if the name is true
      ✔ should throw if the name is {}
      ✔ should throw if the name is []
      ✔ should throw if the source is null
      ✔ should throw if the source is undefined
      ✔ should throw if the source is ""
      ✔ should throw if the source is 1
      ✔ should throw if the source is true
      ✔ should throw if the source is {}
      ✔ should throw if the source is []
      ✔ should succeed when source specified as a string
      ✔ should succeed when source specified as a Buffer
    createRuleset
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain a name
      ✔ should reject when API response does not contain a createTime
      ✔ should resolve with Ruleset on success
    deleteRuleset
      ✔ should propagate API errors
      ✔ should resolve on success
    listRulesetMetadata
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain rulesets
      ✔ should resolve with RulesetMetadataList on success
      ✔ should resolve with RulesetMetadataList on success when called with page size
      ✔ should resolve with RulesetMetadataList on success when called with page token
      ✔ should resolve with RulesetMetadataList when the response contains no page token

  SecurityRulesApiClient
    Constructor
      ✔ should throw when the app is null
    getRuleset
      ✔ should reject when called with: null
      ✔ should reject when called with: undefined
      ✔ should reject when called with: ""
      ✔ should reject when called with: 1
      ✔ should reject when called with: true
      ✔ should reject when called with: {}
      ✔ should reject when called with: []
      ✔ should reject when called with prefixed name
      ✔ should reject when project id is not available
      ✔ should resolve with the requested ruleset on success
      ✔ should throw when a full platform error response is received
      ✔ should throw unknown-error when error code is not present
      ✔ should throw unknown-error for non-json response
      ✔ should throw when rejected with a FirebaseAppError
    createRuleset
      ✔ should reject when called with: null
      ✔ should reject when called with: undefined
      ✔ should reject when called with: {}
      ✔ should reject when called with: {"source":{}}
      ✔ should reject when project id is not available
      ✔ should reject when called with: null
      ✔ should reject when called with extra argument: null
      ✔ should reject when called with: undefined
      ✔ should reject when called with extra argument: undefined
      ✔ should reject when called with: "test"
      ✔ should reject when called with extra argument: "test"
      ✔ should reject when called with: {}
      ✔ should reject when called with extra argument: {}
      ✔ should reject when called with: {"name":"test"}
      ✔ should reject when called with extra argument: {"name":"test"}
      ✔ should reject when called with: {"content":"test"}
      ✔ should reject when called with extra argument: {"content":"test"}
      ✔ should resolve with the created resource on success
      ✔ should throw when a full platform error response is received
      ✔ should throw when the rulesets limit reached
      ✔ should throw unknown-error when error code is not present
      ✔ should throw unknown-error for non-json response
      ✔ should throw when rejected with a FirebaseAppError
    listRulesets
      ✔ should reject when called with invalid page size: null
      ✔ should reject when called with invalid page size: ""
      ✔ should reject when called with invalid page size: "10"
      ✔ should reject when called with invalid page size: true
      ✔ should reject when called with invalid page size: {}
      ✔ should reject when called with invalid page size: []
      ✔ should reject when called with invalid page size: -1
      ✔ should reject when called with invalid page size: 0
      ✔ should reject when called with invalid page size: 101
      ✔ should reject when called with invalid page token: null
      ✔ should reject when called with invalid page token: 0
      ✔ should reject when called with invalid page token: ""
      ✔ should reject when called with invalid page token: true
      ✔ should reject when called with invalid page token: {}
      ✔ should reject when called with invalid page token: []
      ✔ should reject when project id is not available
      ✔ should resolve on success when called without any arguments
      ✔ should resolve on success when called with a page size
      ✔ should resolve on success when called with a page token
      ✔ should throw when a full platform error response is received
      ✔ should throw unknown-error when error code is not present
      ✔ should throw unknown-error for non-json response
      ✔ should throw when rejected with a FirebaseAppError
    getRelease
      ✔ should reject when project id is not available
      ✔ should resolve with the requested release on success
      ✔ should throw when a full platform error response is received
      ✔ should throw unknown-error when error code is not present
      ✔ should throw unknown-error for non-json response
      ✔ should throw when rejected with a FirebaseAppError
    updateOrCreateRelease
      ✔ should propagate API errors
      ✔ should create a new ruleset when update fails with a not-found error
    updateRelease
      ✔ should reject when project id is not available
      ✔ should resolve with the updated release on success
      ✔ should throw when a full platform error response is received
      ✔ should throw unknown-error when error code is not present
      ✔ should throw unknown-error for non-json response
      ✔ should throw when rejected with a FirebaseAppError
    createRelease
      ✔ should reject when project id is not available
      ✔ should resolve with the created release on success
      ✔ should throw when a full platform error response is received
      ✔ should throw unknown-error when error code is not present
      ✔ should throw unknown-error for non-json response
      ✔ should throw when rejected with a FirebaseAppError
    deleteRuleset
      ✔ should reject when called with: null
      ✔ should reject when called with: undefined
      ✔ should reject when called with: ""
      ✔ should reject when called with: 1
      ✔ should reject when called with: true
      ✔ should reject when called with: {}
      ✔ should reject when called with: []
      ✔ should reject when called with prefixed name
      ✔ should reject when project id is not available
      ✔ should resolve on success
      ✔ should throw when a full platform error response is received
      ✔ should throw unknown-error when error code is not present
      ✔ should throw unknown-error for non-json response
      ✔ should throw when rejected with a FirebaseAppError

  RemoteConfig
    getRemoteConfig()
      ✔ should throw when default app is not available
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance

  RemoteConfig
    Constructor
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given no app
      ✔ should reject when initialized without project ID
      ✔ should not throw given a valid app
    app
      ✔ returns the app from the constructor
    getTemplate
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain an ETag
      ✔ should reject when API response does not contain valid parameters
      ✔ should reject when API response does not contain valid parameter groups
      ✔ should reject when API response does not contain valid conditions
      ✔ should resolve with parameters:{} when no parameters present in the response
      ✔ should resolve with parameterGroups:{} when no parameter groups present in the response
      ✔ should resolve with conditions:[] when no conditions present in the response
      ✔ should resolve with Remote Config template on success
      ✔ should resolve with template when Version updateTime contains 3 digits in fractional seconds
      ✔ should resolve with template when Version updateTime contains 6 digits in fractional seconds
      ✔ should resolve with template when Version updateTime contains 9 digits in fractional seconds
    getTemplateAtVersion
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain an ETag
      ✔ should reject when API response does not contain valid parameters
      ✔ should reject when API response does not contain valid parameter groups
      ✔ should reject when API response does not contain valid conditions
      ✔ should resolve with parameters:{} when no parameters present in the response
      ✔ should resolve with parameterGroups:{} when no parameter groups present in the response
      ✔ should resolve with conditions:[] when no conditions present in the response
      ✔ should resolve with Remote Config template on success
      ✔ should resolve with template when Version updateTime contains 3 digits in fractional seconds
      ✔ should resolve with template when Version updateTime contains 6 digits in fractional seconds
      ✔ should resolve with template when Version updateTime contains 9 digits in fractional seconds
    validateTemplate
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain an ETag
      ✔ should reject when API response does not contain valid parameters
      ✔ should reject when API response does not contain valid parameter groups
      ✔ should reject when API response does not contain valid conditions
      ✔ should resolve with parameters:{} when no parameters present in the response
      ✔ should resolve with parameterGroups:{} when no parameter groups present in the response
      ✔ should resolve with conditions:[] when no conditions present in the response
      ✔ should resolve with Remote Config template on success
      ✔ should resolve with template when Version updateTime contains 3 digits in fractional seconds
      ✔ should resolve with template when Version updateTime contains 6 digits in fractional seconds
      ✔ should resolve with template when Version updateTime contains 9 digits in fractional seconds
    publishTemplate
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain an ETag
      ✔ should reject when API response does not contain valid parameters
      ✔ should reject when API response does not contain valid parameter groups
      ✔ should reject when API response does not contain valid conditions
      ✔ should resolve with parameters:{} when no parameters present in the response
      ✔ should resolve with parameterGroups:{} when no parameter groups present in the response
      ✔ should resolve with conditions:[] when no conditions present in the response
      ✔ should resolve with Remote Config template on success
      ✔ should resolve with template when Version updateTime contains 3 digits in fractional seconds
      ✔ should resolve with template when Version updateTime contains 6 digits in fractional seconds
      ✔ should resolve with template when Version updateTime contains 9 digits in fractional seconds
    rollback
      ✔ should propagate API errors
      ✔ should reject when API response is invalid
      ✔ should reject when API response does not contain an ETag
      ✔ should reject when API response does not contain valid parameters
      ✔ should reject when API response does not contain valid parameter groups
      ✔ should reject when API response does not contain valid conditions
      ✔ should resolve with parameters:{} when no parameters present in the response
      ✔ should resolve with parameterGroups:{} when no parameter groups present in the response
      ✔ should resolve with conditions:[] when no conditions present in the response
      ✔ should resolve with Remote Config template on success
      ✔ should resolve with template when Version updateTime contains 3 digits in fractional seconds
      ✔ should resolve with template when Version updateTime contains 6 digits in fractional seconds
      ✔ should resolve with template when Version updateTime contains 9 digits in fractional seconds
    listVersions
      ✔ should propagate API errors
      ✔ should reject if the versionNumber is: 
      ✔ should reject if the versionNumber is: null
      ✔ should reject if the versionNumber is: NaN
      ✔ should reject if the versionNumber is: true
      ✔ should reject if the versionNumber is: 
      ✔ should reject if the versionNumber is: [object Object]
      ✔ should reject if the versionNumber is: abc
      ✔ should reject if the versionNumber is: a123b
      ✔ should reject if the versionNumber is: a123
      ✔ should reject if the versionNumber is: 123a
      ✔ should reject if the versionNumber is: 1.2
      ✔ should reject if the versionNumber is: 70.2
      ✔ should reject if the updateOrigin is: 
      ✔ should reject if the updateOrigin is: 123
      ✔ should reject if the updateOrigin is: 1.2
      ✔ should reject if the updateOrigin is: null
      ✔ should reject if the updateOrigin is: NaN
      ✔ should reject if the updateOrigin is: true
      ✔ should reject if the updateOrigin is: 
      ✔ should reject if the updateOrigin is: [object Object]
      ✔ should reject if the updateType is: 
      ✔ should reject if the updateType is: 123
      ✔ should reject if the updateType is: 1.2
      ✔ should reject if the updateType is: null
      ✔ should reject if the updateType is: NaN
      ✔ should reject if the updateType is: true
      ✔ should reject if the updateType is: 
      ✔ should reject if the updateType is: [object Object]
      ✔ should reject if the updateUser is: 
      ✔ should reject if the updateUser is: abc
      ✔ should reject if the updateUser is: 1.2
      ✔ should reject if the updateUser is: 123
      ✔ should reject if the updateUser is: null
      ✔ should reject if the updateUser is: NaN
      ✔ should reject if the updateUser is: true
      ✔ should reject if the updateUser is: 
      ✔ should reject if the description is: 
      ✔ should reject if the description is: 123
      ✔ should reject if the description is: 1.2
      ✔ should reject if the description is: null
      ✔ should reject if the description is: NaN
      ✔ should reject if the description is: true
      ✔ should reject if the description is: 
      ✔ should reject if the description is: [object Object]
      ✔ should reject if the rollbackSource is: 
      ✔ should reject if the rollbackSource is: 123
      ✔ should reject if the rollbackSource is: 1.2
      ✔ should reject if the rollbackSource is: null
      ✔ should reject if the rollbackSource is: NaN
      ✔ should reject if the rollbackSource is: true
      ✔ should reject if the rollbackSource is: 
      ✔ should reject if the rollbackSource is: [object Object]
      ✔ should reject if the isLegacy is: 
      ✔ should reject if the isLegacy is: abc
      ✔ should reject if the isLegacy is: 123
      ✔ should reject if the isLegacy is: 1.2
      ✔ should reject if the isLegacy is: null
      ✔ should reject if the isLegacy is: NaN
      ✔ should reject if the isLegacy is: 
      ✔ should reject if the isLegacy is: [object Object]
      ✔ should reject if the updateTime is: 
      ✔ should reject if the updateTime is: abc
      ✔ should reject if the updateTime is: 123
      ✔ should reject if the updateTime is: 1.2
      ✔ should reject if the updateTime is: null
      ✔ should reject if the updateTime is: NaN
      ✔ should reject if the updateTime is: 
      ✔ should reject if the updateTime is: [object Object]
      ✔ should resolve with an empty versions list if no results are available for requested list options
      ✔ should resolve with template versions list on success
    createTemplateFromJSON
      ✔ should throw if the json string is null
      ✔ should throw if the json string is undefined
      ✔ should throw if the json string is ""
      ✔ should throw if the json string is 1
      ✔ should throw if the json string is true
      ✔ should throw if the json string is {}
      ✔ should throw if the json string is []
      ✔ should throw if the json string is "abc"
      ✔ should throw if the json string is "foo"
      ✔ should throw if the json string is "a:a"
      ✔ should throw if the json string is "1:1"
      ✔ should throw if the ETag is null
      ✔ should throw if the ETag is undefined
      ✔ should throw if the ETag is ""
      ✔ should throw if the ETag is 1
      ✔ should throw if the ETag is true
      ✔ should throw if the ETag is {}
      ✔ should throw if the ETag is []
      ✔ should throw if the parameters is null
      ✔ should throw if the parameters is ""
      ✔ should throw if the parameters is "abc"
      ✔ should throw if the parameters is 1
      ✔ should throw if the parameters is true
      ✔ should throw if the parameters is []
      ✔ should throw if the parameter groups are null
      ✔ should throw if the parameter groups are ""
      ✔ should throw if the parameter groups are "abc"
      ✔ should throw if the parameter groups are 1
      ✔ should throw if the parameter groups are true
      ✔ should throw if the parameter groups are []
      ✔ should throw if the conditions is null
      ✔ should throw if the conditions is ""
      ✔ should throw if the conditions is "abc"
      ✔ should throw if the conditions is 1
      ✔ should throw if the conditions is true
      ✔ should throw if the conditions is {}
      ✔ should succeed when a valid json string is provided

  RemoteConfigApiClient
    Constructor
      ✔ should reject when the app is null
    getTemplate
      ✔ should reject when project id is not available
      ✔ should reject when the etag is not present in the response
      ✔ should reject when a full platform error response is received
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject when rejected with a FirebaseAppError
      ✔ should resolve with the latest template on success
    getTemplateAtVersion
      ✔ should reject when project id is not available
      ✔ should reject if the versionNumber is: 
      ✔ should reject if the versionNumber is: null
      ✔ should reject if the versionNumber is: NaN
      ✔ should reject if the versionNumber is: true
      ✔ should reject if the versionNumber is: 
      ✔ should reject if the versionNumber is: [object Object]
      ✔ should reject if the versionNumber is: abc
      ✔ should reject if the versionNumber is: a123b
      ✔ should reject if the versionNumber is: a123
      ✔ should reject if the versionNumber is: 123a
      ✔ should reject if the versionNumber is: 1.2
      ✔ should reject if the versionNumber is: 70.2
      ✔ should reject when the etag is not present in the response
      ✔ should reject when a full platform error response is received
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject when rejected with a FirebaseAppError
      ✔ should convert version number to string
      ✔ should resolve with the requested template version on success
    validateTemplate
      ✔ should reject when project id is not available
      ✔ should throw if the parameters is null
      ✔ should throw if the parameters is ""
      ✔ should throw if the parameters is "abc"
      ✔ should throw if the parameters is 1
      ✔ should throw if the parameters is true
      ✔ should throw if the parameters is []
      ✔ should throw if the parameter groups is null
      ✔ should throw if the parameter groups is ""
      ✔ should throw if the parameter groups is "abc"
      ✔ should throw if the parameter groups is 1
      ✔ should throw if the parameter groups is true
      ✔ should throw if the parameter groups is []
      ✔ should throw if the conditions is null
      ✔ should throw if the conditions is ""
      ✔ should throw if the conditions is "abc"
      ✔ should throw if the conditions is 1
      ✔ should throw if the conditions is true
      ✔ should throw if the conditions is {}
      ✔ should throw if the template is {"parameters":{},"parameterGroups":{},"conditions":[],"etag":""}
      ✔ should throw if the template is {}
      ✔ should throw if the template is null
      ✔ should throw if the template is "abc"
      ✔ should throw if the template is 123
      ✔ should reject when the etag is not present in the response
      ✔ should reject when a full platform error response is received
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject when rejected with a FirebaseAppError
      ✔ should exclude output only parameters from version metadata
      ✔ should resolve with the requested template on success
      ✔ should reject when the etag in template is null, undefined, or an empty string
      ✔ should reject when the etag in template is null, undefined, or an empty string
      ✔ should reject when the etag in template is null, undefined, or an empty string
      ✔ should reject with failed-precondition when a validation error occurres
      ✔ should reject with failed-precondition when a validation error occurres
    publishTemplate
      ✔ should reject when project id is not available
      ✔ should throw if the parameters is null
      ✔ should throw if the parameters is ""
      ✔ should throw if the parameters is "abc"
      ✔ should throw if the parameters is 1
      ✔ should throw if the parameters is true
      ✔ should throw if the parameters is []
      ✔ should throw if the parameter groups is null
      ✔ should throw if the parameter groups is ""
      ✔ should throw if the parameter groups is "abc"
      ✔ should throw if the parameter groups is 1
      ✔ should throw if the parameter groups is true
      ✔ should throw if the parameter groups is []
      ✔ should throw if the conditions is null
      ✔ should throw if the conditions is ""
      ✔ should throw if the conditions is "abc"
      ✔ should throw if the conditions is 1
      ✔ should throw if the conditions is true
      ✔ should throw if the conditions is {}
      ✔ should throw if the template is {"parameters":{},"parameterGroups":{},"conditions":[],"etag":""}
      ✔ should throw if the template is {}
      ✔ should throw if the template is null
      ✔ should throw if the template is "abc"
      ✔ should throw if the template is 123
      ✔ should reject when the etag is not present in the response
      ✔ should reject when a full platform error response is received
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject when rejected with a FirebaseAppError
      ✔ should exclude output only parameters from version metadata
      ✔ should resolve with the published template on success
      ✔ should resolve with the published template on success
      ✔ should reject when the etag in template is null, undefined, or an empty string
      ✔ should reject when the etag in template is null, undefined, or an empty string
      ✔ should reject when the etag in template is null, undefined, or an empty string
      ✔ should reject with failed-precondition when a validation error occurs
      ✔ should reject with failed-precondition when a validation error occurs
    rollback
      ✔ should reject when project id is not available
      ✔ should reject if the versionNumber is: 
      ✔ should reject if the versionNumber is: null
      ✔ should reject if the versionNumber is: NaN
      ✔ should reject if the versionNumber is: true
      ✔ should reject if the versionNumber is: 
      ✔ should reject if the versionNumber is: [object Object]
      ✔ should reject if the versionNumber is: abc
      ✔ should reject if the versionNumber is: a123b
      ✔ should reject if the versionNumber is: a123
      ✔ should reject if the versionNumber is: 123a
      ✔ should reject if the versionNumber is: 1.2
      ✔ should reject if the versionNumber is: 70.2
      ✔ should reject when the etag is not present in the response
      ✔ should reject when a full platform error response is received
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject when rejected with a FirebaseAppError
      ✔ should convert version number to string
      ✔ should resolve with the rollbacked template on success
    listVersions
      ✔ should reject when project id is not available
      ✔ should reject when a full platform error response is received
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject when rejected with a FirebaseAppError
      ✔ should throw if options is null
      ✔ should throw if options is abc
      ✔ should throw if options is 
      ✔ should throw if options is 
      ✔ should throw if options is true
      ✔ should throw if options is 102
      ✔ should throw if options is 1.2
      ✔ should throw if pageSize is null
      ✔ should throw if pageSize is abc
      ✔ should throw if pageSize is 
      ✔ should throw if pageSize is 
      ✔ should throw if pageSize is [object Object]
      ✔ should throw if pageSize is true
      ✔ should throw if pageSize is NaN
      ✔ should throw if pageSize is 0
      ✔ should throw if pageSize is -100
      ✔ should throw if pageSize is 301
      ✔ should throw if pageSize is 450
      ✔ should throw if pageToken is null
      ✔ should throw if pageToken is 
      ✔ should throw if pageToken is 102
      ✔ should throw if pageToken is 1.2
      ✔ should throw if pageToken is 
      ✔ should throw if pageToken is [object Object]
      ✔ should throw if pageToken is true
      ✔ should throw if pageToken is NaN
      ✔ should throw if the endVersionNumber is: 
      ✔ should throw if the endVersionNumber is: null
      ✔ should throw if the endVersionNumber is: NaN
      ✔ should throw if the endVersionNumber is: true
      ✔ should throw if the endVersionNumber is: 
      ✔ should throw if the endVersionNumber is: [object Object]
      ✔ should throw if the endVersionNumber is: abc
      ✔ should throw if the endVersionNumber is: a123b
      ✔ should throw if the endVersionNumber is: a123
      ✔ should throw if the endVersionNumber is: 123a
      ✔ should throw if the endVersionNumber is: 1.2
      ✔ should throw if the endVersionNumber is: 70.2
      ✔ should throw if startTime is null
      ✔ should throw if startTime is 
      ✔ should throw if startTime is abc
      ✔ should throw if startTime is 2020-05-07T18:44:41.555Z
      ✔ should throw if startTime is 102
      ✔ should throw if startTime is 1.2
      ✔ should throw if startTime is 
      ✔ should throw if startTime is [object Object]
      ✔ should throw if startTime is true
      ✔ should throw if startTime is NaN
      ✔ should throw if endTime is null
      ✔ should throw if endTime is 
      ✔ should throw if endTime is abc
      ✔ should throw if endTime is 2020-05-07T18:44:41.555Z
      ✔ should throw if endTime is 102
      ✔ should throw if endTime is 1.2
      ✔ should throw if endTime is 
      ✔ should throw if endTime is [object Object]
      ✔ should throw if endTime is true
      ✔ should throw if endTime is NaN
      ✔ should convert input timestamps to ISO strings
      ✔ should convert endVersionNumber to string
      ✔ should remove undefined fields from options
      ✔ should resolve with a list of template versions on success

  AppCheck
    Constructor
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given no app
      ✔ should reject when initialized without project ID
      ✔ should reject when failed to contact the Metadata server
      ✔ should reject when failed to sign the token
      ✔ should not throw given a valid app
    app
      ✔ returns the app from the constructor
    createToken
      ✔ should propagate API errors
      ✔ should propagate API errors with custom options
      ✔ should resolve with AppCheckToken on success
    verifyToken
      ✔ should propagate API errors
      ✔ should resolve with VerifyAppCheckTokenResponse on success

  AppCheckApiClient
    Constructor
      ✔ should reject when the app is null
    exchangeToken
      ✔ should reject when project id is not available
      ✔ should throw given no appId
      ✔ should throw given a non-string appId: null
      ✔ should throw given a non-string appId: null
      ✔ should throw given a non-string appId: 0
      ✔ should throw given a non-string appId: 1
      ✔ should throw given a non-string appId: true
      ✔ should throw given a non-string appId: false
      ✔ should throw given a non-string appId: []
      ✔ should throw given a non-string appId: {}
      ✔ should throw given a non-string appId: {"a":1}
      ✔ should throw given a non-string appId: undefined
      ✔ should throw given an empty string appId
      ✔ should throw given no customToken
      ✔ should throw given a non-string customToken: null
      ✔ should throw given a non-string customToken: null
      ✔ should throw given a non-string customToken: 0
      ✔ should throw given a non-string customToken: 1
      ✔ should throw given a non-string customToken: true
      ✔ should throw given a non-string customToken: false
      ✔ should throw given a non-string customToken: []
      ✔ should throw given a non-string customToken: {}
      ✔ should throw given a non-string customToken: {"a":1}
      ✔ should throw given a non-string customToken: undefined
      ✔ should throw given an empty string customToken
      ✔ should reject when a full platform error response is received
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject when rejected with a FirebaseAppError
      ✔ should throw if the returned ttl duration is: 
      ✔ should throw if the returned ttl duration is: abc
      ✔ should throw if the returned ttl duration is: 3s2
      ✔ should throw if the returned ttl duration is: sssa
      ✔ should throw if the returned ttl duration is: 3.000000001
      ✔ should throw if the returned ttl duration is: 3.2
      ✔ should throw if the returned ttl duration is: null
      ✔ should throw if the returned ttl duration is: NaN
      ✔ should throw if the returned ttl duration is: true
      ✔ should throw if the returned ttl duration is: 
      ✔ should throw if the returned ttl duration is: [object Object]
      ✔ should throw if the returned ttl duration is: 100
      ✔ should throw if the returned ttl duration is: 1.2
      ✔ should throw if the returned ttl duration is: -200
      ✔ should throw if the returned ttl duration is: -2.4
      ✔ should resolve with the App Check token on success
      ✔ should resolve with ttlMillis as 3000 when ttl
       from server is: 3s
      ✔ should resolve with ttlMillis as 4100 when ttl
       from server is: 4.1s
      ✔ should resolve with ttlMillis as 3000 when ttl
       from server is: 3.000000001s
      ✔ should resolve with ttlMillis as 3000 when ttl
       from server is: 3.000001s

  AppCheckTokenGenerator
    ✔ should throw given invalid signer: null
    ✔ should throw given invalid signer: null
    ✔ should throw given invalid signer: 0
    ✔ should throw given invalid signer: 1
    ✔ should throw given invalid signer: true
    ✔ should throw given invalid signer: false
    ✔ should throw given invalid signer: ""
    ✔ should throw given invalid signer: "a"
    ✔ should throw given invalid signer: []
    ✔ should throw given invalid signer: undefined
    Constructor
      ✔ should throw given no arguments
    createCustomToken()
      ✔ should throw given no appId
      ✔ should throw given a non-string appId: null
      ✔ should throw given a non-string appId: null
      ✔ should throw given a non-string appId: 0
      ✔ should throw given a non-string appId: 1
      ✔ should throw given a non-string appId: true
      ✔ should throw given a non-string appId: false
      ✔ should throw given a non-string appId: []
      ✔ should throw given a non-string appId: {}
      ✔ should throw given a non-string appId: {"a":1}
      ✔ should throw given a non-string appId: undefined
      ✔ should throw given an empty string appId
      ✔ should throw given an invalid options: null
      ✔ should throw given an invalid options: null
      ✔ should throw given an invalid options: 0
      ✔ should throw given an invalid options: 1
      ✔ should throw given an invalid options: true
      ✔ should throw given an invalid options: false
      ✔ should throw given an invalid options: []
      ✔ should throw given an invalid options: undefined
      ✔ should throw given an options object with invalid ttl: null
      ✔ should throw given an options object with invalid ttl: null
      ✔ should throw given an options object with invalid ttl: "0"
      ✔ should throw given an options object with invalid ttl: "abc"
      ✔ should throw given an options object with invalid ttl: ""
      ✔ should throw given an options object with invalid ttl: true
      ✔ should throw given an options object with invalid ttl: false
      ✔ should throw given an options object with invalid ttl: []
      ✔ should throw given an options object with invalid ttl: {}
      ✔ should throw given an options object with invalid ttl: {"a":1}
      ✔ should throw given an options object with invalid ttl: undefined
      ✔ should throw given options with ttl < 30 minutes or ttl > 7 days:-100
      ✔ should throw given options with ttl < 30 minutes or ttl > 7 days:-1
      ✔ should throw given options with ttl < 30 minutes or ttl > 7 days:0
      ✔ should throw given options with ttl < 30 minutes or ttl > 7 days:10
      ✔ should throw given options with ttl < 30 minutes or ttl > 7 days:1799999
      ✔ should throw given options with ttl < 30 minutes or ttl > 7 days:604800001
      ✔ should throw given options with ttl < 30 minutes or ttl > 7 days:1209600000
      ✔ should be fulfilled with a Firebase Custom JWT with only an APP ID
      ✔ should be fulfilled with a Firebase Custom JWT with a valid custom ttl1800000
      ✔ should be fulfilled with a Firebase Custom JWT with a valid custom ttl1800001
      ✔ should be fulfilled with a Firebase Custom JWT with a valid custom ttl302400000
      ✔ should be fulfilled with a Firebase Custom JWT with a valid custom ttl604799999
      ✔ should be fulfilled with a Firebase Custom JWT with a valid custom ttl604800000
      ✔ should be fulfilled with a JWT with the correct decoded payload
      ✔ should be fulfilled with no ttl in the decoded payload when ttl is not provided in options
      ✔ should be fulfilled with no ttl in the decoded payload when ttl is not provided in options
      ✔ should be fulfilled with no ttl in the decoded payload when ttl is not provided in options
      ✔ should be fulfilled with a JWT with custom ttl in decoded payload
      ✔ should be fulfilled with a JWT with custom ttl in decoded payload
      ✔ should be fulfilled with a JWT with custom ttl in decoded payload
      ✔ should be fulfilled with a JWT with custom ttl in decoded payload
      ✔ should be fulfilled with a JWT with custom ttl in decoded payload
      ✔ should be fulfilled with a JWT with the correct header
      ✔ should be fulfilled with a JWT which can be verified by the service account public key
      ✔ should be fulfilled with a JWT which cannot be verified by a random public key
      ✔ should be fulfilled with a JWT which expires after five minutes
      appCheckErrorFromCryptoSignerError
        ✔ should convert CryptoSignerError to FirebaseAppCheckError
        ✔ should convert CryptoSignerError HttpError to FirebaseAppCheckError
        ✔ should convert CryptoSignerError HttpError with no error.message to FirebaseAppCheckError
        ✔ should convert CryptoSignerError HttpError with no errorcode to FirebaseAppCheckError

  AppCheckTokenVerifier
    verifyJWT()
      ✔ should throw given no App Check token
      ✔ should throw given a non-string App Check token: null
      ✔ should throw given a non-string App Check token: null
      ✔ should throw given a non-string App Check token: 0
      ✔ should throw given a non-string App Check token: 1
      ✔ should throw given a non-string App Check token: true
      ✔ should throw given a non-string App Check token: false
      ✔ should throw given a non-string App Check token: []
      ✔ should throw given a non-string App Check token: {}
      ✔ should throw given a non-string App Check token: {"a":1}
      ✔ should throw given a non-string App Check token: undefined
      ✔ should throw given an empty string App Check token
      ✔ should be rejected given an invalid App Check token
      ✔ should throw if the token verifier was initialized with no "project_id"
      ✔ should be rejected given an App Check token with an incorrect algorithm
      ✔ should be rejected given an App Check token with an incorrect audience:"incorrectAudience"
      ✔ should be rejected given an App Check token with an incorrect audience:[]
      ✔ should be rejected given an App Check token with an incorrect audience:["12345678","project_id"]
      ✔ should be rejected given an App Check token with an incorrect audience:["projects/12345678","project_id"]
      ✔ should be rejected given an App Check token with an incorrect issuer
      ✔ should be rejected given an App Check token with an empty subject
      ✔ should be rejected when the verifier throws no maching kid error
      ✔ should be rejected when the verifier throws expired token error
      ✔ should be rejected when the verifier throws invalid signature error.
      ✔ should be rejected when the verifier throws key fetch error.
      ✔ should be fulfilled when the kid is not present in the header (should try all the keys)
      ✔ should be fulfilled with decoded claims given a valid App Check token

  eventarc
    ✔ throws invalid argument with creating channel with invalid name
    Eventarc
      ✔ inintializes Eventarc object
    default Channel
      ✔ inintializes Channel object
      ✔ publishes single event to the API
      ✔ publishes multiple events to the API
    full resource name Channel
      ✔ inintializes Channel object
      ✔ publishes single event to the API
      ✔ publishes multiple events to the API
    partial (no project) Channel
      ✔ inintializes Channel object
      ✔ publishes single event to the API
      ✔ publishes multiple events to the API
    partial (channel id only) Channel
      ✔ inintializes Channel object
      ✔ publishes single event to the API
      ✔ publishes multiple events to the API
    Channel with empty allowed events
      ✔ inintializes Channel object
      ✔ filters out event and publishes none
      ✔ filters out all event and publishes none
    Channel with channel and empty allowed events
      ✔ inintializes Channel object
      ✔ filters out event and publishes none
      ✔ filters out all event and publishes none
    Channel with allowed events
      ✔ inintializes Channel object
      ✔ publishes events with allowed type
      ✔ publishes events with allowed type and filters out others
    Channel with allowed events as string
      ✔ inintializes Channel object
      ✔ publishes events with allowed type
      ✔ publishes events with allowed type and filters out others

  eventarc-utils
    toCloudEventProtoFormat
      ✔ converts cloud event to proto format
      ✔ populates specversion if not provided
      ✔ populates time if not provided
      ✔ populates id if not provided
      ✔ populates source from EVENTARC_CLOUD_EVENT_SOURCE env var if not set
      ✔ throws invalid argument when source not set
      ✔ throws invalid argument when custom attr not string
      ✔ populates converts object data to JSON and sets datacontenttype
      ✔ populates string data and sets datacontenttype

  Functions
    getFunctions()
      ✔ should throw when default app is not available
      ✔ should reject given an invalid credential without project ID
      ✔ should not throw given a valid app
      ✔ should return the same instance for a given app instance

  Functions
    Constructor
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: null
      ✔ should throw given invalid app: 0
      ✔ should throw given invalid app: 1
      ✔ should throw given invalid app: true
      ✔ should throw given invalid app: false
      ✔ should throw given invalid app: ""
      ✔ should throw given invalid app: "a"
      ✔ should throw given invalid app: []
      ✔ should throw given invalid app: [1,"a"]
      ✔ should throw given invalid app: {}
      ✔ should throw given invalid app: {"a":1}
      ✔ should throw given invalid app: undefined
      ✔ should throw given invalid app: undefined
      ✔ should reject when initialized without project ID
      ✔ should reject when failed to contact the Metadata server for service account email
      ✔ should not throw given a valid app
    app
      ✔ returns the app from the constructor

  TaskQueue
    Constructor
      ✔ should throw given invalid client: null
      ✔ should throw given invalid client: null
      ✔ should throw given invalid client: 0
      ✔ should throw given invalid client: 1
      ✔ should throw given invalid client: true
      ✔ should throw given invalid client: false
      ✔ should throw given invalid client: ""
      ✔ should throw given invalid client: "a"
      ✔ should throw given invalid client: []
      ✔ should throw given invalid client: [1,"a"]
      ✔ should throw given invalid client: {}
      ✔ should throw given invalid client: {"a":1}
      ✔ should throw given invalid client: undefined
      ✔ should throw given invalid client: undefined
      ✔ should throw given invalid name: null
      ✔ should throw given invalid name: null
      ✔ should throw given invalid name: 0
      ✔ should throw given invalid name: 1
      ✔ should throw given invalid name: true
      ✔ should throw given invalid name: false
      ✔ should throw given invalid name: ""
      ✔ should throw given invalid name: []
      ✔ should throw given invalid name: [1,"a"]
      ✔ should throw given invalid name: {}
      ✔ should throw given invalid name: {"a":1}
      ✔ should throw given invalid name: undefined
      ✔ should throw given invalid name: undefined
      ✔ should not throw given a valid name and client
    enqueue
      ✔ should propagate API errors
      ✔ should propagate API errors with task options

  FunctionsApiClient
    Constructor
      ✔ should reject when the app is null
    enqueue
      ✔ should reject when project id is not available
      ✔ should reject when project id is not available in partial resource name
      ✔ should throw if functionName is null
      ✔ should throw if functionName is NaN
      ✔ should throw if functionName is 0
      ✔ should throw if functionName is 1
      ✔ should throw if functionName is true
      ✔ should throw if functionName is false
      ✔ should throw if functionName is 
      ✔ should throw if functionName is 
      ✔ should throw if functionName is 1,a
      ✔ should throw if functionName is [object Object]
      ✔ should throw if functionName is [object Object]
      ✔ should throw if functionName is function noop() {
      // No operation performed.
    }
      ✔ should throw if functionName is undefined
      ✔ should throw if functionName is project/abc/locations/east/fname
      ✔ should throw if functionName is location/west/
      ✔ should throw if functionName is //
      ✔ should throw if options is null
      ✔ should throw if options is abc
      ✔ should throw if options is 
      ✔ should throw if options is 
      ✔ should throw if options is true
      ✔ should throw if options is 102
      ✔ should throw if options is 1.2
      ✔ should throw if scheduleTime is null
      ✔ should throw if scheduleTime is 
      ✔ should throw if scheduleTime is abc
      ✔ should throw if scheduleTime is 102
      ✔ should throw if scheduleTime is 1.2
      ✔ should throw if scheduleTime is 
      ✔ should throw if scheduleTime is [object Object]
      ✔ should throw if scheduleTime is true
      ✔ should throw if scheduleTime is NaN
      ✔ should throw if scheduleDelaySeconds is null
      ✔ should throw if scheduleDelaySeconds is abc
      ✔ should throw if scheduleDelaySeconds is 
      ✔ should throw if scheduleDelaySeconds is 
      ✔ should throw if scheduleDelaySeconds is [object Object]
      ✔ should throw if scheduleDelaySeconds is true
      ✔ should throw if scheduleDelaySeconds is NaN
      ✔ should throw if scheduleDelaySeconds is -1
      ✔ should throw if dispatchDeadlineSeconds is null
      ✔ should throw if dispatchDeadlineSeconds is abc
      ✔ should throw if dispatchDeadlineSeconds is 
      ✔ should throw if dispatchDeadlineSeconds is 
      ✔ should throw if dispatchDeadlineSeconds is [object Object]
      ✔ should throw if dispatchDeadlineSeconds is true
      ✔ should throw if dispatchDeadlineSeconds is NaN
      ✔ should throw if dispatchDeadlineSeconds is -1
      ✔ should throw if dispatchDeadlineSeconds is 14
      ✔ should throw if dispatchDeadlineSeconds is 1801
      ✔ should throw given an invalid uri: null
      ✔ should throw given an invalid uri: 
      ✔ should throw given an invalid uri: a
      ✔ should throw given an invalid uri: foo
      ✔ should throw given an invalid uri: image.jpg
      ✔ should throw given an invalid uri: 
      ✔ should throw given an invalid uri: [object Object]
      ✔ should throw given an invalid uri: true
      ✔ should throw given an invalid uri: NaN
      ✔ should throw when both scheduleTime and scheduleDelaySeconds are provided
      ✔ should reject when a full platform error response is received
      ✔ should reject with unknown-error when error code is not present
      ✔ should reject with unknown-error for non-json response
      ✔ should reject when rejected with a FirebaseAppError
      ✔ should resolve on success
      ✔ should resolve the projectId and location from the full resource name
      ✔ should resolve the location from the partial resource name
      ✔ should update the function name and set headers when the extension-id is provided
      ✔ should use the default projectId following a request with a full resource name
      ✔ should convert scheduleTime to ISO string
      ✔ should set scheduleTime based on scheduleDelaySeconds
      ✔ should convert dispatchDeadline to a duration with `s` prefix
      ✔ should encode data in the payload

  Extensions
    Constructor
      ✔ should reject when the app is null
    app
      ✔ returns the app from the constructor
    Runtime
      Constructor
        ✔ should error if called without PROJECT_ID
        ✔ should error if called without EXT_INSTANCE_ID
        ✔ should not error if called from an extension
      setProcessingState
        ✔ should set PROCESSING_FAILED state
        ✔ should set PROCESSING_WARNING state
        ✔ should set PROCESSING_COMPLETE state
        ✔ should set NONE state
        ✔ should covert errors in FirebaseErrors
      setFatalError
        ✔ should set fatal error
        ✔ should error if errorMessage is empty
        ✔ should convert errors in FirebaseErrors

  Extension API client
    Constructor
      ✔ should reject when the app is null
    updateRuntimeData
      ✔ should updateRuntimeData
      ✔ should convert errors in FirebaseErrors


  5618 passing (7s)
  5 failing

  1) Storage
       Constructor
         should throw given invalid app: null:

      AssertionError: expected [Function] to throw error including 'First argument passed to admin.storag…' but got 'Cannot read properties of null (readi…'
      + expected - actual

      -Cannot read properties of null (reading 'options')
      +First argument passed to admin.storage() must be a valid Firebase app instance.
      
      at Context.<anonymous> (test/unit/storage/storage.spec.ts:49:20)
      at processImmediate (node:internal/timers:466:21)

  2) Storage
       Constructor
         should throw given no app:

      AssertionError: expected [Function] to throw error including 'First argument passed to admin.storag…' but got 'Cannot read properties of undefined (…'
      + expected - actual

      -Cannot read properties of undefined (reading 'options')
      +First argument passed to admin.storage() must be a valid Firebase app instance.
      
      at Context.<anonymous> (test/unit/storage/storage.spec.ts:57:18)
      at processImmediate (node:internal/timers:466:21)

  3) Storage
       getStorage()
         should return an error when no metadata:

      AssertionError: expected promise to be rejected with an error including 'No download token available. Please c…' but got 'metadata.metadata.firebaseStorageDown…'
      + expected - actual

      -metadata.metadata.firebaseStorageDownloadTokens.split is not a function or its return value is not iterable
      +No download token available. Please create one in the Firebase Console.
      
  

  4) Storage
       getStorage()
         should return the proper download url when metadata is available:
     TypeError: metadata.metadata.firebaseStorageDownloadTokens.split is not a function or its return value is not iterable
      at FirebaseStorageFile.getDownloadUrl (src/storage/cloud-extensions.ts:67:69)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)
      at async Context.<anonymous> (test/unit/storage/index.spec.ts:118:7)

  5) Storage
       getStorage()
         should use the emulator host name when process.env is set:
     TypeError: metadata.metadata.firebaseStorageDownloadTokens.split is not a function or its return value is not iterable
      at FirebaseStorageFile.getDownloadUrl (src/storage/cloud-extensions.ts:67:69)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)
      at async Context.<anonymous> (test/unit/storage/index.spec.ts:143:7)



info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
